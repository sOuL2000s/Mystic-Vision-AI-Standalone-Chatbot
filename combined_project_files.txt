<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mystic Vision AI Chat</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&family=Montserrat:wght@400;600&display=swap" rel="stylesheet">
    <!-- Tailwind CSS CDN for utility classes -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Marked.js CDN for Markdown parsing -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <!-- Lucide Icons for a modern, futuristic feel -->
    <script src="https://cdn.jsdelivr.net/npm/lucide-dynamic@latest/dist/lucide.min.js"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <!-- Prism.js for code syntax highlighting -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-okaidia.min.css" rel="stylesheet" />
    <!-- jsPDF CDN for PDF export -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <!-- PWA Manifest -->
    <link rel="manifest" href="/manifest.json">
    <style>
        /* General Styles - Mystic Vision Theme */
        :root {
            /* Default Dark Mode Palette: Cosmic Purple */
            --primary-bg: #0A0A28; /* Even deeper dark blue-purple, almost black */
            --secondary-bg: #15153A; /* Darker purple-blue - container background */
            --tertiary-bg: #22224F; /* Medium dark purple-blue - header/input area/button base */
            --text-color: #E6E6FA; /* Light lavender text for ethereal feel */
            --accent-color: #C070FF; /* Vibrant mystical purple */
            --border-color: #2F2F6A; /* Slightly clearer border */
            --user-bubble: #353570; /* Deeper purple for user */
            --ai-bubble: #1A1A40; /* Slightly different dark purple for AI */
            --input-bg: #0C0C2F; /* Keeps the input field very dark */
            --button-hover-bg: #A040FF; /* Slightly darker accent for hover */
            --shadow-color: rgba(0, 0, 0, 0.6); /* Stronger shadow */
            --code-bg: #0D0D32; /* Code block background */
            --code-text: #F8F8F8; /* Code text color */
            --code-border: #2F2F6A; /* Code border */
            --code-header-bg: #22224F; /* Code header background */
            --code-header-border: #353570; /* Code header border */
            --inline-code-bg: rgba(192, 112, 255, 0.25); /* Inline code background */
            --inline-code-color: var(--accent-color); /* Inline code color */
            --message-action-bg: rgba(10, 10, 26, 0.7); /* Message action background */
            --message-action-user-bg: rgba(53, 53, 112, 0.7); /* Message action background for user messages */
            --message-action-icon: #BEC2D5; /* Lighter icon color */
            --message-action-icon-hover: var(--text-color); /* Message action icon hover color */

            /* Common Accent Colors (for alerts/status) */         
            --accent-error: #ef4444; /* Red for errors */         
            --accent-success: #22c55e; /* Green for success */          

            /* Font Families */         
            --font-family-primary: 'Poppins', sans-serif;         
            --font-family-secondary: 'Montserrat', sans-serif;          

            /* Autocomplete */
            --autocomplete-bg: var(--secondary-bg);
            --autocomplete-border: var(--border-color);
            --autocomplete-text: var(--text-color);
            --autocomplete-hover-bg: var(--tertiary-bg);
            --autocomplete-selected-bg: var(--accent-color);
            --autocomplete-selected-text: white;

            /* Cosmic Animation Colors */
            --cosmic-glow-color-1: #C070FF; /* Vibrant mystical purple */
            --cosmic-glow-color-2: #7B2FEE; /* Deeper mystical purple */
            --cosmic-star-color: #E6E6FA; /* Light lavender for stars */
            --user-avatar-bg: #4A4A80; /* Background for generic user avatar */
        }

        /* Starlight Lavender Theme */
        body.starlight-lavender { 
            --primary-bg: #F0F4FF; /* Very pale blue-lavender */
            --secondary-bg: #FFFFFF; /* Pure white for container/card background */
            --tertiary-bg: #E0E8FF; /* Pale light blue-purple for header/input area/button base */
            --text-color: #1A0033; /* Very dark purple/black for main text */
            --accent-color: #8C2BFF; /* Slightly richer/darker purple for light mode accent */
            --border-color: #C0C8D8; /* Soft light border */
            --user-bubble: #D8E2FF; /* Light blue-purple, user bubble */
            --ai-bubble: #F0F4FF; /* Even paler lavender, AI bubble */
            --input-bg: #F8F8FD; /* Slightly off-white for input field */
            --button-hover-bg: #B050FF; /* Slightly darker accent for hover in light mode */
            --shadow-color: rgba(0, 0, 0, 0.15); /* Lighter shadow */
            --code-bg: #F5F7FA; /* Lighter background for code in light mode */
            --code-text: #333; /* Code text color */
            --code-border: #D8DCE5; /* Code border */
            --code-header-bg: #E8ECF5; /* Code header background */
            --code-header-border: #D0D4DF; /* Code header border */
            --inline-code-bg: rgba(130, 0, 200, 0.12); /* Inline code background (LM accent with transparency) */
            --inline-code-color: var(--accent-color); /* Inline code color */
            --message-action-bg: rgba(255, 255, 255, 0.8); /* Message action background */
            --message-action-user-bg: rgba(220, 230, 255, 0.8); /* Message action background for user messages */
            --message-action-icon: #666; /* Message action icon color */
            --message-action-icon-hover: var(--text-color); /* Message action icon hover color */

            /* Autocomplete */
            --autocomplete-bg: var(--secondary-bg);
            --autocomplete-border: var(--border-color);
            --autocomplete-text: var(--text-color);
            --autocomplete-hover-bg: var(--tertiary-bg);
            --autocomplete-selected-bg: var(--accent-color);
            --autocomplete-selected-text: white;

            /* Cosmic Animation Colors Light Mode */
            --cosmic-glow-color-1: #8C2BFF; 
            --cosmic-glow-color-2: #6A1DCC;
            --cosmic-star-color: #333;
            --user-avatar-bg: #C0C8D8; /* Lighter background for generic user avatar */
        }

        /* NEW: Emerald Galaxy Theme */
        body.emerald-galaxy {
            --primary-bg: #031A20; /* Very dark teal/green-blue */
            --secondary-bg: #0B2B33; /* Darker teal-blue */
            --tertiary-bg: #15454F; /* Medium dark teal */
            --text-color: #E0FFFF; /* Pale aqua/cyan */
            --accent-color: #00FFC0; /* Vibrant emerald green */
            --border-color: #2D6C77; /* Slightly darker teal border */
            --user-bubble: #255C65; /* Darker green-blue bubble */
            --ai-bubble: #0F3A40; /* Even darker green-blue bubble */
            --input-bg: #052028;
            --button-hover-bg: #00D0A0; /* Slightly darker emerald */
            --shadow-color: rgba(0, 0, 0, 0.6);
            --code-bg: #0A252E;
            --code-text: #E0FFFF;
            --code-border: #2D6C77;
            --code-header-bg: #15454F;
            --code-header-border: #255C65;
            --inline-code-bg: rgba(0, 255, 192, 0.2);
            --inline-code-color: var(--accent-color);
            --message-action-bg: rgba(3, 26, 32, 0.7);
            --message-action-user-bg: rgba(37, 92, 101, 0.7);
            --message-action-icon: #BFDFFF;
            --message-action-icon-hover: var(--text-color);
            --user-avatar-bg: #1B3F47;
            --cosmic-glow-color-1: #00FFC0;
            --cosmic-glow-color-2: #00A080; 
            --cosmic-star-color: #E0FFFF;
        }

        /* NEW: Crimson Nebula Theme */
        body.crimson-nebula {
            --primary-bg: #1A0515; /* Very dark deep red-purple */
            --secondary-bg: #2B0A20; /* Darker red-purple */
            --tertiary-bg: #4F153A; /* Medium dark red-purple */
            --text-color: #FFEFF5; /* Pale pink/red-white */
            --accent-color: #FF4080; /* Vibrant deep rose/magenta */
            --border-color: #772D57; /* Slightly darker border */
            --user-bubble: #5C254F; /* Darker red-purple bubble */
            --ai-bubble: #3A0F2B; /* Even darker red-purple bubble */
            --input-bg: #20051A;
            --button-hover-bg: #FF60A0; /* Slightly brighter accent */
            --shadow-color: rgba(0, 0, 0, 0.6);
            --code-bg: #250A1F;
            --code-text: #FFEFF5;
            --code-border: #772D57;
            --code-header-bg: #4F153A;
            --code-header-border: #5C254F;
            --inline-code-bg: rgba(255, 64, 128, 0.2);
            --inline-code-color: var(--accent-color);
            --message-action-bg: rgba(26, 5, 21, 0.7);
            --message-action-user-bg: rgba(92, 37, 79, 0.7);
            --message-action-icon: #FFE0F0;
            --message-action-icon-hover: var(--text-color);
            --user-avatar-bg: #3F1B35;
            --cosmic-glow-color-1: #FF4080;
            --cosmic-glow-color-2: #FF0060;
            --cosmic-star-color: #FFEFF5;
        }

        /* IMPROVED: Golden Aurora Theme */
        body.golden-aurora {
            --primary-bg: #060B12; /* Even deeper, almost black-blue, base of the night sky */
            --secondary-bg: #0F161E; /* Darker blue-grey for main container */
            --tertiary-bg: #1A2533; /* Medium dark blue for header/input/sidebar section backgrounds */
            --text-color: #F8F8F8; /* Crisp off-white for main text for better readability */
            --accent-color: #FFD700; /* Pure, strong gold - keep this as the primary gold focus */
            --border-color: #2F3E50; /* Subtler, deeper blue border */
            --user-bubble: #28374A; /* A rich, slightly muted dark blue for user messages */
            --ai-bubble: #121C27; /* A very dark, muted blue for AI messages, distinct but harmonious */
            --input-bg: #080D14; /* Very dark for input field, blends with primary */
            --button-hover-bg: #FFC000; /* Slightly brighter golden-orange for hover */
            --shadow-color: rgba(0, 0, 0, 0.7); /* Deeper shadows for better separation */
            --code-bg: #0F161E; /* Same as secondary background for code blocks, consistency */
            --code-text: #E0FFFF; /* Pale aqua for code text for good readability on dark background */
            --code-border: #2F3E50; /* Same as main border */
            --code-header-bg: #1A2533; /* Same as tertiary */
            --code-header-border: #28374A; /* Same as user bubble */
            --inline-code-bg: rgba(255, 215, 0, 0.25); /* Slightly more opaque golden glow */
            --inline-code-color: #FFECB3; /* Lighter gold for inline code, stands out more */
            --message-action-bg: rgba(6, 11, 18, 0.7); /* More transparent dark for actions */
            --message-action-user-bg: rgba(40, 55, 74, 0.7); /* More transparent user action background */
            --message-action-icon: #BECDE0; /* Slightly bluer, lighter icon color */
            --message-action-icon-hover: var(--text-color);
            --user-avatar-bg: #2B3D55; /* Slightly desaturated dark blue for generic user avatar */
            /* Cosmic Animation Colors - Focus on golden and complementary warm tones */
            --cosmic-glow-color-1: #FFD700; /* Primary strong gold */
            --cosmic-glow-color-2: #FFA500; /* Complementary vibrant orange for aurora effect */
            --cosmic-star-color: #F8F8F8; /* Bright white for stars */
        }
        /* NEW: Cosmic Gold Theme (Royal Edition) */
        body.cosmic-gold {
            /* Deeper, more profound blacks */
            --primary-bg: #000000; /* True black of the cosmos */
            --secondary-bg: #0A0A10; /* Very deep dark blue-black */
            --tertiary-bg: #151520; /* Darker charcoal */

            /* Royal Gold & Text on Gold */
            --text-color: #FFFAF0; /* Soft, warm off-white/cream remains */
            --accent-color: #CCAA00; /* A rich, royal gold - less yellow, more profound */
            --text-on-accent: #000000; /* Essential: Black font for elements with gold background */

            /* Borders & Shadows */
            --border-color: #554422; /* Darker bronze/gold to complement the royal accent */
            --shadow-color: rgba(0, 0, 0, 0.8); /* Deeper shadows for more contrast */

            /* Bubbles & Input Fields */
            --user-bubble: #252530; /* Darker charcoal for user messages */
            --ai-bubble: #101018; /* Very dark blue-grey for AI messages, almost black */
            --input-bg: #030305; /* Extremely dark for input, a subtle whisper of difference from true black */

            /* Button Interactions */
            --button-hover-bg: #E0B500; /* A lighter, rich gold for button hover states */

            /* Code Blocks */
            --code-bg: #08080B; /* Darker code background */
            --code-text: var(--text-color);
            --code-border: var(--border-color);
            --code-header-bg: var(--tertiary-bg);
            --code-header-border: var(--user-bubble);

            /* Inline Code - Now with black text on royal gold */
            --inline-code-bg: var(--accent-color); /* Solid royal gold background */
            --inline-code-color: var(--text-on-accent); /* Black text on the gold */

            /* Message Actions */
            --message-action-bg: rgba(0, 0, 0, 0.7); /* Adjusted to new primary background */
            --message-action-user-bg: rgba(25, 25, 30, 0.7); /* Adjusted to new user bubble background */
            --message-action-icon: #C0C0C0;
            --message-action-icon-hover: var(--text-color);

            /* Avatars & Cosmic Glows */
            --user-avatar-bg: #222222; /* Darker grey for generic user avatar */
            --cosmic-glow-color-1: #CCAA00; /* Uses the new royal gold for glow */
            --cosmic-glow-color-2: #D08000; /* Slightly more burnt orange for the secondary glow */
            --cosmic-star-color: var(--text-color);
        }

        /* NEW Theme: Neon Glitch */
        body.neon-glitch {
            --primary-bg: #02010A; /* Very dark blue-black */
            --secondary-bg: #0F0A20; /* Dark blue-purple */
            --tertiary-bg: #1A1030; /* Deeper purple */
            --text-color: #E0FFFF; /* Electric light blue */
            --accent-color: #00E0FF; /* Bright cyan/aqua neon */
            --border-color: #2A1F45; /* Darker purple-blue */
            --user-bubble: #301A50; /* Deep purple for user */
            --ai-bubble: #15082A; /* Even darker purple for AI */
            --input-bg: #0A0515;
            --button-hover-bg: #00B0CC; /* Slightly darker neon */
            --shadow-color: rgba(0, 0, 0, 0.7);
            --code-bg: #080415;
            --code-text: #B0FFFF;
            --code-border: #2A1F45;
            --code-header-bg: #1A1030;
            --code-header-border: #301A50;
            --inline-code-bg: rgba(0, 224, 255, 0.25);
            --inline-code-color: var(--accent-color);
            --message-action-bg: rgba(2, 1, 10, 0.7);
            --message-action-user-bg: rgba(48, 26, 80, 0.7);
            --message-action-icon: #B0FFFF;
            --message-action-icon-hover: #E0FFFF;
            --user-avatar-bg: #20103A;
            --cosmic-glow-color-1: #00E0FF; /* Neon blue glow */
            --cosmic-glow-color-2: #FF00FF; /* Neon pink glow */
            --cosmic-star-color: #E0FFFF;
        }

        /* NEW Theme: Ancient Papyrus */
        body.ancient-papyrus {
            --primary-bg: #FDF6E3; /* Light cream/parchment background */
            --secondary-bg: #FFF8EB; /* Whiter cream for containers */
            --tertiary-bg: #E8E0C9; /* Slightly darker cream for headers/inputs */
            --text-color: #4A3A2B; /* Dark brown/sepia text */
            --accent-color: #A0522D; /* Earthy terracotta/sienna */
            --border-color: #D3C7B0; /* Muted brown border */
            --user-bubble: #F0E8D7; /* Light tan user bubble */
            --ai-bubble: #FCF5E0; /* Very pale cream AI bubble */
            --input-bg: #FBF4E0;
            --button-hover-bg: #8B4513; /* Darker earthy brown */
            --shadow-color: rgba(0, 0, 0, 0.1); /* Very light shadow */
            --code-bg: #E8E0C9;
            --code-text: #4A3A2B;
            --code-border: #D3C7B0;
            --code-header-bg: #DCCFA7;
            --code-header-border: #C8B99D;
            --inline-code-bg: rgba(160, 82, 45, 0.1);
            --inline-code-color: var(--accent-color);
            --message-action-bg: rgba(255, 255, 255, 0.7);
            --message-action-user-bg: rgba(240, 232, 215, 0.7);
            --message-action-icon: #666;
            --message-action-icon-hover: var(--text-color);
            --user-avatar-bg: #B0A080;
            --cosmic-glow-color-1: #D2B48C; /* Tan/parchment glow */
            --cosmic-glow-color-2: #B8860B; /* Golden brown glow */
            --cosmic-star-color: #4A3A2B; /* Dark specks as 'stars' */
        }


        /* Base Body Styles - MODIFIED for full screen */
        body {
            font-family: var(--font-family-primary);
            background: linear-gradient(135deg, var(--primary-bg), var(--secondary-bg));
            color: var(--text-color);
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh; /* Use height for full viewport height */
            width: 100vw; /* Use width for full viewport width */
            overflow: hidden; /* Hide overflow to prevent scrollbars on body */
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            transition: background 0.6s ease, color 0.6s ease;
            position: relative; /* Needed for cosmic background pseudo-element */
        }

        /* Cosmic Body Background */
        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            /* Subtle nebula effect with radial gradients */
            background: radial-gradient(circle at 15% 50%, var(--cosmic-glow-color-1) 0%, transparent 40%),
                        radial-gradient(circle at 85% 20%, var(--cosmic-glow-color-2) 0%, transparent 35%),
                        radial-gradient(circle at 40% 90%, var(--cosmic-glow-color-1) 0%, transparent 30%);
            background-size: 200% 200%; /* Make gradients larger to animate */
            animation: cosmicNebula 20s infinite alternate ease-in-out;
            z-index: -1; /* Behind everything */
            pointer-events: none; /* Don't block clicks */
            transition: background 0.6s ease;
        }

        @keyframes cosmicNebula {
            0% { background-position: 0% 0%; }
            100% { background-position: 100% 100%; }
        }

        /* Chatbot Container (Main Application) - Now a flex container */
        .chatbot-container {
            background-color: var(--secondary-bg);
            border-radius: 0; /* Remove border-radius for full screen */
            box-shadow: none; /* Remove shadow for full screen */
            width: 100%; /* Occupy full parent width */
            height: 100%; /* Occupy full parent height */
            display: flex; /* Make it a flex container for sidebar + main content */
            overflow: hidden;
            border: none; /* Remove border for full screen */
            animation: fadeIn 0.8s ease-out;
            position: relative; 
            transition: background-color 0.6s ease, border-color 0.6s ease, box-shadow 0.6s ease;
        }
        /* Keep fadeIn animation */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        /* NEW: Chat Sidebar */
        .chat-sidebar {
            width: 280px; /* Default open width for desktop */
            flex-shrink: 0; /* Prevents sidebar from shrinking */
            background-color: var(--tertiary-bg);
            border-right: 1px solid var(--border-color);
            display: flex;
            flex-direction: column;
            padding: 20px 15px;
            transition: width 0.3s ease-in-out, transform 0.3s ease-in-out, background-color 0.6s ease, border-color 0.6s ease;
            z-index: 20; /* Ensure sidebar is above main content if needed */
            box-shadow: 2px 0 10px rgba(0,0,0,0.3); /* Subtle shadow */
            overflow-y: auto; /* Enable scrolling for sidebar content */
        }
        .chat-sidebar::-webkit-scrollbar {
            width: 6px;
        }
        .chat-sidebar::-webkit-scrollbar-track {
            background: var(--primary-bg); 
            border-radius: 10px;
        }
        .chat-sidebar::-webkit-scrollbar-thumb {
            background-color: var(--accent-color); 
            border-radius: 10px;
            border: 1px solid var(--primary-bg); 
        }

        .chat-sidebar .sidebar-header {
            display: flex;
            flex-wrap: wrap; /* Allows items to wrap if space is constrained */
            align-items: center;
            justify-content: space-between; /* Pushes items to ends */
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--border-color);
        }
        .chat-sidebar .sidebar-header h3 {
            margin: 0 10px; /* Adjust margin for spacing from buttons */
            flex-grow: 1; /* Allows title to take available space */
            text-align: center; /* Center the title visually */
            color: var(--accent-color);
            font-family: var(--font-family-secondary);
            font-size: 1.2em;
        }
        /* New Chat Button (now within sidebar) */
        #newChatBtn {
            position: static; /* No longer absolutely positioned */
            margin-right: 0; /* Remove old margin to let justify-content handle spacing */
            background-color: var(--accent-color);
            color: white;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.8em;
            font-family: var(--font-family-primary);
            font-weight: 600;
            cursor: pointer;
            border: none;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: background-color 0.3s ease, transform 0.2s ease;
            z-index: 3; 
            display: flex;
            align-items: center;
            gap: 4px;
        }
        #newChatBtn:hover {
            background-color: var(--button-hover-bg);
            transform: translateY(-1px);
        }
        #newChatBtn:active {
            transform: translateY(0);
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        }
        #newChatBtn .lucide {
            width: 0.9em;
            height: 0.9em;
        }

        /* Toggle Sidebar Button (inside sidebar, 'X' icon for mobile close) */
        #toggleSidebarBtn {
            background: none;
            border: none;
            color: var(--text-color);
            cursor: pointer;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: none; /* Hidden by default, shown on mobile when sidebar open */
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s ease;
        }
        #toggleSidebarBtn:hover {
            background-color: rgba(255,255,255,0.1);
        }

        /* NEW Sidebar Section Styling */
        .sidebar-section {
            margin-bottom: 1rem;
            padding: 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            background-color: var(--secondary-bg);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: background-color 0.6s ease, border-color 0.6s ease, box-shadow 0.6s ease;
        }
        .sidebar-section h4 {
            margin-top: 0;
            margin-bottom: 0.75rem;
            color: var(--accent-color);
            font-family: var(--font-family-secondary);
            font-size: 1.1em;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 0.5rem;
            transition: color 0.6s ease, border-color 0.6s ease;
        }
        .sidebar-section input[type="password"], /* Keep this as it styles other inputs */
        .sidebar-section textarea,
        .sidebar-section select {
            background-color: var(--input-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            padding: 0.5rem 0.75rem;
            border-radius: 0.375rem;
            font-family: var(--font-family-primary);
            font-size: 0.9em;
            resize: vertical;
            transition: border-color 0.3s ease, background-color 0.3s ease, color 0.6s ease;
        }
        .sidebar-section input[type="password"]:focus,
        .sidebar-section textarea:focus,
        .sidebar-section select:focus {
            border-color: var(--accent-color);
            background-color: color-mix(in srgb, var(--primary-bg) 90%, var(--tertiary-bg) 10%);
            outline: none;
        }
        /* Style for regular buttons within sidebar sections */
        .sidebar-section button {
            background-color: var(--accent-color); /* Default button color */
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-size: 0.9em;
            font-weight: 600;
            cursor: pointer;
            border: none;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: background-color 0.3s ease, transform 0.2s ease;
            display: flex; /* For icons */
            align-items: center;
            justify-content: center;
            gap: 0.5rem; /* Space between text and icon */
        }
        .sidebar-section button:hover {
            background-color: var(--button-hover-bg);
            transform: translateY(-1px);
        }
        .sidebar-section button:active {
            transform: translateY(0);
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        }
        /* Special style for 'Clear' type buttons (e.g., Clear System Prompt) */
        .sidebar-section button.text-red-400 {
            background: none;
            box-shadow: none;
            color: var(--accent-error);
            padding: 0;
            font-weight: normal;
            text-align: left;
            display: inline-block;
            gap: 0; /* No gap for plain text buttons */
        }
        .sidebar-section button.text-red-400:hover {
            text-decoration: underline;
            background: none;
            transform: none;
        }
        /* Ensure the existing settings-toggles-container correctly pushes to the bottom */
        .settings-toggles-container {
            margin-top: auto; /* Pushes this element to the bottom, taking all available space above it */
            padding-top: 1rem;
            border-top: 1px solid var(--border-color); /* Visual separator from content above */
        }

        /* NEW: Main Chat Content */
        .chat-main-content {
            flex-grow: 1; /* Takes remaining space */
            display: flex;
            flex-direction: column;
            overflow: hidden; /* Important for chat history scroll */
            transition: width 0.3s ease-in-out;
        }

        /* Header - Adjusted for sleekness */
        .chatbot-header {
            background-color: var(--tertiary-bg);
            padding: 15px; /* Reduced padding */
            border-bottom: 1px solid var(--border-color); /* Thinner border */
            text-align: center;
            border-top-left-radius: 0; 
            border-top-right-radius: 0; 
            position: relative;
            overflow: hidden;
            z-index: 10; 
            transition: background-color 0.6s ease, border-color 0.6s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }
        
        .chatbot-header .header-content {
            position: relative;
            z-index: 2;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 3px; /* Reduced gap */
        }

        .chatbot-header h1 {
            margin: 0;
            font-size: 1.8em; /* Smaller font size */
            color: var(--accent-color);
            font-family: var(--font-family-secondary);
            font-weight: 600;
            letter-spacing: 1px;
            text-shadow: 0 0 10px var(--cosmic-glow-color-1), 0 0 20px var(--cosmic-glow-color-2);
            transition: color 0.6s ease, text-shadow 0.6s ease;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .chatbot-header .logo {
            height: 1.8em; /* Smaller logo */
            width: auto;
            object-fit: contain;
            filter: drop-shadow(0 0 5px var(--cosmic-glow-color-1));
            transition: filter 0.6s ease;
        }

        .chatbot-header .tagline {
            font-family: var(--font-family-secondary);
            font-size: 0.8em; /* Smaller tagline */
            color: var(--text-color);
            opacity: 0.7;
            margin: 0;
            font-style: italic;
            transition: color 0.6s ease;
        }

        .chatbot-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle at center, var(--cosmic-glow-color-1) 0%, transparent 70%);
            transform: rotate(45deg);
            animation: headerGlow 8s infinite alternate ease-in-out, pulseGlow 4s infinite alternate ease-in-out;
            z-index: 1;
            transition: background 0.6s ease;
        }

        @keyframes headerGlow {
            0% { transform: scale(0.8) rotate(0deg); opacity: 0.6; }
            50% { transform: scale(1.1) rotate(180deg); opacity: 0.8; }
            100% { transform: scale(0.8) rotate(360deg); opacity: 0.6; }
        }
        @keyframes pulseGlow {
            0% { box-shadow: 0 0 15px var(--cosmic-glow-color-1); }
            100% { box-shadow: 0 0 25px var(--cosmic-glow-color-2); }
        }

        /* NEW: Container for both Dark Mode and Simulate Typing toggles */
        .settings-toggles-container {
            display: flex;
            flex-direction: column; /* Stack them vertically */
            gap: 8px; /* Space between toggles */
            /*z-index: 3;*/
        }
        .theme-selector-container label, .response-mode-container span { 
            color: var(--text-color); 
            transition: color 0.6s ease;
            font-size: 0.8em; /* Smaller text */
            vertical-align: middle;
            line-height: 1; 
        }
        .theme-selector-container select {
            background-color: var(--input-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 0.8em;
            transition: background-color 0.6s ease, color 0.6s ease, border-color 0.6s ease;
            cursor: pointer;
            -webkit-appearance: none; /* Remove default dropdown arrow for custom styling */
            -moz-appearance: none;
            appearance: none;
            /*background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="%23${encodeURIComponent(getComputedStyle(document.documentElement).getPropertyValue('--text-color').substring(1))}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-down"><path d="m6 9 6 6 6-6"/></svg>');*/
            background-repeat: no-repeat;
            background-position: right 8px center;
            padding-right: 28px; /* Make space for the custom arrow */
        }
        .theme-selector-container select:hover {
            background-color: var(--secondary-bg);
        }

        .dark-mode-container, .response-mode-container { /* Apply common styles here */
            display: flex;
            align-items: center;
            gap: 6px; /* Reduced gap */
            font-family: var(--font-family-primary);
            font-size: 0.8em; /* Smaller text */
        }
        .dark-mode-container span, .response-mode-container span {
            color: var(--text-color); 
            transition: color 0.6s ease;
            font-size: 0.8em; /* Smaller text */
            /* NEW: Vertical alignment for text next to the toggle */
            vertical-align: middle;
            line-height: 1; /* Helps with precise vertical alignment */
        }

        /* Adjust switch size for both toggles */
        .switch { 
            position: relative;
            display: inline-block;
            width: 48px; /* Slightly smaller */
            height: 26px; /* Slightly smaller */
            border-radius: 13px; /* Adjusted */
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.2);
            border: 1px solid rgba(255,255,255,0.1); 
            transition: background-color 0.6s ease, border-color 0.6s ease;
        }
        .switch input { 
            opacity: 0;
            width: 0;
            height: 0;
            /* NEW/REINFORCED: Ensure the native checkbox is hidden */
            display: none; 
        }
        .slider { 
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #4b5563; /* Grey for unchecked state */
            border-radius: 13px; /* Adjusted */
            transition: .4s;
        }
        .slider:before {
            position: absolute;
            content: "";
            height: 20px; /* Smaller */
            width: 20px; /* Smaller */
            left: 3px; /* Adjusted */
            bottom: 3px; /* Adjusted */
            background-color: white; 
            border-radius: 50%;
            transition: .4s;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        input:checked + .slider {
            background-color: var(--accent-color); /* Purple for checked state */
        }
        input:checked + .slider:before {
            transform: translateX(22px); /* Adjusted */
        }


        /* NEW: Mobile Sidebar Toggle (Hamburger icon in main header) */
        #mobileToggleSidebarBtn {
            position: absolute;
            top: 15px;
            left: 15px;
            background-color: var(--tertiary-bg);
            color: var(--text-color);
            padding: 10px;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: none; /* Hidden by default, shown on mobile */
            align-items: center;
            justify-content: center;
            border: none;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: background-color 0.3s ease, transform 0.2s ease;
            z-index: 15; /* Ensure it's above other header elements */
        }
        #mobileToggleSidebarBtn:hover {
            background-color: var(--secondary-bg);
            transform: translateY(-1px);
        }
        #mobileToggleSidebarBtn:active {
            transform: translateY(0);
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        }


        /* Chat History */
        .chat-history {
            flex-grow: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 15px;
            scroll-behavior: smooth;
            padding-bottom: 30px; /* Increased padding to give more space from input */
        }

        .chat-history::-webkit-scrollbar {
            width: 8px;
        }

        .chat-history::-webkit-scrollbar-track {
            background: var(--primary-bg); 
            border-radius: 10px;
            transition: background 0.6s ease;
        }

        .chat-history::-webkit-scrollbar-thumb {
            background-color: var(--accent-color); 
            border-radius: 10px;
            border: 2px solid var(--primary-bg); 
            transition: background-color 0.6s ease, border-color 0.6s ease;
        }

        /* Message Bubbles */
        .chat-message {
            max-width: 80%;
            line-height: 1.5;
            word-wrap: break-word;
            animation: cosmicRiseIn 0.5s ease-out; /* NEW: Cosmic Rise In */
            position: relative; 
            font-size: 0.95rem; 
            display: flex; /* Make messages a flex container for avatar */
            align-items: flex-start; /* Align items to the top */
        }
        .chat-message.editing {
            border: 2px dashed var(--accent-color);
            opacity: 0.8;
            box-shadow: 0 0 10px rgba(192, 112, 255, 0.5);
        }

        /* NEW: Cosmic Rise In Animation */
        @keyframes cosmicRiseIn {
            from { opacity: 0; transform: translateY(20px) scale(0.95); }
            to { opacity: 1; transform: translateY(0) scale(1); }
        }

        /* NEW: Avatar Styling */
        .chat-avatar {
            width: 40px; /* Avatar size */
            height: 40px;
            border-radius: 50%; /* Circular avatar */
            object-fit: cover;
            flex-shrink: 0; /* Prevent avatar from shrinking */
            margin: 0 10px; /* Space between avatar and bubble */
            border: 2px solid var(--border-color); /* Subtle border */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
            transition: border-color 0.6s ease, box-shadow 0.6s ease;
        }

        /* NEW: Generic Lucide Avatar Icon Styling */
        .lucide-avatar-icon {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--user-avatar-bg); /* Themed background */
            color: var(--accent-color); /* Accent color for the icon */
            flex-shrink: 0;
            margin: 0 10px;
            border: 2px solid var(--border-color);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
            transition: background-color 0.6s ease, color 0.6s ease, border-color 0.6s ease, box-shadow 0.6s ease;
        }
        .lucide-avatar-icon .lucide {
            width: 1.5em; /* Larger icon inside avatar circle */
            height: 1.5em;
            stroke-width: 1.5; /* Make the icon a bit bolder */
        }

        /* NEW: Message Bubble Content Wrapper */
        .message-bubble-content {
            padding: 12px 18px; /* This is where the actual bubble padding goes */
            border-radius: 20px;
            line-height: 1.5;
            word-wrap: break-word;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            flex-grow: 1; /* Allow content to take available space */
            position: relative; /* For actions inside */
            padding-bottom: 2.5rem; /* Ensure space for actions */
            transition: background-color 0.6s ease, color 0.6s ease, background-image 0.6s ease, box-shadow 0.6s ease;
            min-width: 0;
            overflow: auto;
            /* FIX: Ensure minimum height for action buttons */
            min-height: 4.5rem; /* Sufficient height for text + action buttons at the bottom */
        }

        .chat-message.user {
            margin-left: auto; /* Pushes user message to the right */
            flex-direction: row-reverse; /* Avatar on the right for user */
        }
        .chat-message.user .message-bubble-content {
            background-color: var(--user-bubble);
            color: var(--text-color);
            border-bottom-right-radius: 5px; 
            background-image: linear-gradient(to bottom right, var(--user-bubble), color-mix(in srgb, var(--user-bubble) 90%, black 10%)); /* Dynamic darker shade */
        }

        .chat-message.ai {
            margin-right: auto; /* Pushes AI message to the left */
            flex-direction: row; /* Avatar on the left for AI */
        }
        .chat-message.ai .message-bubble-content {
            background-color: var(--ai-bubble);
            color: var(--text-color);
            border-bottom-left-radius: 5px; 
            background-image: linear-gradient(to bottom left, var(--ai-bubble), color-mix(in srgb, var(--ai-bubble) 90%, black 10%)); /* Dynamic darker shade */
        }

        /* Light Mode Adjustments for Avatars */
        body.starlight-lavender .chat-avatar,
        body.starlight-lavender .lucide-avatar-icon {
            border-color: #A0B0C0; /* Lighter border in light mode */
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        /* Markdown Styling within AI messages */
        .chat-message .message-content {
            padding: 0; 
            margin: 0;
        }
        .chat-message.ai .message-content p,
        .chat-message.ai .message-content ul,
        .chat-message.ai .message-content ol,
        .chat-message.ai .message-content h1,
        .chat-message.ai .message-content h2,
        .chat-message.ai .message-content h3,
        .chat-message.ai .message-content blockquote {
            margin-bottom: 1em;
            transition: color 0.6s ease; /* For changing heading colors */
        }
        .chat-message.ai .message-content h1,
        .chat-message.ai .message-content h2,
        .chat-message.ai .message-content h3 {
            color: var(--accent-color); /* Headings use accent color */
        }

        .chat-message.ai .message-content p:last-child,
        .chat-message.ai .message-content ul:last-child,
        .chat-message.ai .message-content ol:last-child,
        .chat-message.ai .message-content blockquote:last-child {
            margin-bottom: 0;
        }
        .chat-message.ai .message-content ul,
        .chat-message.ai .message-content ol {
            padding-left: 1.5em; 
        }
        .chat-message.ai .message-content li {
            margin-bottom: 0.5em;
        }
        .chat-message.ai .message-content strong {
            font-weight: bold;
            color: var(--accent-color); 
            transition: color 0.6s ease;
        }
        .chat-message.ai .message-content em {
            font-style: italic;
        }
        .chat-message.ai .message-content blockquote {
            border-left: 4px solid var(--accent-color); /* Blockquotes use accent color */
            color: var(--text-color); /* Main text color for readability */
            padding-left: 1em;
            margin-left: 0;
            transition: border-color 0.6s ease, color 0.6s ease;
        }

        /* Code block specific styling */
        .code-block-container {
            background-color: var(--code-bg); 
            color: var(--code-text); 
            border-radius: 0.75rem; 
            margin-top: 1rem;
            margin-bottom: 1rem;
            overflow-y: hidden; 
            border: 1px solid var(--code-border); 
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
            transition: background-color 0.6s ease, color 0.6s ease, border-color 0.6s ease;
        }
        .code-block-container pre {
            margin: 0; 
            padding: 1rem;
            overflow-x: auto; 
            font-family: 'Consolas', 'Fira Code', 'Cascadia Code', monospace; 
            font-size: 0.9em;
            line-height: 1.4;
        }
        .code-block-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: var(--code-header-bg); 
            color: var(--text-color); 
            padding: 0.5rem 1rem;
            border-bottom: 1px solid var(--code-header-border);
            font-size: 0.85em;
            border-top-left-radius: 0.75rem;
            border-top-right-radius: 0.75rem;
            transition: background-color 0.6s ease, color 0.6s ease, border-color 0.6s ease;
        }
        .code-block-copy-button {
            background-color: transparent;
            border: none;
            color: var(--text-color); /* Code header text color */
            cursor: pointer;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            transition: background-color 0.2s ease, color 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.25rem;
            font-size: 0.85em;
        }
        .code-block-copy-button:hover {
            background-color: color-mix(in srgb, var(--code-header-bg) 80%, white 20%); /* Lighter hover based on header */
            color: var(--text-color); 
        }
        /* Inline code */
        .chat-message.ai .message-content code:not(pre > code) {
            background-color: var(--inline-code-bg); 
            border-radius: 0.25rem;
            padding: 0.2em 0.4em;
            font-family: 'Consolas', monospace;
            font-size: 0.9em;
            color: var(--inline-code-color); 
            transition: background-color 0.6s ease, color 0.6s ease;
        }
        /* Links */
        .chat-message.ai .message-content a {
            color: var(--accent-color);
            text-decoration: underline;
            transition: color 0.6s ease;
        }
        .chat-message.ai .message-content a:hover {
            color: var(--button-hover-bg); 
        }

        /* Message Action Buttons (Copy/Dictate/Edit/Regenerate) */
        .message-actions {
            position: fixed;
            bottom: 0.5rem;
            right: 1rem;
            display: flex;
            gap: 0.5rem;
            padding: 0.25rem 0.5rem;
            border-radius: 0.75rem;
            backdrop-filter: blur(5px);
            transition: opacity 0.3s ease;
            opacity: 0; 
            z-index: 10;
            background-color: var(--message-action-bg);
        }
        /* Make actions visible when the entire message (including avatar) is hovered */
        .chat-message:hover .message-actions {
            opacity: 1; 
        }
        .message-actions button {
            background: none;
            border: none;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 0.375rem;
            transition: background-color 0.2s ease, color 0.2s ease;
            display: flex; 
            align-items: center;
            justify-content: center;
        }
        .message-actions button .lucide { 
            color: var(--message-action-icon); 
            width: 1rem;
            height: 1rem;
            transition: color 0.6s ease;
        }
        .message-actions button:hover .lucide {
            color: var(--message-action-icon-hover); 
        }
        .message-actions button:hover {
            background-color: rgba(255, 255, 255, 0.1); 
        }
        .chat-message.user .message-actions {
            background-color: var(--message-action-user-bg);
        }
        /* Specific attachment preview styling within messages (not the input area ones) */
        .chat-message-attachment-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 0.75rem;
            border-radius: 1rem;
            background-color: var(--tertiary-bg); 
            color: var(--text-color); 
            font-size: 0.875rem;
            box-shadow: 0 1px 2px rgba(0,0,0,0.2);
            transition: background-color 0.6s ease, color 0.6s ease, box-shadow 0.6s ease;
        }

        /* Input Area - Adjusted for full screen */
        .chat-input {
            padding: 20px;
            border-top: 2px solid var(--border-color);
            display: flex;
            gap: 10px; 
            align-items: end; 
            background-color: var(--tertiary-bg);
            border-bottom-left-radius: 0; /* Adjust for full screen */
            border-bottom-right-radius: 0; /* Adjust for full screen */
            position: relative; 
            transition: background-color 0.6s ease, border-color 0.6s ease;
            flex-shrink: 0; 
        }

        .chat-input textarea {
            flex-grow: 1;
            padding: 10px 15px; 
            border: 1px solid var(--border-color);
            border-radius: 25px;
            background-color: var(--input-bg);
            color: var(--text-color);
            font-family: var(--font-family-primary);
            font-size: 1em;
            resize: none;
            outline: none;
            box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.3);
            transition: border-color 0.3s ease, background-color 0.3s ease, color 0.6s ease;
            min-height: 40px; 
            height: auto; 
            overflow-y: hidden; 
        }

        .chat-input textarea:focus {
            border-color: var(--accent-color);
            background-color: color-mix(in srgb, var(--primary-bg) 90%, var(--tertiary-bg) 10%); 
        }

        /* Action buttons in input area (Send, Mic, Paperclip) */
        .chat-input .icon-button { 
            background-color: var(--tertiary-bg); 
            color: var(--text-color);
            border: none;
            border-radius: 50%; 
            width: 48px; 
            height: 48px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease, color 0.6s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2); 
            display: flex; 
            align-items: center;
            justify-content: center;
            flex-shrink: 0; 
        }

        .chat-input .icon-button:hover {
            background-color: var(--secondary-bg); 
            transform: translateY(-1px);
        }
        .chat-input .icon-button:active {
            transform: translateY(0);
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        }
        .chat-input .icon-button .lucide {
            width: 1.25em; 
            height: 1.25em;
        }

        #sendButton {
            background-color: var(--accent-color); 
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3); 
            transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease, opacity 0.3s ease, cursor 0.3s ease;
        }
        #sendButton:hover {
            background-color: var(--button-hover-bg);
            transform: translateY(-2px);
        }
        #sendButton:active {
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        }
        /* NEW: Disabled state for the sendButton */
        #sendButton:disabled {
            background-color: var(--tertiary-bg); /* Match other icon buttons or a neutral color */
            cursor: not-allowed;
            opacity: 0.6; /* Indicate disabled state */
            box-shadow: none;
            transform: none;
        }
        #sendButton:disabled .lucide {
            color: var(--border-color); /* Faded icon color */
        }

        /* Loading Indicator - NEW: Cosmic Loader */
        .loader-container {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            height: 100%;
        }
        .loader-dot {
            width: 15px; /* Slightly larger */
            height: 15px;
            margin: 0 6px; /* More space */
            background-color: var(--accent-color);
            box-shadow: 0 0 10px var(--accent-color), 0 0 20px rgba(192, 112, 255, 0.5); /* Glow effect */
            border-radius: 50%;
            display: inline-block;
            animation: cosmicBounce 1.8s infinite ease-in-out both; /* Slower, more ethereal bounce */
            transition: background-color 0.6s ease, box-shadow 0.6s ease;
        }
        .loader-dot:nth-child(1) { animation-delay: -0.6s; }
        .loader-dot:nth-child(2) { animation-delay: -0.3s; }
        .loader-dot:nth-child(3) { animation-delay: 0s; }
        
        @keyframes cosmicBounce {
            0%, 100% {
                transform: translateY(0) scale(1);
                opacity: 0.8;
            }
            50% {
                transform: translateY(-10px) scale(1.2); /* Float up and enlarge slightly */
                opacity: 1;
                background-color: var(--cosmic-glow-color-1); /* Change color at peak */
            }
        }
        /* Voice input active state */
        .voice-input-active {
            background-color: var(--accent-error) !important; 
            animation: pulse-red 1s infinite cubic-bezier(0.4, 0, 0.6, 1);
        }
        @keyframes pulse-red {
            0%, 100% { box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7); }
            50% { box-shadow: 0 0 0 10px rgba(239, 68, 68, 0); }
        }

        /* Attachment Preview (in input area) */
        .chat-image {
            max-width: 100%;
            height: auto;
            border-radius: 0.75rem;
            margin-top: 0.5rem;
            display: block;
        }
        #chat-attachments-preview-container {
            background-color: var(--tertiary-bg);
            border-radius: 10px;
            padding: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
            border: 1px solid var(--border-color);
            transition: background-color 0.6s ease, border-color 0.6s ease, box-shadow 0.6s ease;
        }
        .chat-attachment-preview-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 0.75rem;
            border-radius: 1rem;
            background-color: var(--secondary-bg); /* Use secondary for inner items */
            color: var(--text-color); 
            font-size: 0.875rem;
            box-shadow: 0 1px 2px rgba(0,0,0,0.2);
            transition: background-color 0.6s ease, color 0.6s ease, box-shadow 0.6s ease;
        }
        .chat-attachment-preview-item .remove-attachment-btn {
            background: none;
            border: none;
            color: var(--accent-color); 
            cursor: pointer;
            padding: 0.1rem;
            border-radius: 50%;
            transition: background-color 0.2s ease, color 0.6s ease;
        }
        .chat-attachment-preview-item .remove-attachment-btn:hover {
            background-color: rgba(192, 112, 255, 0.2);
        }

        /* Drag and Drop visual feedback for chat window */
        .chatbot-container.drag-over-active {
            border: 2px dashed var(--accent-color);
            box-shadow: 0 0 20px var(--accent-color), 0 0 30px var(--accent-color) inset;
            transition: border-color 0.6s ease, box-shadow 0.6s ease;
        }

        /* Copy Message Toast */
        #copy-message {
            position: fixed;
            bottom: 3rem; 
            left: 50%;
            transform: translateX(-50%);
            padding: 0.75rem 1.5rem;
            background-color: var(--accent-success);
            color: white;
            border-radius: 9999px;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            opacity: 0;
            visibility: hidden;
            transition: all 0.5s ease-in-out;
            z-index: 100;
        }

        #copy-message.show {
            opacity: 1;
            visibility: visible;
        }

        /* Autocomplete Suggestions */
        #suggestions-container {
            position: absolute;
            bottom: 100%; /* Position above the input field */
            left: 0;
            right: 0;
            margin-bottom: 10px; /* Space between input and suggestions */
            background-color: var(--autocomplete-bg);
            border: 1px solid var(--autocomplete-border);
            border-radius: 10-px;
            box-shadow: 0 -5px 15px rgba(0,0,0,0.2);
            max-height: 200px;
            overflow-y: auto;
            z-index: 20; /* Ensure it's above other input elements */
            transition: background-color 0.6s ease, border-color 0.6s ease, box-shadow 0.6s ease;
        }
        #suggestions-container ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        #suggestions-container li {
            padding: 10px 15px;
            cursor: pointer;
            color: var(--autocomplete-text);
            transition: background-color 0.2s ease, color 0.6s ease;
        }
        #suggestions-container li:hover,
        #suggestions-container li.selected {
            background-color: var(--autocomplete-hover-bg);
        }
        #suggestions-container li.selected {
            background-color: var(--autocomplete-selected-bg);
            color: var(--autocomplete-selected-text);
        }


        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .chatbot-container {
                width: 100vw; 
                height: 100vh; 
                border-radius: 0;
                margin: 0;
            }

            /* Mobile Sidebar */
            .chat-sidebar {
                position: fixed; /* Fixed position for mobile sidebar */
                top: 0;
                left: 0;
                bottom: 0;
                width: min(80vw, 320px); /* Adjust width for mobile, max 320px or 80vw */
                transform: translateX(-100%); /* Hidden by default */
                transition: transform 0.3s ease-in-out;
                box-shadow: none; /* No shadow by default */
                padding: 15px;
                background-color: var(--tertiary-bg); /* Ensure background is set for overlay */
            }
            .chat-sidebar.active-mobile-sidebar {
                transform: translateX(0); /* Show on active */
                box-shadow: 2px 0 10px rgba(0,0,0,0.3); /* Add shadow when open */
            }

            .chat-main-content {
                width: 100%; /* Main content always full width on mobile */
            }

            /* Mobile Header Adjustments */
            .chatbot-header {
                padding: 10px; 
                padding-left: 50px; /* Make space for hamburger */
                justify-content: center; /* Center content when hamburger is present */
            }
            .chatbot-header h1 {
                font-size: 1.5em;
                margin-top: 0; /* Remove top margin */
            }
            .chatbot-header .logo {
                height: 1.6em;
            }
            .chatbot-header .tagline {
                font-size: 0.7em;
                margin-bottom: 0;
            }

            /* Mobile specific toggle button (hamburger in main header) */
            #mobileToggleSidebarBtn {
                display: flex; /* Show on mobile */
            }
            /* Toggle button inside sidebar (X icon) */
            #toggleSidebarBtn {
                display: flex; /* Always show inside sidebar header on mobile */
            }


            /* Mobile adjustments for settings container */
            /*.settings-toggles-container {
                top: 8px; /* Closer to top */
                /*right: 8px; /* Closer to right */
                /*gap: 4px; /* Even less space */
            /*}*/
            
            .theme-selector-container label, .response-mode-container span {
                font-size: 0.7em;
            }
            .theme-selector-container select {
                font-size: 0.7em;
                padding: 3px 6px;
                padding-right: 24px;
                background-position: right 6px center;
                background-size: 16px;
            }

            .switch {
                width: 36px;
                height: 20px;
                border-radius: 10px;
            }
            .switch .slider {
                border-radius: 10px;
            }
            .switch .slider:before {
                height: 14px;
                width: 14px;
                left: 3px;
                bottom: 3px;
            }
            input:checked + .slider:before {
                transform: translateX(16px);
            }

            /* Sidebar New Chat Button (smaller for mobile sidebar) */
            #newChatBtn {
                padding: 5px 9px;
                font-size: 0.65em;
                gap: 3px;
            }
            #newChatBtn .lucide {
                width: 0.6em;
                height: 0.6em;
            }


            /* Chat Message Mobile Adjustments */
            .chat-history {
                padding: 10px;
                gap: 8px;
            }

            .chat-message {
                max-width: 95%; /* Wider bubbles for smaller screens */
            }
            .chat-avatar, .lucide-avatar-icon {
                width: 32px;
                height: 32px;
                margin: 0 6px;
            }
            .lucide-avatar-icon .lucide {
                width: 1.2em;
                height: 1.2em;
            }
            .message-bubble-content {
                padding: 10px 14px;
                padding-bottom: 2rem;
                border-radius: 16px;
                font-size: 0.9rem; /* Slightly larger for readability */
                min-height: 4rem; /* Adjusted for mobile */
            }

            .message-actions {
                bottom: 0.3rem; 
                right: 0.6rem;
                gap: 0.3rem;
                padding: 0.15rem 0.3rem;
                border-radius: 0.5rem;
            }
            .message-actions button {
                padding: 0.1rem;
            }
            .message-actions button .lucide {
                width: 0.8rem;
                height: 0.8rem;
            }

            .chat-input {
                padding: 10px;
                gap: 6px;
                align-items: center;
                border-bottom-left-radius: 0;
                border-bottom-right-radius: 0;
                flex-wrap: wrap;
            }

            .chat-input textarea {
                padding: 8px 12px; 
                font-size: 0.9em;
                min-height: 38px;
                max-height: 120px;
            }

            .chat-input .icon-button {
                width: 42px;
                height: 42px;
            }
            .chat-input .icon-button .lucide {
                width: 1em;
                height: 1em;
            }

            #chat-attachments-preview-container {
                padding: 6px;
                margin-bottom: 8px;
            }
            .chat-attachment-preview-item {
                font-size: 0.75em;
                padding: 0.3rem 0.5rem;
                border-radius: 0.75rem;
            }
            .chat-attachment-preview-item .remove-attachment-btn .lucide {
                width: 0.7rem;
                height: 0.7rem;
            }

            #copy-message {
                bottom: 1.5rem;
                padding: 0.5rem 1rem;
                font-size: 0.85rem;
            }

            #suggestions-container {
                margin-bottom: 8px;
            }
            #suggestions-container li {
                padding: 8px 12px;
                font-size: 0.85em;
            }
        }

        /* Desktop specific styles (min-width: 769px) */
        @media (min-width: 769px) {
            #mobileToggleSidebarBtn {
                display: none; /* Hide hamburger on desktop */
            }
            #toggleSidebarBtn {
                display: none; /* Hide 'X' button on desktop (only needed for mobile sidebar close) */
            }
        }
    </style>
</head>
<body class="antialiased cosmic-purple">
    <div class="chatbot-container">
        <!-- Sidebar for previous chats -->
        <aside class="chat-sidebar" id="chatSidebar">
            <div class="sidebar-header">
                <button id="newChatBtn" title="Start a New Chat">
                    <span data-lucide="sparkles" class="w-4 h-4"></span>
                    New Chat
                </button>
                <h3 class="font-semibold text-lg">App Settings</h3>
                <!-- Button to toggle sidebar visibility on mobile/smaller screens -->
                <button id="toggleSidebarBtn" title="Close Sidebar">
                    <span data-lucide="x" class="w-5 h-5"></span>
                </button>
            </div>

            <!-- AI Model Selector -->
            <div class="sidebar-section">
                <h4 class="font-semibold text-accent-color mb-2">AI Model</h4>
                <select id="model-select" class="w-full">
                    <!-- Ensure these match actual Gemini API model names and are valid for your key -->
                    <option value="gemini-1.5-flash-latest">Gemini 1.5 Flash (Latest)</option>
                    <option value="gemini-1.5-pro-latest">Gemini 1.5 Pro (Latest)</option>
                    <option value="gemini-2.5-flash-preview-05-20">Gemini 2.5 Flash (Preview 05-20)</option>
                    <option value="gemini-2.5-flash">Gemini 2.5 Flash</option>
                    <option value="gemini-2.5-pro">Gemini 2.5 Pro</option>
                    <option value="gemini-2.5-flash-lite">Gemini 2.5 Flash Lite</option>
                    <option value="gemini-2.5-flash-lite-06-17">Gemini 2.5 Flash Lite (06-17)</option>
                    <option value="gemini-2.0-flash-preview-image-generation">Gemini 2.0 Flash (Image Gen Preview)</option>
                    <option value="gemini-2.0-flash">Gemini 2.0 Flash</option>
                    <option value="gemini-2.0-flash-001">Gemini 2.0 Flash (001)</option>
                    <option value="gemini-2.0-flash-exp">Gemini 2.0 Flash (Experimental)</option>
                </select>
            </div>

            <!-- System Prompt / Persona Customization -->
            <div class="sidebar-section">
                <h4 class="font-semibold text-accent-color mb-2">AI Persona (System Prompt)</h4>
                <select id="systemPromptSelect" class="w-full">
                    <option value="">None (Default)</option>
                    <option value="You are a helpful coding assistant who explains concepts in detail.">Coding Assistant</option>
                    <option value="You are a sarcastic but insightful philosopher.">Sarcastic Philosopher</option>
                    <option value="You are a whimsical storyteller for children.">Whimsical Storyteller</option>
                    <option value="You are a strict grammar checker.">Strict Grammar Checker</option>
                    <option value="You are a supportive life coach.">Supportive Life Coach</option>
                    <option value="You are a knowledgeable historian.">Knowledgeable Historian</option>
                    <option value="You are a curious explorer of the cosmos.">Cosmic Explorer</option>
                    <option value="You are an ancient oracle speaking in riddles.">Ancient Oracle</option>
                    <option value="You are a cheerful wellness guide.">Cheerful Wellness Guide</option>
                    <option value="You are a fantasy role-playing game dungeon master.">RPG Dungeon Master</option>
                    <option value="You are a creative chef providing unique recipes and cooking tips.">Creative Chef</option>
                    <option value="You are a personal fitness trainer offering workout plans and motivation.">Personal Fitness Trainer</option>
                    <option value="You are an expert travel guide providing detailed itineraries and cultural insights.">Expert Travel Guide</option>
                    <option value="You are a botanical expert, identifying plants and offering gardening advice.">Botanical Expert</option>
                    <option value="You are a cybersecurity analyst explaining online threats and safety.">Cybersecurity Analyst</option>
                    <option value="You are a witty stand-up comedian.">Witty Comedian</option>
                    <option value="You are a precise technical writer, explaining complex topics clearly.">Precise Technical Writer</option>
                    <option value="You are a compassionate therapist, providing understanding and coping strategies.">Compassionate Therapist</option>
                    <option value="You are a financial advisor, offering practical advice on money management.">Financial Advisor</option>
                    <option value="You are a literary critic, analyzing texts and discussing themes.">Literary Critic</option>
                    <option value="You are a legal aid assistant providing general information (but not legal advice).">Legal Aid Assistant</option>
                    <option value="You are a dream interpreter.">Dream Interpreter</option>
                    <option value="You are a professional negotiator.">Professional Negotiator</option>
                    <option value="You are a minimalist living coach.">Minimalist Coach</option>
                    <option value="You are an ethical hacker explaining common vulnerabilities.">Ethical Hacker</option>
                    <option value="You are a dedicated researcher citing sources where possible.">Dedicated Researcher</option>
                </select>
                <button id="clearSystemPromptBtn" class="text-red-400 mt-2">Clear Persona</button>
            </div>

            <!-- Export Current Chat Section -->
            <div class="sidebar-section">
                <h4 class="font-semibold text-accent-color mb-2">Export Current Chat</h4>
                <div class="flex flex-col gap-2">
                    <button id="exportTxtBtn">
                        <span data-lucide="file-text" class="w-4 h-4"></span> Export as TXT
                    </button>
                    <button id="exportPdfBtn">
                        <span data-lucide="file-text" class="w-4 h-4"></span> Export as PDF
                    </button>
                    <!-- Changed from exportDocBtn to exportMdBtn -->
                    <button id="exportMdBtn">
                        <span data-lucide="file-code" class="w-4 h-4"></span> Export as MD
                    </button>
                </div>
            </div>

            <!-- Clear Current Chat Button -->
            <div class="sidebar-section">
                <h4 class="font-semibold text-accent-color mb-2">Current Session Actions</h4>
                <button id="clearChatBtn" class="w-full bg-accent-error text-white py-2 px-4 rounded-md font-semibold hover:bg-red-600 transition-colors flex items-center justify-center gap-2">
                    <span data-lucide="delete" class="w-4 h-4"></span>
                    Clear Current Chat
                </button>
            </div>
            
            <!-- NEW: Settings Toggles Container -->
            <div class="settings-toggles-container">
                <!-- NEW: Theme Selector -->
                <div class="theme-selector-container">
                    <label for="theme-select" class="font-primary text-sm">Theme:</label>
                    <select id="theme-select" class="p-1 rounded-md text-xs">
                        <option value="cosmic-purple">Cosmic Purple</option>
                        <option value="starlight-lavender">Starlight Lavender</option>
                        <option value="emerald-galaxy">Emerald Galaxy</option>
                        <option value="crimson-nebula">Crimson Nebula</option>
                        <option value="golden-aurora">Golden Aurora</option>
                        <option value="cosmic-gold">Cosmic Gold</option>
                        <option value="neon-glitch">Neon Glitch</option>
                        <option value="ancient-papyrus">Ancient Papyrus</option>
                    </select>
                </div>

                <!-- Keep the Simulate Typing Toggle -->
                <div class="response-mode-container">
                    <span>Instant</span>
                    <label class="switch">
                        <input type="checkbox" id="simulate-typing-toggle" checked>
                        <span class="slider"></span>
                    </label>
                    <span>Simulate Typing</span>
                </div>
            </div>
        </aside>

        <!-- Main Chat Content -->
        <main class="chat-main-content">
            <header class="chatbot-header">
                <!-- Hamburger/Sidebar toggle for mobile. -->
                <button id="mobileToggleSidebarBtn" title="Open Sidebar">
                    <span data-lucide="menu" class="w-5 h-5"></span>
                </button>

                <div class="header-content">
                    <h1>
                        <img src="logo.png" alt="Mystic Vision AI Logo" class="logo">
                        Mystic Vision AI
                    </h1>
                    <p class="tagline">Experience the beyond</p>
                </div>
            </header>
            <div class="chat-history" id="chatHistory">
                <!-- Initial AI message will be added by JS -->
            </div>
            <div class="chat-input" id="chatInputArea">
                <!-- Autocomplete Suggestions Container -->
                <div id="suggestions-container" class="hidden">
                    <ul id="suggestions-list"></ul>
                </div>

                <!-- Attachment preview -->
                <div id="chat-attachments-preview-container" class="mb-2 flex flex-wrap items-center gap-2 hidden absolute left-4 right-4" style="bottom: 100%; transform: translateY(-10px);">
                    <!-- Attachments previews will be dynamically added here -->
                </div>

                <!-- Voice Input Button -->
                <button id="voice-input-btn" class="icon-button" aria-label="Voice Input">
                    <span data-lucide="mic" class="w-5 h-5"></span>
                </button>

                <!-- Attach File Button (uses a label to link to the hidden file input) -->
                <label for="chat-image-upload" id="attach-file-btn" class="icon-button cursor-pointer" aria-label="Attach File">
                    <span data-lucide="paperclip" class="w-5 h-5"></span>
                </label>
                <input type="file" id="chat-image-upload" accept="image/*, .txt, .pdf, .csv, .json, .xml, .md" class="hidden" multiple>

                <textarea id="userInput" placeholder="Type your message..." rows="1"></textarea>
                
                <!-- Send/Stop Button (Combined) -->
                <button id="sendButton" class="icon-button">
                    <span data-lucide="send" class="w-5 h-5"></span>
                </button>
            </div>
        </main>
    </div>

    <!-- Temporary message for clipboard copy -->
    <div id="copy-message">Text copied to clipboard!</div>

    <!-- Prism.js components for common languages -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-css.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-markup.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-sql.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-json.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-bash.min.js"></script>
    <!-- Add more Prism.js language components as needed -->

    <script>
        // !! IMPORTANT: REPLACE WITH YOUR ACTUAL GEMINI API KEY !!
        // !! DO NOT USE THIS METHOD IN PRODUCTION. USE A SERVER-SIDE PROXY. !!
        // The key below is a placeholder and WILL NOT WORK.
        const GEMINI_API_KEY = 'AIzaSyCzx6ReMk8ohPJcCjGwHHzu7SvFccJqAbA'; // <--- REPLACE THIS WITH YOUR ACTUAL KEY

        // --- Global State Variables and Constants ---
        let conversationHistory = []; // Current chat's history (roles & parts)
        const CURRENT_CHAT_STORAGE_KEY = 'mv-current-session-chat'; // Fixed key for the single active chat
        
        let chatAttachments = []; 
        const messageTextCache = new Map(); // Stores raw text for copy/dictate before Markdown parsing
        let currentUtterance = null;
        let isSpeaking = false;
        let currentTypingInterval = null; // For simulated typing animation
        let isGeneratingResponse = false; // To control send/stop buttons
        
        let SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        let recognition = null;
        let isVoiceInputActive = false;
        let finalTranscript = ''; 
        let selectedSuggestionIndex = -1;

        // NEW: Simulate Typing Mode state
        let isSimulateTypingEnabled = true; // Default to simulate typing

        // NEW: AI Model and System Prompt State
        let currentModel = localStorage.getItem('selected-gemini-model') || 'gemini-2.5-flash-preview-05-20'; // Default model
        // Changed from systemPrompt to systemInstruction for clarity and direct API mapping
        let systemInstruction = localStorage.getItem('system-instruction') || ''; // Stores user-defined system instruction

        const initialAIMessage = {
            role: 'model',
            parts: [{ text: 'Greetings, seeker! I am Mystic Vision, an AI designed to help you glimpse the beyond. What wisdom do you seek?' }],
        };

        // Avatars
        const USER_AVATAR_ICON = 'user'; 
        const AI_AVATAR_URL = 'logo.png'; 

        const autocompleteSuggestions = [
            // Your extensive list of autocomplete suggestions
            "What is the capital of France?",
            "Explain quantum physics simply.",
            "How does a combustion engine work?",
            "Summarize the plot of Hamlet.",
            "What are the benefits of exercise?",
            "Calculate the square root of 144.",
            "Convert 50 miles to kilometers.",
            "Define artificial intelligence.",
            "What is blockchain technology?",
            "Explain the internet.",
            "Tell me about renewable energy.",
            "What are the phases of the moon?",
            "How do volcanoes erupt?",
            "What causes tides?",
            "What is the speed of light?",
            "How does photosynthesis work?",
            "What are the main types of clouds?",
            "Explain the concept of infinity.",
            "What is the difference between AI and machine learning?",
            "How does GPS work?",

            // Creative Writing/Ideas
            "Write a short story about a talking animal.",
            "Compose a poem about the ocean.",
            "Give me five ideas for a fantasy novel.",
            "Write a dialogue between a robot and a human.",
            "Generate a catchy slogan for a coffee shop.",
            "Describe a futuristic city.",
            "Create a character profile for a wizard.",
            "Write a fairy tale with a modern twist.",
            "Brainstorm names for a new tech startup.",
            "Suggest topics for a blog about travel.",
            "Write an exciting opening paragraph for an horrific adventure story.",
            "Compose a haiku about autumn.",
            "Develop a plot for a sci-fi film.",
            "Write a humorous obituary.",
            "Describe a unique alien species.",

            // Programming/Tech Help
            "How to write a 'Hello, World!' program in Python?",
            "Explain asynchronous JavaScript.",
            "What is the best framework for web development?",
            "How to debug a Java application?",
            "Write a SQL query to select all users.",
            "Explain REST APIs.",
            "What is version control?",
            "How do I install Node.js?",
            "Explain recursion in programming.",
            "What are data structures?",
            "How to optimize a website for speed?",
            "Explain object-oriented programming.",
            "Write a simple HTML structure.",
            "What is cloud computing?",
            "How to secure a web application?",

            // Education/Learning
            "How to study effectively for exams?",
            "Tips for learning a new language.",
            "What are good resources for learning history?",
            "How to improve my public speaking skills?",
            "Suggest a good book for beginners in astrophysics.",
            "What are the benefits of lifelong learning?",
            "How to choose a university major?",
            "Explain critical thinking.",
            "What is metacognition?",
            "How to set SMART goals?",

            // Health/Wellness
            "What are the benefits of a balanced diet?",
            "Suggest a simple home workout routine.",
            "How to reduce stress naturally?",
            "What are common symptoms of flu?",
            "Explain the importance of sleep.",
            "Tips for maintaining mental health.",
            "What foods boost immunity?",
            "How to stay hydrated?",
            "What is mindfulness meditation?",
            "How to improve posture?",

            // Food/Cooking
            "Suggest a quick and healthy dinner recipe.",
            "How to bake a perfect chocolate chip cookie?",
            "What are common cooking herbs?",
            "Explain sous-vide cooking.",
            "Recipe for a vegan lasagna.",
            "How to make sourdough bread?",
            "Best way to store fresh produce.",

            // Travel/Culture
            "What are the top 5 tourist attractions in Rome?",
            "Suggest a budget-friendly travel destination.",
            "How to pack efficiently for a trip?",
            "Tell me about Japanese culture.",
            "What are some famous landmarks in India?",
            "Tips for solo travel.",
            "Explain local customs in Thailand.",

            // Self-Improvement/Productivity
            "How to build good habits?",
            "Tips for time management.",
            "How to overcome procrastination?",
            "Suggest ways to boost creativity.",
            "How to practice active listening?",
            "What are methods for conflict resolution?",
            "How to give constructive feedback?",

            // Environment/Sustainability
            "What is climate change?",
            "How to reduce my carbon footprint?",
            "Explain recycling processes.",
            "What is sustainable living?",
            "Tips for conserving water at home.",

            // Philosophical/Existential (keeping some of the original theme)
            "What is the meaning of life?",
            "How can I find inner peace?",
            "What is intuition?",
            "Explain the concept of enlightenment.",
            "What is the purpose of suffering?",
            "How can I connect with my higher self?",
            "What does synchronicity mean?",
            "Tell me about the law of attraction.",
            "How to cultivate compassion?",
            "What is the significance of dreams?",

            // And more... (Extensive additions)
            "Tell me a fun fact.",
            "What's the origin of the phrase 'break a leg'?",
            "Who invented the telephone?",
            "Explain the stock market.",
            "How to manage personal finances?",
            "What are common cybersecurity threats?",
            "Explain the concept of net neutrality.",
            "What is artificial general intelligence?",
            "How does facial recognition work?",
            "Tell me about virtual reality.",
            "What is augmented reality?",
            "Explain ethical AI.",
            "How to start a podcast?",
            "Tips for public speaking.",
            "What is imposter syndrome?",
            "How to build resilience?",
            "Explain the gig economy.",
            "What is CRISPR technology?",
            "How to make compost?",
            "What are the benefits of gardening?",
            "Tell me about Roman history.",
            "Explain the Cold War.",
            "What were the causes of World War II?",
            "Tell me about ancient Egypt.",
            "What is democracy?",
            "Explain socialism.",
            "What are human rights?",
            "How does voting work?",
            "What is diplomacy?",
            "Tell me about different types of governments.",
            "How does inflation affect the economy?",
            "What is GDP?",
            "Explain interest rates.",
            "What is a recession?",
            "How to save for retirement?",
            "What is compound interest?",
            "Tell me about different investment strategies.",
            "How to create a budget?",
            "What is credit score?",
            "Explain mortgages.",
            "What is insurance?",
            "How to write a resume?",
            "Tips for a job interview.",
            "How to negotiate salary?",
            "What are common career paths in tech?",
            "Explain emotional intelligence.",
            "How to build strong relationships?",
            "Tips for effective communication.",
            "How to handle difficult conversations?",
            "What is empathy?",
            "How to resolve conflict in relationships?",
            "Tell me about different personality types.",
            "What is positive psychology?",
            "How to practice self-care?",
            "What are common symptoms of flu?",
            "How to improve focus and concentration?",
            "What is the Pomodoro Technique?",
            "Explain the Eisenhower Matrix.",
            "How to prioritize tasks?",
            "Tips for remote work productivity.",
            "What is digital minimalism?",
            "How to manage screen time?",
            "What are the benefits of digital detox?",
            "Explain the concept of 'flow state'.",
            "How to overcome creative blocks?",
            "What are different learning styles?",
            "Tips for active reading.",
            "How to write an essay?",
            "Explain plagiarism.",
            "What is citation?",
            "How to do research effectively?",
            "What are open educational resources?",
            "Explain the peer review process.",
            "What is gamification in education?",
            "How to teach children about money?",
            "Tips for teaching a new skill.",
            "What is the Socratic method?",
            "Explain experiential learning.",
            "How to foster curiosity?",
            "What is problem-based learning?",
            "Tell me about different teaching philosophies.",
            "How to create engaging presentations?",
            "What are Bloom's Taxonomy levels?",
            "Explain formative assessment.",
            "What is summative assessment?",
            "How to provide effective feedback to students?",
            "Tips for classroom management.",
            "What is differentiated instruction?",
            "How to support students with learning disabilities?",
            "Explain inclusive education.",
            "What is homeschooling?",
            "How to choose the right school?",
            "What are extracurricular activities?",
            "Explain project-based learning.",
            "What is inquiry-based learning?",
            "How to promote critical thinking in students?",
            "What are the benefits of collaborative learning?",
            "How to use technology effectively in education?",
            "Explain blended learning.",
            "What is flipped classroom?",
            "How to assess student performance fairly?",
            "Tips for parent-teacher communication.",
            "What is social-emotional learning?",
            "How to build self-esteem in children?",
            "Explain the growth mindset.",
            "How to encourage creativity in children?",
            "What are different parenting styles?",
            "Tips for dealing with teenage rebellion.",
            "How to foster independence in children?",
            "What is positive reinforcement?",
            "Explain attachment theory.",
            "How to handle sibling rivalry?",
            "Tips for raising resilient children.",
            "What is childhood development?",
            "How to support children's emotional well-being?",
            "Explain the concept of play-based learning.",
            "What are the benefits of outdoor play?",
            "How to choose age-appropriate toys?",
            "What is early childhood education?",
            "Tips for preparing children for kindergarten.",
            "How to teach children to read?",
            "Explain phonics.",
            "What is whole language approach?",
            "How to help children with math?",
            "Tips for science experiments at home.",
            "How to introduce art to children?",
            "What is music education for kids?",
            "How to teach children about nature?",
            "Explain environmental education for kids.",
            "What are the benefits of storytelling for children?",
            "How to encourage imagination in children?",
            "Tips for screen time limits for kids.",
            "What are healthy eating habits for children?",
            "How to deal with picky eaters?",
            "Explain food allergies in children.",
            "How to encourage physical activity in children?",
            "What are developmental milestones?",
            "Tips for potty training.",
            "How to handle temper tantrums?",
            "What is positive discipline?",
            "Explain logical consequences.",
            "How to teach empathy to children?",
            "Tips for teaching generosity.",
            "How to foster gratitude in children?",
            "What is emotional regulation for kids?",
            "How to help children cope with big emotions?",
            "Explain resilience in children.",
            "What are coping mechanisms for kids?",
            "How to build a child's confidence?",
            "Tips for managing sibling relationships.",
            "How to prepare for a new baby?",
            "What is postpartum depression?",
            "How to support a partner after childbirth?",
            "Tips for new parents.",
            "What are common newborn challenges?",
            "How to breastfeed successfully?",
            "Explain bottle feeding.",
            "What is safe sleep for infants?",
            "How to manage infant crying?",
            "Tips for baby soothing techniques.",
            "What is colic?",
            "How to introduce solid foods to babies?",
            "Explain baby-led weaning.",
            "What are common baby illnesses?",
            "How to take a baby's temperature?",
            "Tips for infant first aid.",
            "What is toddler development?",
            "How to handle toddler tantrums?",
            "Explain the 'terrible twos'.",
            "How to encourage speech development in toddlers?",
            "Tips for toilet training toddlers.",
            "What are good toddler activities?",
            "How to promote social skills in toddlers?",
            "Explain parallel play.",
            "What is imaginative play?",
            "How to manage bedtime routines for toddlers?",
            "Tips for dealing with toddler sleep regressions.",
            "What are common toddler fears?",
            "How to ease separation anxiety in toddlers?",
            "Explain positive parenting.",
            "What is gentle parenting?",
            "How to set boundaries with toddlers?",
            "Tips for dealing with toddler biting or hitting.",
            "What is preschool development?",
            "How to prepare a child for preschool?",
            "Explain social skills for preschoolers.",
            "What are good preschool activities?",
            "How to teach preschoolers letters and numbers?",
            "Tips for improving fine motor skills in preschoolers.",
            "What is gross motor skills?",
            "How to encourage independent play in preschoolers?",
            "Explain cooperative play.",
            "What is dramatic play?",
            "How to foster problem-solving skills in preschoolers?",
            "Tips for managing preschooler behavior challenges.",
            "What is kindergarten readiness?",
            "How to support children's transition to school?",
            "Explain school-age development.",
            "What are academic skills for school-age children?",
            "How to help with homework?",
            "Tips for building good study habits.",
            "What are common learning challenges in school-age children?",
            "How to support children with ADHD?",
            "Explain dyslexia.",
            "What are autism spectrum disorders?",
            "How to encourage reading in school-age children?",
            "Tips for developing writing skills.",
            "How to make math fun?",
            "What are benefits of extracurricular activities for school-age children?",
            "How to deal with bullying?",
            "Explain peer pressure.",
            "What is healthy self-esteem in school-age children?",
            "How to teach responsibility to school-age children?",
            "Tips for managing screen time for school-age children?",
            "What is adolescent development?",
            "How to communicate with teenagers?",
            "Explain puberty.",
            "What are common teenage challenges?",
            "How to support teenagers' mental health?",
            "Tips for discussing difficult topics with teenagers.",
            "What is identity formation in adolescence?",
            "How to navigate peer relationships in adolescence?",
            "Explain romantic relationships in adolescence.",
            "What are common teenage stressors?",
            "How to build resilience in teenagers?",
            "Tips for college application process.",
            "What is career exploration for teenagers?",
            "How to teach financial literacy to teenagers?",
            "Explain civic engagement for teenagers.",
            "What are global issues teenagers should know?",
            "How to encourage critical thinking in teenagers?",
            "Tips for managing stress as a teenager.",
            "What are healthy coping mechanisms for teenagers?",
            "How to promote self-advocacy in teenagers?",
            "Explain the concept of consent to teenagers.",
            "What is responsible social media use for teenagers?",
            "How to address cyberbullying?",
            "Tips for safe online interactions for teenagers.",
            "What are warning signs of substance abuse in teenagers?",
            "How to talk to teenagers about sex education?",
            "Explain reproductive health for teenagers.",
            "What are sexually transmitted infections (STIs)?",
            "How to teach healthy relationships to teenagers?",
            "Tips for managing emotions in adolescence.",
            "What is emotional regulation in teenagers?",
            "How to help teenagers develop empathy?",
            "Explain moral development in adolescence.",
            "What is character education for teenagers?",
            "How to encourage volunteering in teenagers?",
            "Tips for building leadership skills in teenagers.",
            "What is entrepreneurship for teenagers?",
            "How to foster innovation in teenagers?",
            "Explain design thinking for teenagers.",
            "What are future job skills?",
            "How to prepare teenagers for the future of work?",
            "Tips for developing a growth mindset in teenagers.",
            "What is neuroplasticity?",
            "How to improve memory?",
            "Explain cognitive biases.",
            "What is decision-making theory?",
            "How to improve problem-solving skills?",
            "Tips for creative thinking techniques.",
            "What is lateral thinking?",
            "How to brainstorm effectively?",
            "Explain mind mapping.",
            "What are logical fallacies?",
            "How to analyze arguments?",
            "Tips for persuasive writing.",
            "What is rhetoric?",
            "How to give a compelling presentation?",
            "Explain nonverbal communication.",
            "What is body language?",
            "How to read facial expressions?",
            "Tips for improving listening skills.",
            "What is active listening?",
            "How to build rapport?",
            "Explain emotional intelligence in leadership.",
            "What is servant leadership?",
            "How to motivate a team?",
            "Tips for conflict resolution in the workplace.",
            "What is negotiation strategy?",
            "How to conduct effective meetings?",
            "Explain project management methodologies.",
            "What is Agile development?",
            "How to manage risk in projects?",
            "Tips for effective delegation.",
            "What is time blocking?",
            "How to use productivity tools?",
            "Explain the 'Getting Things Done' (GTD) method.",
            "What is the 80/20 rule?",
            "How to overcome perfectionism?",
            "Tips for dealing with stress at work.",
            "What is work-life balance?",
            "How to prevent burnout?",
            "Explain mindfulness at work.",
            "What is imposter syndrome in the workplace?",
            "How to build a professional network?",
            "Tips for career advancement.",
            "What is personal branding?",
            "How to write a professional email?",
            "Explain business ethics.",
            "What is corporate social responsibility?",
            "How to build a diverse and inclusive workplace?",
            "Tips for managing remote teams.",
            "What is cybersecurity best practices?",
            "How to protect personal data online?",
            "Explain phishing scams.",
            "What is ransomware?",
            "How to create strong passwords?",
            "Tips for secure browsing.",
            "What is two-factor authentication?",
            "How to use a VPN?",
            "Explain data encryption.",
            "What is cloud security?",
            "How to backup data effectively?",
            "Tips for managing digital privacy.",
            "What is GDPR?",
            "Explain CCPA.",
            "How to identify fake news?",
            "Tips for media literacy.",
            "What is critical thinking about news?",
            "How to verify information online?",
            "Explain logical fallacies in arguments.",
            "What is cognitive bias in decision making?",
            "How to overcome confirmation bias?",
            "Tips for effective communication in a crisis.",
            "What is crisis management?",
            "How to prepare for natural disasters?",
            "Explain first aid basics.",
            "What to do in a fire emergency?",
            "How to perform CPR?",
            "Tips for staying safe online.",
            "What is online etiquette?",
            "How to be a good digital citizen?",
            "Explain responsible AI development.",
            "What are the ethical implications of AI?",
            "How to ensure AI fairness?",
            "Tips for developing trustworthy AI.",
            "What is human-centered AI design?",
            "Explain AI explainability (XAI).",
            "What is value alignment in AI?",
            "How to regulate AI?",
            "Tips for AI policy making.",
            "What is AI governance?",
            "How to promote responsible innovation?",
            "Explain technological singularity.",
            "What is transhumanism?",
            "How to live a minimalist lifestyle?",
            "Tips for decluttering your home.",
            "What are the benefits of minimalism?",
            "How to reduce waste?",
            "Explain composting.",
            "What is upcycling?",
            "How to save energy at home?",
            "Tips for sustainable fashion.",
            "What is ethical consumption?",
            "How to support local businesses?",
            "Explain fair trade.",
            "What is conscious consumerism?",
            "How to reduce plastic use?",
            "Tips for growing your own food.",
            "What are organic farming practices?",
            "Explain permaculture.",
            "What is vertical farming?",
            "How to conserve water in gardening?",
            "Tips for attracting pollinators to your garden.",
            "What are native plants?",
            "How to create a rain garden?",
            "Explain ecological footprint.",
            "What is carbon neutrality?",
            "How to offset carbon emissions?",
            "Tips for renewable energy adoption.",
            "What is solar power?",
            "Explain wind energy.",
            "What are geothermal energy benefits?",
            "How to promote sustainable transportation?",
            "Tips for electric vehicle adoption.",
            "What is public transportation?",
            "How to encourage walking and cycling?",
            "Explain urban planning for sustainability.",
            "What is green building?",
            "How to design energy-efficient homes?",
            "Tips for sustainable waste management.",
            "What is zero-waste living?",
            "How to reduce food waste?",
            "Explain circular economy.",
            "What are challenges of sustainable development?",
            "How to achieve the UN Sustainable Development Goals?",
            "Tips for environmental activism.",
            "What is citizen science?",
            "How to get involved in conservation?",
            "Explain biodiversity loss.",
            "What are endangered species?",
            "How to protect wildlife?",
            "Tips for marine conservation.",
            "What is plastic pollution?",
            "How to clean up oceans?",
            "Explain reforestation efforts.",
            "What are benefits of planting trees?",
            "How to restore wetlands?",
            "Tips for protecting freshwater resources.",
            "What is water scarcity?",
            "How to manage water resources sustainably?",
            "Explain desertification.",
            "What are impacts of deforestation?",
            "How to prevent soil erosion?",
            "Tips for sustainable agriculture.",
            "What is agroforestry?",
            "How to promote regenerative farming?",
            "Explain food security.",
            "What are global hunger issues?",
            "How to ensure equitable food access?",
            "Tips for reducing global poverty.",
            "What is microfinance?",
            "How to support economic development?",
            "Explain social justice.",
            "What are human rights abuses?",
            "How to promote peace and conflict resolution?",
            "Tips for humanitarian aid.",
            "What is disaster relief?",
            "How to support refugees?",
            "Explain global health challenges.",
            "What are pandemics?",
            "How to improve public health?",
            "Tips for disease prevention.",
            "What is universal healthcare?",
            "How to address health disparities?",
            "Explain mental health awareness.",
            "What are common mental health conditions?",
            "How to seek mental health support?",
            "Tips for reducing mental health stigma.",
            "What is cognitive behavioral therapy (CBT)?",
            "Explain dialectical behavior therapy (DBT).",
            "What is psychotherapy?",
            "How to find a good therapist?",
            "Tips for managing anxiety.",
            "What are symptoms of depression?",
            "How to cope with grief?",
            "Explain trauma-informed care.",
            "What is PTSD?",
            "How to support someone with a mental illness?",
            "Tips for self-compassion.",
            "What is positive self-talk?",
            "How to build emotional resilience?",
            "Explain the power of forgiveness.",
            "What is gratitude journaling?",
            "How to practice daily affirmations?",
            "Tips for building a meditation habit.",
            "What are different types of meditation?",
            "How to start a yoga practice?",
            "Explain the benefits of stretching.",
            "What is strength training?",
            "How to improve cardiovascular health?",
            "Tips for a healthy diet.",
            "What are macronutrients?",
            "Explain micronutrients.",
            "What is intermittent fasting?",
            "How to meal prep effectively?",
            "Tips for weight management.",
            "What are signs of healthy eating?",
            "How to overcome emotional eating?",
            "Explain intuitive eating.",
            "What are common food myths?",
            "How to read nutrition labels?",
            "Tips for cooking healthy meals.",
            "What is food safety?",
            "How to prevent foodborne illnesses?",
            "Explain organic vs. conventional food.",
            "What are genetically modified organisms (GMOs)?",
            "How to reduce sugar intake?",
            "Tips for reducing processed foods.",
            "What are healthy snack ideas?",
            "How to stay motivated to exercise?",
            "Explain the benefits of walking.",
            "What is high-intensity interval training (HIIT)?",
            "How to build muscle?",
            "Tips for improving flexibility.",
            "What is functional fitness?",
            "How to prevent sports injuries?",
            "Explain warm-up and cool-down exercises.",
            "What is foam rolling?",
            "How to relieve muscle soreness?",
            "Tips for managing chronic pain.",
            "What are benefits of massage therapy?",
            "Explain acupuncture.",
            "What is chiropractic care?",
            "How to improve sleep hygiene?",
            "Tips for overcoming insomnia.",
            "What are different sleep stages?",
            "How to deal with jet lag?",
            "Explain sleep apnea.",
            "What are benefits of napping?",
            "How to manage shift work sleep disorder?",
            "Tips for creating a relaxing bedtime routine.",
            "What are natural sleep aids?",
            "How to reduce screen time before bed?",
            "Explain the impact of caffeine on sleep.",
            "What are benefits of sunlight exposure?",
            "How to boost vitamin D levels?",
            "Tips for eye health.",
            "What are signs of digital eye strain?",
            "How to protect hearing?",
            "Explain tinnitus.",
            "What are common skin conditions?",
            "How to maintain healthy skin?",
            "Tips for sun protection.",
            "What are signs of skin cancer?",
            "How to manage acne?",
            "Explain eczema.",
            "What is psoriasis?",
            "How to care for hair?",
            "Tips for nail health.",
            "What are signs of dehydration?",
            "How to stay hydrated effectively?",
            "Explain electrolytes.",
            "What are benefits of drinking water?",
            "How to track water intake?",
            "Tips for incorporating more fruits and vegetables.",
            "What are benefits of fiber?",
            "Explain probiotics.",
            "What are prebiotics?",
            "How to improve gut health?",
            "Tips for managing digestive issues.",
            "What is IBS?",
            "Explain Crohn's disease.",
            "What is ulcerative colitis?",
            "How to manage acid reflux?",
            "Tips for a healthy colon.",
            "What are benefits of meditation for digestion?",
            "How to reduce inflammation through diet?",
            "Explain autoimmune diseases.",
            "What is chronic fatigue syndrome?",
            "How to manage fibromyalgia?",
            "Tips for living with diabetes.",
            "What are symptoms of high blood sugar?",
            "How to manage blood pressure?",
            "Explain cholesterol levels.",
            "What are signs of heart attack?",
            "How to prevent stroke?",
            "Tips for bone health.",
            "What is osteoporosis?",
            "How to maintain joint health?",
            "Explain arthritis.",
            "What are benefits of Omega-3 fatty acids?",
            "How to boost brain health?",
            "Tips for preventing cognitive decline.",
            "What are signs of dementia?",
            "How to support brain aging?",
            "Explain neurodegenerative diseases.",
            "What is Parkinson's disease?",
            "How to manage Alzheimer's disease?",
            "Tips for improving memory and focus.",
            "What are brain training exercises?",
            "How to learn new skills to boost brain health?",
            "Explain the benefits of reading for the brain.",
            "What is neurodiversity?",
            "How to support neurodivergent individuals?",
            "Tips for understanding autism spectrum.",
            "What is ADHD management?",
            "How to help someone with dyslexia?",
            "Explain the concept of neurotypical.",
            "What are sensory processing issues?",
            "How to create sensory-friendly environments?",
            "Tips for effective communication with neurodivergent people.",
            "What is social communication disorder?",
            "How to foster inclusivity for all abilities?",
            "Explain universal design.",
            "What are assistive technologies?",
            "How to advocate for disability rights?",
            "Tips for being an ally to marginalized groups.",
            "What is intersectionality?",
            "How to understand privilege?",
            "Explain systemic racism.",
            "What is unconscious bias?",
            "How to challenge discrimination?",
            "Tips for promoting equality.",
            "What is diversity and inclusion (D&I)?",
            "How to build an equitable society?",
            "Explain the role of education in social change.",
            "What are civil rights movements?",
            "How to engage in peaceful protests?",
            "Tips for community organizing.",
            "What is grassroots activism?",
            "How to create social impact?",
            "Explain philanthropy.",
            "What are non-profit organizations?",
            "How to volunteer effectively?",
            "Tips for ethical consumerism.",
            "What is impact investing?",
            "How to support fair trade initiatives?",
            "Explain corporate social responsibility.",
            "What are sustainable business practices?",
            "How to measure social impact?",
            "Tips for ethical leadership.",
            "What is servant leadership?",
            "How to build a purpose-driven organization?",
            "Explain stakeholder capitalism.",
            "What are B Corps?",
            "How to balance profit and purpose?",
            "Tips for social entrepreneurship.",
            "What is disruptive innovation?",
            "How to foster creativity in business?",
            "Explain design thinking for problem-solving.",
            "What are lean startup principles?",
            "How to conduct market research?",
            "Tips for developing a business plan.",
            "What is intellectual property?",
            "How to protect your brand?",
            "Explain trademark and copyright.",
            "What are patents?",
            "How to raise capital for a startup?",
            "Tips for pitching to investors.",
            "What is venture capital?",
            "Explain angel investors.",
            "What are crowdfunding platforms?",
            "How to manage business finances?",
            "Tips for financial forecasting.",
            "What is break-even analysis?",
            "How to optimize cash flow?",
            "Explain profit and loss statements.",
            "What is a balance sheet?",
            "How to interpret financial ratios?",
            "Tips for effective budgeting.",
            "What is risk management in business?",
            "How to create a crisis management plan?",
            "Explain business continuity planning.",
            "What are cybersecurity risks for businesses?",
            "How to protect business data?",
            "Tips for data privacy compliance.",
            "What is GDPR for businesses?",
            "How to build a strong company culture?",
            "Explain employee engagement.",
            "What are performance management strategies?",
            "How to provide constructive feedback to employees?",
            "Tips for conflict resolution in teams.",
            "What is diversity and inclusion in HR?",
            "How to recruit top talent?",
            "Explain onboarding processes.",
            "What are employee benefits?",
            "How to manage employee compensation?",
            "Tips for leadership development.",
            "What is succession planning?",
            "How to foster innovation in the workplace?",
            "Explain change management.",
            "What is organizational development?",
            "How to build a learning organization?",
            "Tips for continuous improvement.",
            "What is Six Sigma?",
            "Explain Lean methodology.",
            "What is Total Quality Management (TQM)?",
            "How to conduct a SWOT analysis?",
            "Tips for strategic planning.",
            "What is competitive analysis?",
            "How to identify market trends?",
            "Explain customer relationship management (CRM).",
            "What are sales strategies?",
            "How to develop a marketing plan?",
            "Tips for digital marketing.",
            "What is content marketing?",
            "Explain SEO best practices.",
            "What is social media marketing?",
            "How to run effective ad campaigns?",
            "Tips for email marketing.",
            "What is influencer marketing?",
            "How to measure marketing ROI?",
            "Explain brand building.",
            "What is brand identity?",
            "How to create a strong brand message?",
            "Tips for public relations.",
            "What is crisis communication?",
            "How to manage a brand's reputation?",
            "Explain customer service excellence.",
            "What are key performance indicators (KPIs)?",
            "How to use data analytics in business?",
            "Tips for business intelligence.",
            "What is big data?",
            "Explain cloud computing for business.",
            "What are enterprise resource planning (ERP) systems?",
            "How to use AI in business operations?",
            "Tips for automation in business.",
            "What is robotic process automation (RPA)?",
            "How to implement machine learning in business?",
            "Explain the Internet of Things (IoT) in industry.",
            "What is Industry 4.0?",
            "How to leverage augmented reality in business?",
            "Tips for virtual reality applications in enterprise.",
            "What is quantum computing?",
            "Explain the future of work.",
            "What are trends in remote work?",
            "How to design hybrid work models?",
            "Tips for fostering collaboration in distributed teams.",
            "What is employee well-being in the workplace?",
            "How to support mental health at work?",
            "Explain stress management for employees.",
            "What is resilience in the workplace?",
            "How to promote a positive work environment?",
            "Tips for building psychological safety at work.",
            "What is inclusive leadership?",
            "How to address unconscious bias in hiring?",
            "Explain diversity recruitment strategies.",
            "What is equity in the workplace?",
            "How to create belonging at work?",
            "Tips for allyship in the workplace.",
            "What is inclusive hiring?",
            "How to reduce bias in recruitment?",
            "Explain fair compensation practices.",
            "What are performance reviews best practices?",
            "How to give constructive feedback effectively?",
            "Tips for managing difficult conversations at work.",
            "What is conflict resolution in teams?",
            "How to build high-performing teams?",
            "Explain team dynamics.",
            "What are leadership styles?",
            "How to choose the right leadership approach?",
            "Tips for motivating diverse teams.",
            "What is servant leadership in practice?",
            "How to empower employees?",
            "Explain delegation techniques.",
            "What are effective meeting strategies?",
            "How to run productive brainstorming sessions?",
            "Tips for decision-making in teams.",
            "What is agile project management?",
            "How to implement Scrum methodology?",
            "Explain Kanban boards.",
            "What are project management software tools?",
            "How to manage project risks?",
            "Tips for stakeholder management.",
            "What is resource allocation in projects?",
            "How to track project progress?",
            "Explain project closure best practices.",
            "What is quality management in projects?",
            "How to conduct post-mortems for projects?",
            "Tips for continuous improvement in operations.",
            "What is Lean Six Sigma?",
            "How to optimize business processes?",
            "Explain supply chain management strategies.",
            "What are logistics and transportation trends?",
            "How to manage inventory effectively?",
            "Tips for warehouse optimization.",
            "What is e-commerce fulfillment?",
            "How to handle returns and reverse logistics?",
            "Explain retail operations management.",
            "What are customer experience (CX) strategies?",
            "How to map the customer journey?",
            "Tips for enhancing customer satisfaction.",
            "What is net promoter score (NPS)?",
            "How to collect customer feedback?",
            "Explain customer service best practices.",
            "What are chatbots for customer support?",
            "How to use AI in customer service?",
            "Tips for personalizing customer interactions.",
            "What is customer relationship management (CRM) software?",
            "How to implement a CRM system?",
            "Explain sales process optimization.",
            "What are B2B sales strategies?",
            "How to cold call effectively?",
            "Tips for lead generation.",
            "What is conversion rate optimization?",
            "How to build a sales funnel?",
            "Explain marketing automation.",
            "What are email marketing best practices?",
            "How to design effective landing pages?",
            "Tips for search engine marketing (SEM).",
            "What is Google Ads?",
            "How to optimize for local SEO?",
            "Explain content strategy for websites.",
            "What are types of blog content?",
            "How to write engaging headlines?",
            "Tips for social media content creation.",
            "What is video marketing?",
            "How to use TikTok for business?",
            "Explain Instagram marketing strategies.",
            "What are LinkedIn marketing best practices?",
            "How to build a brand community online?",
            "Tips for online reputation management.",
            "What is public relations for startups?",
            "How to write a press release?",
            "Explain media relations.",
            "What are crisis communication plans?",
            "How to manage negative online reviews?",
            "Tips for building brand loyalty.",
            "What is experiential marketing?",
            "How to create memorable brand experiences?",
            "Explain cause marketing.",
            "What are corporate partnerships?",
            "How to measure marketing campaign ROI?",
            "Tips for analytics and reporting in marketing.",
            "What is A/B testing?",
            "How to use Google Analytics?",
            "Explain data visualization for marketing insights.",
            "What are market research methods?",
            "How to conduct surveys effectively?",
            "Tips for competitor analysis.",
            "What is market segmentation?",
            "How to identify target audiences?",
            "Explain product development process.",
            "What are stages of the product lifecycle?",
            "How to launch a new product successfully?",
            "Tips for product pricing strategies.",
            "What is product management?",
            "How to work with engineering teams?",
            "Explain user stories and product backlogs.",
            "What are agile product development principles?",
            "How to conduct user acceptance testing (UAT)?",
            "Tips for managing product roadmaps.",
            "What is product market fit?",
            "How to scale a product?",
            "Explain product growth strategies.",
            "What are strategies for product iteration?",
            "How to sunset a product?",
            "Tips for building minimum viable products (MVPs).",
            "What is design thinking in product development?",
            "How to conduct user interviews?",
            "Explain prototyping tools.",
            "What are usability heuristics?",
            "How to perform heuristic evaluation?",
            "Tips for accessibility in design.",
            "What is inclusive design?",
            "How to design for diverse users?",
            "Explain ethical design principles.",
            "What are dark patterns in UX?",
            "How to design for privacy?",
            "Tips for creating user-centered designs.",
            "What is information architecture?",
            "How to organize content for usability?",
            "Explain navigation design.",
            "What are interaction design principles?",
            "How to design intuitive interfaces?",
            "Tips for creating delightful user experiences.",
            "What is animation in UI design?",
            "How to use microinteractions effectively?",
            "Explain haptic feedback in UI.",
            "What are responsive web design principles?",
            "How to design for mobile first?",
            "Tips for cross-browser compatibility.",
            "What is progressive web app (PWA) development?",
            "How to optimize website performance?",
            "Explain critical rendering path.",
            "What are web accessibility standards?",
            "How to make websites accessible for all users?",
            "Tips for search engine optimization (SEO) for designers.",
            "What is Google's Core Web Vitals?",
            "How to improve website SEO?",
            "Explain schema markup.",
            "What are backlinks and link building?",
            "How to conduct keyword research?",
            "Tips for on-page SEO optimization.",
            "What is technical SEO?",
            "How to audit website SEO?",
            "Explain SEO tools.",
            "What are content delivery networks (CDNs)?",
            "How to secure a website?",
            "Tips for preventing cyber attacks.",
            "What is a firewall?",
            "How to use SSL certificates?",
            "Explain data encryption in web security.",
            "What are common web vulnerabilities?",
            "How to prevent SQL injection?",
            "Tips for preventing cross-site scripting (XSS).",
            "What is authentication and authorization?",
            "How to implement secure user logins?",
            "Explain password hashing.",
            "What are API security best practices?",
            "How to secure cloud applications?",
            "Tips for secure coding practices.",
            "What is penetration testing?",
            "How to conduct a security audit?",
            "Explain incident response plans.",
            "What are disaster recovery strategies?",
            "How to perform data backups and recovery?",
            "Tips for business continuity planning.",
            "What is IT governance?",
            "How to manage IT risks?",
            "Explain IT service management (ITSM).",
            "What are ITIL frameworks?",
            "How to manage IT projects?",
            "Tips for IT budgeting.",
            "What is cloud cost management?",
            "How to optimize cloud resources?",
            "Explain serverless computing.",
            "What are containerization technologies like Docker?",
            "How to use Kubernetes for orchestration?",
            "Tips for DevOps practices.",
            "What is continuous integration/continuous delivery (CI/CD)?",
            "How to automate software deployments?",
            "Explain infrastructure as code (IaC).",
            "What are security automation tools?",
            "How to implement DevSecOps?",
            "Tips for site reliability engineering (SRE).",
            "What is observability in software systems?",
            "How to monitor application performance?",
            "Explain logging and tracing.",
            "What are alert management systems?",
            "How to troubleshoot complex systems?",
            "Tips for incident post-mortems.",
            "What is chaos engineering?",
            "How to build resilient systems?",
            "Explain fault tolerance.",
            "What are distributed systems challenges?",
            "How to design scalable architectures?",
            "Tips for microservices architecture.",
            "What is event-driven architecture?",
            "How to use message queues?",
            "Explain data streaming technologies.",
            "What are database design principles?",
            "How to choose the right database?",
            "Tips for NoSQL databases.",
            "What is graph database?",
            "How to optimize database performance?",
            "Explain database security.",
            "What are data warehousing concepts?",
            "How to build a data lake?",
            "Tips for ETL processes.",
            "What is business intelligence dashboards?",
            "How to create interactive reports?",
            "Explain data storytelling.",
            "What are benefits of data governance?",
            "How to ensure data quality?",
            "Tips for data privacy regulations (e.g., CCPA, GDPR).",
            "What is ethical data use?",
            "How to prevent algorithmic bias?",
            "Explain responsible AI development.",
            "What are fairness metrics in machine learning?",
            "How to ensure AI transparency and explainability?",
            "Tips for AI auditing.",
            "What is federated learning?",
            "How to train AI models with privacy preservation?",
            "Explain differential privacy.",
            "What are synthetic data generation methods?",
            "How to secure machine learning models?",
            "Tips for adversarial machine learning.",
            "What is model interpretability?",
            "How to debug machine learning models?",
            "Explain model monitoring and maintenance.",
            "What is MLOps?",
            "How to deploy machine learning models in production?",
            "Tips for versioning machine learning models.",
            "What are machine learning platforms?",
            "How to use cloud AI services?",
            "Explain custom machine learning models.",
            "What are deep neural networks?",
            "How to train convolutional neural networks (CNNs)?",
            "Tips for recurrent neural networks (RNNs).",
            "What are transformers in NLP?",
            "How to fine-tune pre-trained models?",
            "Explain generative adversarial networks (GANs).",
            "What are reinforcement learning applications?",
            "How to build intelligent agents?",
            "Tips for natural language understanding (NLU).",
            "What is natural language generation (NLG)?",
            "How to perform sentiment analysis?",
            "Explain named entity recognition (NER).",
            "What are text summarization techniques?",
            "How to build a chatbot?",
            "Tips for voice assistants development.",
            "What is computer vision in robotics?",
            "How to use object detection models?",
            "Explain image segmentation.",
            "What are facial recognition technologies?",
            "How to apply computer vision in security?",
            "Tips for developing augmented reality (AR) applications.",
            "What is virtual reality (VR) for training?",
            "How to create immersive experiences?",
            "Explain mixed reality (MR).",
            "What are applications of VR/AR in healthcare?",
            "How to use AR for remote assistance?",
            "Tips for developing games with AR/VR.",
            "What is game design theory?",
            "How to create game mechanics?",
            "Explain level design.",
            "What are types of video game genres?",
            "How to monetize games?",
            "Tips for indie game development.",
            "What is game engine development?",
            "How to use Unity for game creation?",
            "Explain Unreal Engine.",
            "What are tools for 3D modeling?",
            "How to animate 3D characters?",
            "Tips for character rigging.",
            "What is texture mapping?",
            "How to optimize game assets?",
            "Explain game physics engines.",
            "What are artificial intelligence in games?",
            "How to design game AI?",
            "Tips for pathfinding algorithms.",
            "What is procedural content generation?",
            "How to implement networking in games?",
            "Explain multiplayer game architectures.",
            "What are security considerations for online games?",
            "How to prevent cheating in games?",
            "Tips for game testing and quality assurance.",
            "What is game localization?",
            "How to market a video game?",
            "Explain esports and competitive gaming.",
            "What are streaming platforms for games?",
            "How to become a professional gamer?",
            "Tips for content creation as a streamer.",
            "What is game development boot camp?",
            "How to learn game programming?",
            "Explain game art and animation courses.",
            "What are sound design principles for games?",
            "How to compose game music?",
            "Tips for writing game narratives.",
            "What is world-building in games?",
            "How to create compelling game characters?",
            "Explain branching narratives in games.",
            "What are interactive storytelling techniques?",
            "How to design puzzle games?",
            "Tips for educational game design.",
            "What is serious games development?",
            "How to use games for training and simulation?",
            "Explain gamification in business.",
            "What are elements of gamification?",
            "How to apply gamification to education?",
            "Tips for designing reward systems.",
            "What is behavioral economics?",
            "How to influence user behavior ethically?",
            "Explain nudges in design.",
            "What are ethical considerations in persuasive design?",
            "How to design for positive habits?",
            "Tips for breaking bad habits.",
            "What is habit formation theory?",
            "How to use triggers, routines, and rewards?",
            "Explain the Fogg Behavior Model.",
            "What is the power of small wins?",
            "How to build self-efficacy?",
            "Tips for setting challenging but achievable goals.",
            "What is deliberate practice?",
            "How to learn from failures?",
            "Explain resilience and grit.",
            "What are characteristics of successful people?",
            "How to develop a growth mindset?",
            "Tips for cultivating emotional intelligence.",
            "What is positive psychology in practice?",
            "How to find your purpose in life?",
            "Explain meaning-making.",
            "What are values-based living principles?",
            "How to align actions with values?",
            "Tips for cultivating gratitude.",
            "What is forgiveness and its benefits?",
            "How to practice self-compassion?",
            "Explain the power of mindfulness.",
            "What are meditation techniques for stress relief?",
            "How to cultivate inner peace?",
            "Tips for managing anxiety and worry.",
            "What is cognitive restructuring?",
            "How to challenge negative thoughts?",
            "Explain behavioral activation.",
            "What are coping skills for depression?",
            "How to build a support system?",
            "Tips for effective communication in relationships.",
            "What is active listening?",
            "How to resolve conflicts constructively?",
            "Explain empathetic responding.",
            "What are healthy boundaries in relationships?",
            "How to build trust and intimacy?",
            "Tips for navigating difficult conversations.",
            "What is nonviolent communication?",
            "How to express needs clearly?",
            "Explain the impact of body language.",
            "What are signs of healthy attachment?",
            "How to heal from relationship trauma?",
            "Tips for self-love and self-respect.",
            "What is emotional regulation?",
            "How to manage strong emotions?",
            "Explain distress tolerance skills.",
            "What are mindfulness-based stress reduction techniques?",
            "How to practice radical acceptance?",
            "Tips for building resilience after trauma.",
            "What is post-traumatic growth?",
            "How to seek professional help for mental health?",
            "Explain different types of therapy.",
            "What are benefits of counseling?",
            "How to find a good therapist?",
            "Tips for medication management for mental health.",
            "What is crisis intervention?",
            "How to support someone in crisis?",
            "Explain suicide prevention strategies.",
            "What are signs of addiction?",
            "How to seek help for substance use disorder?",
            "Tips for recovery and relapse prevention.",
            "What is harm reduction?",
            "How to support a loved one with addiction?",
            "Explain codependency.",
            "What are boundaries for healthy relationships?",
            "How to practice self-care to prevent burnout?",
            "Tips for managing work-life balance.",
            "What is digital detox?",
            "How to create a healthy relationship with technology?",
            "Explain conscious consumption.",
            "What are sustainable living practices?",
            "How to reduce your environmental footprint?",
            "Tips for mindful eating.",
            "What is intuitive eating?",
            "How to foster positive body image?",
            "Explain healthy lifestyle choices.",
            "What are benefits of physical activity?",
            "How to incorporate exercise into your routine?",
            "Tips for improving sleep hygiene.",
            "What is stress management?",
            "How to practice relaxation techniques?",
            "Explain the importance of hydration.",
            "What are superfoods?",
            "How to boost your immune system naturally?",
            "Tips for maintaining gut health.",
            "What is the microbiome?",
            "How to reduce inflammation through diet?",
            "Explain chronic disease prevention.",
            "What are benefits of preventative care?",
            "How to manage chronic conditions?",
            "Tips for healthy aging.",
            "What is brain health?",
            "How to prevent cognitive decline?",
            "Explain neuroplasticity and learning.",
            "What are memory-boosting techniques?",
            "How to improve focus and concentration?",
            "Tips for lifelong learning.",
            "What is intellectual curiosity?",
            "How to stay mentally active?",
            "Explain the power of reading.",
            "What are benefits of learning a new language?",
            "How to play brain games?",
            "Tips for creative problem-solving.",
            "What is divergent thinking?",
            "How to foster innovation?",
            "Explain design thinking process.",
            "What are ideation techniques?",
            "How to brainstorm effectively?",
            "Tips for overcoming creative blocks.",
            "What is artistic expression?",
            "How to find your creative outlet?",
            "Explain the benefits of hobbies.",
            "What are ways to relax and de-stress?",
            "How to enjoy leisure time fully?",
            "Tips for finding joy in everyday life.",
            "What is the pursuit of happiness?",
            "How to cultivate optimism?",
            "Explain resilience in challenging times.",
            "What is post-traumatic growth?",
            "How to build meaningful relationships?",
            "Tips for fostering connection.",
            "What is the importance of community?",
            "How to give back to society?",
            "Explain philanthropy and altruism.",
            "What are different forms of volunteering?",
            "How to make a positive impact?",
            "Tips for advocacy and activism.",
            "What is social justice?",
            "How to promote equality and equity?",
            "Explain human rights.",
            "What are ethical dilemmas?",
            "How to make ethical decisions?",
            "Tips for moral reasoning.",
            "What is critical thinking in daily life?",
            "How to analyze information effectively?",
            "Explain logical fallacies.",
            "What are biases in thinking?",
            "How to avoid misinformation?",
            "Tips for media literacy.",
            "What is responsible digital citizenship?",
            "How to manage your online presence?",
            "Explain cyber security for individuals.",
            "What are common online scams?",
            "How to protect your privacy online?",
            "Tips for strong password creation.",
            "What is two-factor authentication (2FA)?",
            "How to recognize phishing emails?",
            "Explain identity theft prevention.",
            "What are VPNs and why use them?",
            "How to secure your smart home devices?",
            "Tips for safe online shopping.",
            "What is data breach notification?",
            "How to respond to a data breach?",
            "Explain ransomware attacks.",
            "What are computer viruses and malware?",
            "How to keep your software updated?",
            "Tips for secure Wi-Fi usage.",
            "What is public Wi-Fi safety?",
            "How to use a password manager?",
            "Explain digital footprint.",
            "What are privacy settings on social media?",
            "How to delete personal data online?",
            "Tips for managing online reputation.",
            "What is cancel culture?",
            "How to navigate online discourse responsibly?",
            "Explain digital well-being.",
            "What is screen time management?",
            "How to reduce digital distractions?",
            "Tips for a healthy relationship with social media.",
            "What is social media addiction?",
            "How to do a digital detox?",
            "Explain tech-life balance.",
            "What are benefits of unplugging?",
            "How to foster real-world connections?",
            "Tips for intentional technology use.",
            "What is slow living?",
            "How to embrace simplicity?",
            "Explain mindful consumption.",
            "What are benefits of decluttering?",
            "How to organize your home effectively?",
            "Tips for minimalist living.",
            "What is zero-waste lifestyle?",
            "How to reduce plastic waste?",
            "Explain composting at home.",
            "What are sustainable fashion choices?",
            "How to reduce your carbon footprint?",
            "Tips for energy conservation.",
            "What is renewable energy at home?",
            "How to grow your own food?",
            "Explain urban gardening.",
            "What are permaculture principles?",
            "How to build a food forest?",
            "Tips for zero-waste cooking.",
            "What is food waste reduction?",
            "How to compost food scraps?",
            "Explain circular economy models for food.",
            "What are sustainable agriculture practices?",
            "How to support regenerative farming?",
            "Tips for ethical eating choices."
        ];

        // --- DOM Elements (Declared here, assigned in load event) ---
        let chatbotContainer;
        let chatHistoryDiv;
        let userInput;
        let sendButton;
        let themeSelect; // NEW
        let copyMessage;
        let simulateTypingToggle; // NEW: Simulate typing toggle
        let chatAttachmentsPreviewContainer;
        let chatImageUpload;
        let voiceInputBtn;
        let suggestionsContainer;
        let suggestionsList;
        // Removed: let stopButton; 
        
        // Sidebar Elements
        let chatSidebar; 
        let newChatBtnSidebar; 
        let toggleSidebarBtn; 
        let mobileToggleSidebarBtn; 
        let chatMainContent;
        // NEW Sidebar Elements
        let modelSelect;
        // Renamed from systemPromptInput to systemPromptSelect
        let systemPromptSelect; 
        // Renamed from clearSystemPromptBtn
        let clearSystemPromptBtn; 
        let clearChatBtn;
        let exportTxtBtn;
        let exportPdfBtn;
        // Renamed from exportDocBtn to exportMdBtn
        let exportMdBtn; 

        // NEW: Theme Constants
        const THEMES = [
            'cosmic-purple',
            'starlight-lavender',
            'emerald-galaxy',
            'crimson-nebula',
            'golden-aurora',
            'cosmic-gold',
            'neon-glitch', // Added new theme
            'ancient-papyrus' // Added new theme
        ];
        const DEFAULT_THEME = 'cosmic-purple';

        // --- Lucide Icon Helper ---
        const createIcons = () => {
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        };

        function updateButtonIcon(buttonElement, newIconName, classList = 'w-4 h-4') {
            let currentIconSvg = buttonElement.querySelector('.lucide');
            if (currentIconSvg) {
                currentIconSvg.remove();
            }

            const newIconSpan = document.createElement('span');
            newIconSpan.setAttribute('data-lucide', newIconName);
            newIconSpan.className = classList; 

            buttonElement.appendChild(newIconSpan);
           
            createIcons(); 
        }

        // NEW: Function to manage the send/stop button's appearance and enabled/disabled state
        function updateSendButtonState() {
            const hasInput = userInput.value.trim().length > 0 || chatAttachments.length > 0;

            if (isGeneratingResponse) {
                // AI is generating, button should be 'stop'
                updateButtonIcon(sendButton, 'square', 'w-5 h-5');
                sendButton.disabled = false; // Always enabled to stop
                sendButton.style.backgroundColor = 'var(--accent-error)'; // Red for stop
                sendButton.style.color = 'white'; // White icon for stop
            } else {
                // AI is idle, button should be 'send'
                updateButtonIcon(sendButton, 'send', 'w-5 h-5');
                sendButton.style.backgroundColor = 'var(--accent-color)'; // Default accent color for send
                sendButton.style.color = 'white'; // White icon for send
                if (hasInput) {
                    sendButton.disabled = false; // Enable if there's text or attachments
                } else {
                    sendButton.disabled = true; // Disable if no text and no attachments
                }
            }
        }

        // --- File Handling Helpers ---
        const fileToBase64 = (file) => {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve({
                    mimeType: file.type || 'application/octet-stream', 
                    data: reader.result.split(',')[1]
                });
                reader.onerror = error => reject(error);
                reader.readAsDataURL(file);
            });
        };

        function getFileIcon(mimeType) {
            if (mimeType.startsWith('image/')) return 'image';
            if (mimeType === 'application/pdf') return 'file-text';
            if (mimeType.includes('text/')) return 'file-text';
            if (mimeType.includes('csv') || mimeType.includes('excel')) return 'file-spreadsheet';
            if (mimeType.includes('json') || mimeType.includes('xml') || mimeType.includes('code') || mimeType.includes('markdown')) return 'file-code';
            return 'file';
        }

        // --- Markdown.js Custom Renderer for Code Blocks ---
        const renderer = {
            code(token) { 
                const actualCodeContent = token.text; 
                const lang = token.lang;             

                const languageDisplay = lang ? `<span class="text-xs font-semibold uppercase text-gray-400">${lang}</span>` : '';
                const uniqueId = `code-block-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                
                // Prism.js expects the raw (unescaped) code string and will handle escaping and highlighting.
                const escapedCode = actualCodeContent
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#39;'); 

                return `
                    <div class="code-block-container">
                        <div class="code-block-header">
                            ${languageDisplay}
                            <button class="code-block-copy-button" data-copy-target="${uniqueId}">
                                <span data-lucide="clipboard" class="w-4 h-4"></span>
                                Copy code
                            </button>
                        </div>
                        <pre><code id="${uniqueId}" class="language-${lang || 'plaintext'}">${escapedCode}</code></pre>
                    </div>
                `;
            }
        };
        marked.use({ renderer });

        // --- Chat UI & Logic ---
        /**
         * Appends a chat message to the UI. For AI messages, it appends an initially empty content area,
         * which is later filled by simulateTyping or direct rendering.
         * @param {string} role - 'user' or 'model'
         * @param {string} text - The raw text content of the message.
         * @param {Array} attachments - Array of attachment objects (for user messages).
         * @param {string} messageId - Optional ID for the message div.
         * @returns {object} An object containing references to the messageContentDiv and the full messageDiv.
         */
        function appendChatMessage(role, text, attachments = [], messageId = null) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('chat-message', role);
            
            messageId = messageId || `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
            messageDiv.dataset.messageId = messageId;
            
            // Store the raw text for copy/dictate before any display formatting
            messageTextCache.set(messageId, text); 

            // Create avatar element (img for AI, lucide icon for User)
            let avatarElement;
            if (role === 'user') {
                avatarElement = document.createElement('div');
                avatarElement.classList.add('lucide-avatar-icon');
                const userIconSpan = document.createElement('span');
                userIconSpan.setAttribute('data-lucide', USER_AVATAR_ICON);
                avatarElement.appendChild(userIconSpan);
                avatarElement.title = "You"; 
            } else {
                avatarElement = document.createElement('img');
                avatarElement.src = AI_AVATAR_URL;
                avatarElement.alt = 'AI Avatar';
                avatarElement.classList.add('chat-avatar');
                avatarElement.title = "Mystic Vision AI"; 
            }

            // Create the content bubble wrapper
            const messageBubbleContent = document.createElement('div');
            messageBubbleContent.classList.add('message-bubble-content');

            // Create the actual message content area *inside* the bubble
            const messageContentDiv = document.createElement('div');
            messageContentDiv.classList.add('message-content');

            if (role === 'user') {
                messageContentDiv.innerHTML = `<span>${text}</span>`; // User text is plain HTML

                if (attachments.length > 0) {
                    const attachmentsContainer = document.createElement('div');
                    attachmentsContainer.classList.add('mt-2', 'flex', 'flex-wrap', 'gap-2');
                    attachments.forEach(attachment => {
                        if (attachment.mimeType.startsWith('image/')) {
                            attachmentsContainer.innerHTML += `<img src="data:${attachment.mimeType};base64,${attachment.data}" alt="${attachment.name || 'User attachment'}" class="chat-image w-24 h-24 object-cover">`;
                        } else {
                            attachmentsContainer.innerHTML += `
                                <div class="chat-message-attachment-item">
                                    <span data-lucide="${getFileIcon(attachment.mimeType)}" class="w-4 h-4 flex-shrink-0"></span>
                                    <span class="truncate max-w-[120px]">${attachment.name || 'File'}</span>
                                </div>
                            `;
                        }
                    });
                    messageContentDiv.appendChild(attachmentsContainer);
                }
                
                messageBubbleContent.appendChild(messageContentDiv); // Append user content to bubble
                messageDiv.appendChild(messageBubbleContent);
                messageDiv.appendChild(avatarElement); 
            } else { // AI message: initialize empty, content filled later by simulateTyping or instant render
                // For AI, the messageContentDiv is initially empty.
                // It will be filled by simulateTyping or direct marked.parse later.
                messageBubbleContent.appendChild(messageContentDiv); // Append initially empty content div
                messageDiv.appendChild(avatarElement); 
                messageDiv.appendChild(messageBubbleContent);
            }
            
            // Add common actions to the messageBubbleContent (as a separate child)
            const actionsDiv = document.createElement('div');
            actionsDiv.classList.add('message-actions');
            actionsDiv.innerHTML = `
                <button class="copy-message-btn" title="Copy message" data-message-id="${messageId}">
                    <span data-lucide="clipboard" class="w-4 h-4"></span>
                </button>
                <button class="dictate-message-btn" title="Dictate message" data-message-id="${messageId}">
                    <span data-lucide="volume-2" class="w-4 h-4"></span>
                </button>
                ${role === 'user' ? `
                <button class="edit-message-btn" title="Edit message" data-message-id="${messageId}">
                    <span data-lucide="pencil" class="w-4 h-4"></span>
                </button>` : `
                <button class="regenerate-message-btn" title="Regenerate response" data-message-id="${messageId}">
                    <span data-lucide="rotate-ccw" class="w-4 h-4"></span>
                </button>`
                }
            `;
            messageBubbleContent.appendChild(actionsDiv); // Append actions as a *new child* of the bubble

            chatHistoryDiv.appendChild(messageDiv);
            
            setTimeout(() => {
                messageDiv.style.transform = 'scale(1)';
            }, 10);
            
            chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
            createIcons(); 

            // Return the specific message content div where text will eventually go
            // and the full messageDiv for Prism.highlightAllUnder(element.closest(...))
            return { messageContentDiv, messageDiv }; 
        }

        let isApiCallInProgress = false; 
        function toggleLoading(show) {
            let loadingIndicator = document.getElementById('loadingIndicator');
            if (show) {
                isApiCallInProgress = true;
                if (!loadingIndicator) {
                    loadingIndicator = document.createElement('div');
                    loadingIndicator.id = 'loadingIndicator';
                    loadingIndicator.classList.add('p-4', 'text-center', 'text-gray-500', 'text-sm', 'ai-message'); 
                    loadingIndicator.innerHTML = `
                        <div class="loader-container h-8">
                            <div class="loader-dot"></div>
                            <div class="loader-dot"></div>
                            <div class="loader-dot"></div>
                        </div>
                        <span class="mt-2 block">Mystic Vision AI is thinking...</span>
                    `;
                    chatHistoryDiv.appendChild(loadingIndicator);
                }
                loadingIndicator.style.display = 'flex';
                loadingIndicator.style.flexDirection = 'column'; 
                chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
                isGeneratingResponse = true; // Set state for button update
                updateSendButtonState(); // Update button to 'stop' icon and enabled
                userInput.disabled = true; 
            } else {
                isApiCallInProgress = false;
                if (loadingIndicator) {
                    loadingIndicator.remove(); 
                }
                isGeneratingResponse = false; // Set state for button update
                updateSendButtonState(); // Update button to 'send' icon and disabled/enabled based on input
                userInput.disabled = false; 
                userInput.focus();
            }
        }

        // Simulate typing function (now receives the inner message-content div)
        function simulateTyping(messageContentDiv, text, delay = 1) { 
            if (!messageContentDiv) return;

            messageContentDiv.innerHTML = ''; 
            let currentTypedText = '';
            let i = 0;
            const renderBatchSize = 10; 

            if (currentTypingInterval) {
                clearInterval(currentTypingInterval);
                currentTypingInterval = null;
            }

            currentTypingInterval = setInterval(() => {
                if (!isGeneratingResponse) {
                    clearInterval(currentTypingInterval);
                    currentTypingInterval = null;
                    messageContentDiv.innerHTML = marked.parse(text);
                    if (typeof Prism !== 'undefined') {
                        Prism.highlightAllUnder(messageContentDiv.closest('.chat-message'));
                    }
                    toggleLoading(false); 
                    return;
                }

                if (i < text.length) {
                    currentTypedText += text.charAt(i);

                    if ((i + 1) % renderBatchSize === 0 || i === text.length - 1) {
                        messageContentDiv.innerHTML = marked.parse(currentTypedText);
                        if (typeof Prism !== 'undefined') {
                            Prism.highlightAllUnder(messageContentDiv);
                        }
                    }
                    
                    i++;
                    chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
                } else {
                    clearInterval(currentTypingInterval);
                    currentTypingInterval = null;
                    
                    messageContentDiv.innerHTML = marked.parse(text);
                    if (typeof Prism !== 'undefined') {
                        Prism.highlightAllUnder(messageContentDiv.closest('.chat-message'));
                    }
                    chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
                    toggleLoading(false); 
                    isGeneratingResponse = false; 
                    saveCurrentChat(); 
                }
            }, delay); 
        }


        function displayChatAttachments() {
            chatAttachmentsPreviewContainer.innerHTML = '';
            if (chatAttachments.length > 0) {
                chatAttachmentsPreviewContainer.classList.remove('hidden');
                chatAttachments.forEach((attachment, index) => {
                    const attachmentDiv = document.createElement('div');
                    attachmentDiv.classList.add('chat-attachment-preview-item');
                    attachmentDiv.dataset.index = index;

                    let previewContent = '';
                    if (attachment.mimeType.startsWith('image/')) {
                        previewContent = `<img src="data:${attachment.mimeType};base64,${attachment.data}" alt="${attachment.name}" class="w-8 h-8 object-cover rounded-md">`;
                    } else {
                        previewContent = `<span data-lucide="${getFileIcon(attachment.mimeType)}" class="w-5 h-5 flex-shrink-0"></span>`;
                    }

                    attachmentDiv.innerHTML = `
                        ${previewContent}
                        <span class="truncate max-w-[100px]">${attachment.name}</span>
                        <button class="remove-attachment-btn">
                            <span data-lucide="x" class="w-4 h-4"></span>
                        </button>
                    `;
                    chatAttachmentsPreviewContainer.appendChild(attachmentDiv);
                });
                createIcons(); 
            } else {
                chatAttachmentsPreviewContainer.classList.add('hidden');
            }
        }

        function showCopyMessage() {
            copyMessage.classList.add('show');
            setTimeout(() => {
                copyMessage.classList.remove('show');
            }, 3000);
        }

        function copyToClipboard(text) { 
            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(text)
                    .then(() => {
                        showCopyMessage();
                    })
                    .catch(err => {
                        console.error('Failed to copy: ', err);
                        alert('Failed to copy text. Please copy manually.'); 
                    });
            } else {
                const tempTextArea = document.createElement('textarea');
                tempTextArea.value = text;
                document.body.appendChild(tempTextArea);
                tempTextArea.select();
                try {
                    document.execCommand('copy');
                    showCopyMessage();
                } catch (err) {
                    console.error('Failed to copy (fallback):', err);
                    alert('Failed to copy text. Please copy manually.'); 
                }
                document.body.removeChild(tempTextArea);
            }
        }

        function toggleSpeech(text, buttonElement) {
            if (!window.speechSynthesis) {
                alert('Speech synthesis not supported in this browser.');
                return;
            }

            if (isSpeaking && currentUtterance && currentUtterance.text === text) {
                if (window.speechSynthesis.paused) {
                    window.speechSynthesis.resume();
                    updateButtonIcon(buttonElement, 'pause');
                } else {
                    window.speechSynthesis.pause();
                    updateButtonIcon(buttonElement, 'volume-2');
                }
            } else {
                startSpeech(text, buttonElement);
            }
        }

        function startSpeech(text, buttonElement) {
            if (window.speechSynthesis.speaking || window.speechSynthesis.paused) {
                window.speechSynthesis.cancel();
            }

            document.querySelectorAll('.dictate-message-btn').forEach(btn => {
                if (btn !== buttonElement) { 
                    updateButtonIcon(btn, 'volume-2'); 
                }
            });

            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'en-US'; 

            utterance.onstart = () => {
                isSpeaking = true;
                currentUtterance = utterance;
                updateButtonIcon(buttonElement, 'pause');
            };
            utterance.onend = () => {
                isSpeaking = false;
                currentUtterance = null;
                updateButtonIcon(buttonElement, 'volume-2');
            };
            utterance.onerror = (event) => {
                console.error('Speech synthesis error:', event.error);
                alert('Failed to dictate message. Check console for details.');
                isSpeaking = false;
                currentUtterance = null;
                updateButtonIcon(buttonElement, 'volume-2');
            };

            window.speechSynthesis.speak(utterance);
        }

        // --- API Call Function ---
        async function callGeminiAPI(payload) {
            if (GEMINI_API_KEY === "YOUR_GEMINI_API_KEY_HERE" || !GEMINI_API_KEY || GEMINI_API_KEY === "") { 
                throw new Error("API Key is not set or is the default placeholder. Please replace 'YOUR_GEMINI_API_KEY_HERE' in the script with your actual Gemini API key.");
            }
            
            const dynamicApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${currentModel}:generateContent?key=${GEMINI_API_KEY}`;

            // Filter out the 'id' property from messages before sending to Gemini API
            const cleanContents = payload.contents.map(message => {
                const newMessage = {
                    role: message.role,
                    parts: message.parts
                };
                // Ensure no unexpected properties are passed to the API
                return newMessage;
            });
            
            const requestBody = {
                contents: cleanContents,
            };

            // NEW: Add system_instruction if it exists
            if (systemInstruction) {
                requestBody.system_instruction = {
                    parts: [{ text: systemInstruction }]
                };
            }

            let response;
            let result;
            let success = false;
            let retryCount = 0;
            const maxRetries = 3;
            let delay = 1000; 

            while (retryCount < maxRetries && !success) {
                try {
                    response = await fetch(dynamicApiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(requestBody) // Send the final request body with system_instruction
                    });

                    if (response.status === 429) { 
                        if (retryCount < maxRetries - 1) {
                            console.warn(`API rate limit exceeded. Retrying in ${delay / 1000}s...`);
                            await new Promise(res => setTimeout(res, delay));
                            delay *= 2; 
                            retryCount++;
                        } else {
                            throw new Error('API rate limit exceeded. Please try again later.');
                        }
                    } else if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(`API error: ${response.status} ${response.statusText} - ${errorData.error?.message || 'Unknown error'}`);
                    } else {
                        result = await response.json();
                        success = true;
                    }
                } catch (err) {
                    if (retryCount < maxRetries - 1) {
                        console.warn(`Fetch error: ${err.message}. Retrying in ${delay / 1000}s...`);
                        await new Promise(res => setTimeout(res, delay));
                        delay *= 2;
                        retryCount++;
                    } else {
                        throw err; 
                    }
                }
            }
            
            if (result && result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                return result.candidates[0].content.parts[0].text;
            } else {
                throw new Error('Failed to get a valid response from the AI. No candidates found or content is empty.');
            }
        }

        // --- Autocomplete Functions ---
        function filterSuggestions(query) {
            if (!query) return [];
            const lowerQuery = query.toLowerCase();
            return autocompleteSuggestions.filter(s => s.toLowerCase().includes(query));
        }

        function displaySuggestions(suggestions) {
            suggestionsList.innerHTML = '';
            suggestionsContainer.classList.add('hidden');
            selectedSuggestionIndex = -1;

            if (suggestions.length === 0) {
                return;
            }

            suggestions.forEach((suggestion, index) => {
                const li = document.createElement('li');
                li.textContent = suggestion;
                li.dataset.index = index;
                li.addEventListener('click', () => {
                    userInput.value = suggestion;
                    userInput.focus();
                    suggestionsContainer.classList.add('hidden');
                    userInput.style.height = 'auto'; 
                    userInput.style.height = userInput.scrollHeight + 'px';
                    updateSendButtonState(); // Update button state after suggestion is applied
                });
                suggestionsList.appendChild(li);
            });
            suggestionsContainer.classList.remove('hidden');
        }

        function navigateSuggestions(direction) {
            const items = Array.from(suggestionsList.children);
            if (items.length === 0) return;

            if (selectedSuggestionIndex !== -1) {
                items[selectedSuggestionIndex].classList.remove('selected');
            }

            if (direction === 'down') {
                selectedSuggestionIndex = (selectedSuggestionIndex + 1) % items.length;
            } else if (direction === 'up') {
                selectedSuggestionIndex = (selectedSuggestionIndex - 1 + items.length) % items.length;
            }

            items[selectedSuggestionIndex].classList.add('selected');
            items[selectedSuggestionIndex].scrollIntoView({ block: 'nearest' });
            userInput.value = items[selectedSuggestionIndex].textContent; 
            userInput.style.height = 'auto'; 
            userInput.style.height = userInput.scrollHeight + 'px';
            updateSendButtonState(); // Update button state after suggestion is navigated
        }

        function selectCurrentSuggestion() {
            if (selectedSuggestionIndex !== -1) {
                const selectedText = suggestionsList.children[selectedSuggestionIndex].textContent;
                userInput.value = selectedText;
            }
            suggestionsContainer.classList.add('hidden');
            selectedSuggestionIndex = -1;
            updateSendButtonState(); // Update button state after suggestion is selected
        }

        // --- Chat History Management ---
        function saveCurrentChat() {
            if (conversationHistory.length > 0) {
                localStorage.setItem(CURRENT_CHAT_STORAGE_KEY, JSON.stringify(conversationHistory));
            } else {
                // If the chat is empty (e.g., brand new chat), ensure no empty data is saved
                localStorage.removeItem(CURRENT_CHAT_STORAGE_KEY);
            }
        }

        // --- New Chat Function ---
        function startNewChat() {
            // Step 1: Immediately clear the *current* chat from local storage.
            // The previous content is now effectively "lost" unless exported.
            localStorage.removeItem(CURRENT_CHAT_STORAGE_KEY);

            // Stop any ongoing speech or AI generation
            if (window.speechSynthesis.speaking) {
                window.speechSynthesis.cancel();
                isSpeaking = false;
                currentUtterance = null;
                document.querySelectorAll('.dictate-message-btn').forEach(btn => updateButtonIcon(btn, 'volume-2'));
            }
            if (isGeneratingResponse) {
                isGeneratingResponse = false;
                clearInterval(currentTypingInterval);
                currentTypingInterval = null;
                toggleLoading(false);
            }

            // Step 2: Reset UI and in-memory history for a new chat
            chatHistoryDiv.innerHTML = '';
            conversationHistory = []; // Reset history to empty
            chatAttachments = [];
            chatImageUpload.value = '';
            displayChatAttachments();
            userInput.value = '';
            userInput.style.height = 'auto';
            messageTextCache.clear();
            suggestionsContainer.classList.add('hidden');
            selectedSuggestionIndex = -1;
            userInput.dataset.editingMessageId = '';
            updateSendButtonState(); // Update button state for new chat

            // Step 3: Append the initial AI message for the new chat
            const initialAiMessageId = `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
            const { messageContentDiv: initialAiContentDiv, messageDiv: initialAiMessageDiv } = appendChatMessage('ai', initialAIMessage.parts[0].text, [], initialAiMessageId);
            conversationHistory.push({ ...initialAIMessage, id: initialAiMessageId }); // Add to the *new* history

            // For the initial message, it always renders instantly
            initialAiContentDiv.innerHTML = marked.parse(initialAIMessage.parts[0].text);
            if (typeof Prism !== 'undefined') {
                requestAnimationFrame(() => {
                    Prism.highlightAllUnder(initialAiMessageDiv);
                });
            }

            if (window.innerWidth <= 768) {
                chatSidebar.classList.remove('active-mobile-sidebar');
                mobileToggleSidebarBtn.style.display = 'flex';
            }

            userInput.focus();
        }

        // --- Export Functions ---
        function getFormattedChatHistoryTextForExport() {
            let text = '';
            conversationHistory.forEach(msg => {
                let msgText = '';
                msg.parts.forEach(part => {
                    if (part.text) {
                        msgText += part.text;
                    }
                    // For attachments, just indicate their presence. Full content not included in text export.
                    if (part.inlineData) {
                        msgText += ` [Attachment: ${part.inlineData.name || part.inlineData.mimeType}]`;
                    }
                });
                text += `${msg.role.toUpperCase()}:\n${msgText}\n\n`;
            });
            return text;
        }

        // NEW: Export as Markdown (.md)
        function exportAsMd() {
            if (conversationHistory.length === 0) {
                alert("No chat history to export.");
                return;
            }
            let markdownContent = `# Mystic Vision AI Chat History\n\n`;
            markdownContent += `*Export Date: ${new Date().toLocaleString()}*\n\n---\n\n`;

            conversationHistory.forEach(msg => {
                markdownContent += `## ${msg.role === 'user' ? 'You' : 'Mystic Vision'}\n\n`;
                msg.parts.forEach(part => {
                    if (part.text) {
                        markdownContent += `${part.text}\n\n`;
                    }
                    if (part.inlineData) {
                        // For image attachments, provide a placeholder markdown syntax
                        if (part.inlineData.mimeType.startsWith('image/')) {
                            markdownContent += `![Attachment: ${part.inlineData.name || 'Image'}](${part.inlineData.mimeType};base64,${part.inlineData.data})\n\n`;
                        } else {
                            // For other file types, just list them
                            markdownContent += `[File Attachment: ${part.inlineData.name || part.inlineData.mimeType}]\n\n`;
                        }
                    }
                });
                markdownContent += `---\n\n`; // Separator between messages
            });

            const blob = new Blob([markdownContent], { type: 'text/markdown;charset=utf-8' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `MysticVision_Chat_${new Date().toISOString().slice(0, 10)}.md`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);
            alert('Chat exported as Markdown (.md)!');
        }

        function exportAsTxt() {
            if (conversationHistory.length === 0) {
                alert("No chat history to export.");
                return;
            }
            const textContent = getFormattedChatHistoryTextForExport();
            const blob = new Blob([textContent], { type: 'text/plain;charset=utf-8' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `MysticVision_Chat_${new Date().toISOString().slice(0, 10)}.txt`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);
            alert('Chat exported as TXT!');
        }

        async function exportAsPdf() {
            if (conversationHistory.length === 0) {
                alert("No chat history to export.");
                return;
            }
            // jsPDF library needs to be loaded via CDN in HTML head
            if (typeof jspdf === 'undefined') {
                alert('PDF export library (jsPDF) not loaded. Please ensure internet connection or check CDN.');
                console.error("jsPDF not loaded. Add <script src='https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js'><script> to your HTML header.");
                return;
            }
            const { jsPDF } = jspdf;
            const doc = new jsPDF();

            const title = `Mystic Vision AI Chat History - ${new Date().toLocaleString()}`;
            const textContent = getFormattedChatHistoryTextForExport();
            const lines = doc.splitTextToSize(textContent, 180); // Max width of 180mm for text

            let y = 15; // Starting Y position, leave some margin
            const lineHeight = 7; // Approx line height for 12pt font
            const pageHeight = doc.internal.pageSize.height;
            const pageWidth = doc.internal.pageSize.width;

            doc.setFontSize(14);
            doc.text(title, pageWidth / 2, y, { align: 'center' }); // Centered title
            y += lineHeight * 2;

            doc.setFontSize(10); // Smaller font for chat content
            lines.forEach(line => {
                if (y + lineHeight > pageHeight - 15) { // Check if new page is needed, leave bottom margin
                    doc.addPage();
                    y = 15; // Reset Y for new page
                    doc.setFontSize(12);
                    doc.text(`Chat History (continued)`, pageWidth / 2, y, { align: 'center' });
                    y += lineHeight * 2;
                    doc.setFontSize(10);
                }
                doc.text(line, 10, y); // Left aligned text
                y += lineHeight;
            });

            doc.save(`MysticVision_Chat_${new Date().toISOString().slice(0, 10)}.pdf`);
            alert('Chat exported as PDF!');
        }


        // --- Paste Functionality ---
        async function processPastedFile(file) {
            const allowedTypes = [
                'image/', 'text/', 'application/pdf',
                'application/json', 'text/csv', 'application/xml', 'text/markdown'
            ];
            const isAllowed = allowedTypes.some(type => file.type.startsWith(type)) || file.name.endsWith('.md');

            if (isAllowed) {
                if (file.size > 10 * 1024 * 1024) { 
                    alert(`File "${file.name}" is too large (>10MB). Max 10MB per file.`);
                    return;
                }
                try {
                    const { mimeType, data } = await fileToBase64(file);
                    chatAttachments.push({ file, mimeType, data, name: file.name });
                } catch (error) {
                    alert(`Failed to read pasted file ${file.name}.`);
                    console.error('Pasted file read error:', error);
                }
            } else {
                alert(`Pasted file type not supported: "${file.name}" (${file.type}).`);
            }
        }

        // NEW: Function to apply theme
        function applyTheme(themeName) {
            // Remove all known theme classes from the body
            THEMES.forEach(theme => {
                document.body.classList.remove(theme);
            });
            // Ensure the old 'light' class is removed if it was manually added before
            document.body.classList.remove('light'); 

            // Add the new selected theme class
            let themeToApply = themeName;
            if (!THEMES.includes(themeName)) {
                // Fallback to default if somehow an invalid theme is passed
                themeToApply = DEFAULT_THEME;
            }
            document.body.classList.add(themeToApply);
            localStorage.setItem('selected-theme', themeToApply); // Save user preference

            // Update the select dropdown to show the current theme
            if (themeSelect) {
                themeSelect.value = themeToApply;
            }
            // Dynamically update the background-image for select dropdown arrow
            // This part is a bit tricky with dynamic CSS variables and needs to be called after theme application
            // A simple way to get current text-color for the SVG arrow:
            // const arrowColor = getComputedStyle(document.documentElement).getPropertyValue('--text-color').substring(1);
            // themeSelect.style.backgroundImage = `url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="%23${arrowColor}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-down"><path d="m6 9 6 6 6-6"/></svg>');`;
        }

        // --- Initialization on Load ---
        window.addEventListener('load', () => {
            // --- Assign DOM Elements after the page is fully loaded ---
            chatbotContainer = document.querySelector('.chatbot-container');
            chatHistoryDiv = document.getElementById('chatHistory');
            userInput = document.getElementById('userInput');
            sendButton = document.getElementById('sendButton');
            themeSelect = document.getElementById('theme-select'); // NEW
            simulateTypingToggle = document.getElementById('simulate-typing-toggle'); // NEW
            copyMessage = document.getElementById('copy-message');
            chatAttachmentsPreviewContainer = document.getElementById('chat-attachments-preview-container');
            chatImageUpload = document.getElementById('chat-image-upload');
            voiceInputBtn = document.getElementById('voice-input-btn');
            suggestionsContainer = document.getElementById('suggestions-container');
            suggestionsList = document.getElementById('suggestions-list');
            // Removed: stopButton from variable declaration
            
            // Sidebar Elements
            chatSidebar = document.getElementById('chatSidebar'); 
            newChatBtnSidebar = document.getElementById('newChatBtn'); 
            toggleSidebarBtn = document.getElementById('toggleSidebarBtn'); 
            mobileToggleSidebarBtn = document.getElementById('mobileToggleSidebarBtn'); 
            chatMainContent = document.querySelector('.chat-main-content');
            // NEW Sidebar Elements
            modelSelect = document.getElementById('model-select');
            systemPromptSelect = document.getElementById('systemPromptSelect'); // Renamed
            clearSystemPromptBtn = document.getElementById('clearSystemPromptBtn'); // Renamed
            clearChatBtn = document.getElementById('clearChatBtn');
            exportTxtBtn = document.getElementById('exportTxtBtn');
            exportPdfBtn = document.getElementById('exportPdfBtn');
            exportMdBtn = document.getElementById('exportMdBtn'); // Renamed

            createIcons();
            userInput.style.height = userInput.scrollHeight + 'px';

            // NEW: Initialize Theme based on localStorage or default
            const savedTheme = localStorage.getItem('selected-theme');
            applyTheme(savedTheme || DEFAULT_THEME);

            // NEW: Event listener for Theme Selector
            themeSelect.addEventListener('change', (event) => {
                const selectedTheme = event.target.value;
                applyTheme(selectedTheme);
            });

            // NEW: Initialize Simulate Typing Mode based on localStorage or default
            const savedSimulateTyping = localStorage.getItem('simulate-typing');
            if (savedSimulateTyping !== null) {
                isSimulateTypingEnabled = savedSimulateTyping === 'true';
            } else {
                isSimulateTypingEnabled = true; // Default to true if no saved preference
            }
            simulateTypingToggle.checked = isSimulateTypingEnabled;

            // Initialize Model Selector
            modelSelect.value = currentModel;
            modelSelect.addEventListener('change', (event) => {
                currentModel = event.target.value;
                localStorage.setItem('selected-gemini-model', currentModel);
                console.log(`AI Model set to: ${currentModel}`);
            });

            // Initialize System Prompt (Persona) Select
            systemPromptSelect.value = systemInstruction;
            systemPromptSelect.addEventListener('change', () => {
                systemInstruction = systemPromptSelect.value.trim();
                localStorage.setItem('system-instruction', systemInstruction);
            });
            clearSystemPromptBtn.addEventListener('click', () => {
                systemPromptSelect.value = '';
                systemInstruction = '';
                localStorage.removeItem('system-instruction');
                alert('AI persona cleared for future messages.');
            });

            // Load the current session's chat history on startup
            const storedHistory = localStorage.getItem(CURRENT_CHAT_STORAGE_KEY);
            if (storedHistory) {
                conversationHistory = JSON.parse(storedHistory);
                const aiMessageDivsToHighlight = []; // For Prism.js highlighting
                chatHistoryDiv.innerHTML = ''; // Clear existing UI

                conversationHistory.forEach(msg => {
                    let textContent = '';
                    let attachments = [];
                    msg.parts.forEach(part => {
                        if (part.text) {
                            textContent = part.text;
                        } else if (part.inlineData) {
                            attachments.push({
                                mimeType: part.inlineData.mimeType,
                                data: part.inlineData.data,
                                name: part.inlineData.name || 'Attachment'
                            });
                        }
                    });
                    // Ensure message has an ID for action buttons even if loaded from older saves
                    const msgId = msg.id || `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                    const { messageContentDiv, messageDiv } = appendChatMessage(msg.role, textContent, attachments, msgId);
                    if (!msg.id) msg.id = msgId; // Update history with new ID if missing

                    if (msg.role === 'model') {
                        messageContentDiv.innerHTML = marked.parse(textContent);
                        aiMessageDivsToHighlight.push(messageDiv);
                    }
                });

                if (typeof Prism !== 'undefined') {
                    requestAnimationFrame(() => {
                        aiMessageDivsToHighlight.forEach(div => {
                            Prism.highlightAllUnder(div);
                        });
                    });
                }
                chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
            } else {
                // If no stored history, start a truly new chat with the AI's first message
                startNewChat();
            }

            updateSendButtonState(); // Initial state update for the send button

            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.register('/service-worker.js')
                .then(registration => {
                    console.log('ServiceWorker registered: ', registration);
                })
                .catch(registrationError => {
                    console.log('ServiceWorker registration failed: ', registrationError);
                });
            }

            // --- Speech Recognition Setup ---
            if (SpeechRecognition) {
                recognition = new SpeechRecognition();
                recognition.continuous = true; 
                recognition.interimResults = true; 
                recognition.lang = 'en-US';

                recognition.onstart = () => {
                    isVoiceInputActive = true;
                    voiceInputBtn.classList.add('voice-input-active');
                    updateButtonIcon(voiceInputBtn, 'mic-off', 'w-5 h-5'); 
                    userInput.placeholder = 'Listening... Speak now.';
                    finalTranscript = ''; 
                    userInput.value = ''; 
                    updateSendButtonState(); // Update send button state
                };

                recognition.onresult = (event) => {
                    let interimTranscript = '';
                    for (let i = event.resultIndex; i < event.results.length; ++i) {
                        if (event.results[i].isFinal) {
                            finalTranscript += event.results[i][0].transcript + ' '; 
                        } else {
                            interimTranscript += event.results[i][0].transcript;
                        }
                    }
                    userInput.value = finalTranscript + interimTranscript; 
                    userInput.scrollLeft = userInput.scrollWidth; 
                    userInput.style.height = 'auto'; 
                    userInput.style.height = userInput.scrollHeight + 'px';
                    updateSendButtonState(); // Update send button state as user types
                };

                recognition.onend = () => {
                    isVoiceInputActive = false;
                    voiceInputBtn.classList.remove('voice-input-active');
                    updateButtonIcon(voiceInputBtn, 'mic', 'w-5 h-5'); 
                    userInput.placeholder = 'Type your message...';

                    if (finalTranscript.trim() !== '') {
                        userInput.value = finalTranscript.trim(); 
                    } else if (userInput.value.trim() === '') {
                        userInput.value = ''; 
                    }
                    userInput.style.height = 'auto'; 
                    userInput.style.height = userInput.scrollHeight + 'px';
                    updateSendButtonState(); // Final update after recognition ends
                };

                recognition.onerror = (event) => {
                    isVoiceInputActive = false; 
                    voiceInputBtn.classList.remove('voice-input-active');
                    updateButtonIcon(voiceInputBtn, 'mic', 'w-5 h-5'); 
                    userInput.placeholder = 'Type your message...';

                    console.error('Speech recognition error:', event.error);
                    let errorMessage = `Speech recognition error: ${event.error}`;
                    if (event.error === 'not-allowed') {
                        errorMessage = 'Microphone access denied. Please allow microphone access in your browser settings.';
                    } else if (event.error === 'no-speech') {
                        console.log('No speech detected, recognition ended.');
                        if (finalTranscript.trim() === '') { userInput.value = ''; }
                        updateSendButtonState(); // Update button state even on no-speech
                        return; 
                    } else if (event.error === 'network') {
                        errorMessage = 'Speech recognition network error. This often means a firewall, proxy, or browser extension is blocking access to Google\'s speech services. Please try disabling extensions or testing in incognito mode.';
                    }
                    alert(errorMessage); 
                    updateSendButtonState(); // Update button state on error
                };
            } else {
                console.warn('Web Speech API (SpeechRecognition) not supported in this browser. Voice input button will be hidden.');
                voiceInputBtn.style.display = 'none'; 
            }

            // NEW: Event listener for Simulate Typing Toggle
            simulateTypingToggle.addEventListener('change', () => {
                isSimulateTypingEnabled = simulateTypingToggle.checked;
                localStorage.setItem('simulate-typing', isSimulateTypingEnabled);
                
                // If turning off simulation while AI is typing, immediately complete the response
                if (!isSimulateTypingEnabled && isGeneratingResponse) {
                    isGeneratingResponse = false; // Stop the animation loop
                    if (currentTypingInterval) {
                        clearInterval(currentTypingInterval);
                        currentTypingInterval = null;
                    }
                    // Force complete rendering of the last AI message
                    const lastAIMessageDiv = chatHistoryDiv.lastElementChild;
                    if (lastAIMessageDiv && lastAIMessageDiv.classList.contains('ai')) {
                        const messageContentDiv = lastAIMessageDiv.querySelector('.message-content');
                        const messageId = lastAIMessageDiv.dataset.messageId;
                        const fullTextFromCache = messageTextCache.get(messageId);
                        
                        if (messageContentDiv) {
                            messageContentDiv.innerHTML = marked.parse(fullTextFromCache);
                            if (typeof Prism !== 'undefined') {
                                Prism.highlightAllUnder(lastAIMessageDiv); // Highlight the full message div
                            }
                        }
                    }
                    toggleLoading(false); // Hide loading indicator, which also updates the send button
                    saveCurrentChat(); // Save the chat now that it's complete
                }
            });

            userInput.addEventListener('input', () => {
                userInput.style.height = 'auto'; 
                userInput.style.height = userInput.scrollHeight + 'px';

                const query = userInput.value;
                if (query.length > 0) {
                    const suggestions = filterSuggestions(query);
                    displaySuggestions(suggestions);
                } else {
                    suggestionsContainer.classList.add('hidden');
                }
                updateSendButtonState(); // Update button state based on input
            });

            userInput.addEventListener('keydown', (e) => {
                if (suggestionsContainer.classList.contains('hidden')) {
                    if (e.key === 'Enter' && !e.shiftKey) { 
                        e.preventDefault(); 
                        sendButton.click(); 
                    }
                    return;
                }

                if (e.key === 'ArrowDown') {
                    e.preventDefault(); 
                    navigateSuggestions('down');
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault(); 
                    navigateSuggestions('up');
                } else if (e.key === 'Enter') { 
                    e.preventDefault(); 
                    selectCurrentSuggestion();
                } else if (e.key === 'Escape') {
                    suggestionsContainer.classList.add('hidden');
                    selectedSuggestionIndex = -1;
                }
            });

            userInput.addEventListener('blur', () => {
                setTimeout(() => {
                    suggestionsContainer.classList.add('hidden');
                    selectedSuggestionIndex = -1;
                }, 100); 
            });

            userInput.addEventListener('paste', async (e) => {
                const items = e.clipboardData.items;
                let filePasted = false;

                for (let i = 0; i < items.length; i++) {
                    const item = items[i];
                    if (item.kind === 'file') {
                        e.preventDefault(); 
                        const file = item.getAsFile();
                        if (file) {
                            filePasted = true;
                            await processPastedFile(file);
                        }
                    }
                }

                if (filePasted) {
                    displayChatAttachments();
                    userInput.focus();
                    updateSendButtonState(); // Update button state after paste
                }
            });

            sendButton.addEventListener('click', async () => {
                // If AI is currently generating, this click means STOP
                if (isGeneratingResponse) {
                    isGeneratingResponse = false;
                    clearInterval(currentTypingInterval);
                    currentTypingInterval = null;
                    if (window.speechSynthesis.speaking || window.speechSynthesis.paused) {
                        window.speechSynthesis.cancel();
                        isSpeaking = false;
                        currentUtterance = null;
                        document.querySelectorAll('.dictate-message-btn').forEach(btn => updateButtonIcon(btn, 'volume-2'));
                    }
                    // Ensure the currently typing message is fully rendered and highlighted
                    const lastAIMessageDiv = chatHistoryDiv.lastElementChild;
                    if (lastAIMessageDiv && lastAIMessageDiv.classList.contains('ai')) {
                        const messageContentDiv = lastAIMessageDiv.querySelector('.message-content');
                        const messageId = lastAIMessageDiv.dataset.messageId;
                        const fullTextFromCache = messageTextCache.get(messageId);

                        if (messageContentDiv && messageContentDiv.innerHTML.trim() !== '') {
                            messageContentDiv.innerHTML = marked.parse(fullTextFromCache);
                            if (typeof Prism !== 'undefined') {
                                Prism.highlightAllUnder(lastAIMessageDiv);
                            }
                        }
                    }
                    toggleLoading(false); // This will update the button state to 'send'
                    console.log("AI generation stopped by user.");
                    saveCurrentChat();
                    return; // Exit the function after handling stop
                }

                // If not generating, proceed with sending (original send logic)
                const userMessage = userInput.value.trim();
                const editingMessageId = userInput.dataset.editingMessageId;
                const hasInput = userMessage.length > 0 || chatAttachments.length > 0;

                if (!hasInput) {
                    // Optionally, provide visual feedback like a shake or a temporary message
                    console.warn("No input or attachments to send.");
                    // Example: Add a temporary pulse animation or border color change to the input
                    userInput.classList.add('border-accent-error', 'animate-pulse');
                    setTimeout(() => {
                        userInput.classList.remove('border-accent-error', 'animate-pulse');
                    }, 500);
                    return; // Prevent sending an empty message
                }

                // Stop any ongoing speech or voice input (redundant if voice input auto-stops on final, but safe)
                if (isVoiceInputActive && recognition) {
                    recognition.stop();
                }
                if (window.speechSynthesis.speaking) {
                    window.speechSynthesis.cancel();
                    isSpeaking = false;
                    currentUtterance = null;
                    document.querySelectorAll('.dictate-message-btn').forEach(btn => updateButtonIcon(btn, 'volume-2'));
                }

                if (editingMessageId) {
                    const editedText = userMessage;
                    const messageDivToEdit = document.querySelector(`.chat-message[data-message-id="${editingMessageId}"]`);
                    if (messageDivToEdit) {
                        const originalIndex = Array.from(chatHistoryDiv.children).indexOf(messageDivToEdit);
                        if (originalIndex !== -1) {
                            conversationHistory[originalIndex].parts = [];
                            if (editedText) {
                                conversationHistory[originalIndex].parts.push({ text: editedText });
                            }
                            if (chatAttachments.length > 0) {
                                for(const attachment of chatAttachments) {
                                    conversationHistory[originalIndex].parts.push({
                                        inlineData: { mimeType: attachment.mimeType, data: attachment.data }
                                    });
                                }
                            }

                            while (chatHistoryDiv.children.length > originalIndex + 1) {
                                chatHistoryDiv.lastChild.remove();
                                conversationHistory.pop();
                            }

                            const messageBubbleContent = messageDivToEdit.querySelector('.message-bubble-content');
                            if (messageBubbleContent) {
                                const messageContentDiv = messageBubbleContent.querySelector('.message-content');
                                if (messageContentDiv) messageContentDiv.remove();

                                const newMessageContentDiv = document.createElement('div');
                                newMessageContentDiv.classList.add('message-content');
                                newMessageContentDiv.innerHTML = `<span>${editedText}</span>`;

                                if (chatAttachments.length > 0) {
                                    const attachmentsContainer = document.createElement('div');
                                    attachmentsContainer.classList.add('mt-2', 'flex', 'flex-wrap', 'gap-2');
                                    chatAttachments.forEach(attachment => {
                                        if (attachment.mimeType.startsWith('image/')) {
                                            attachmentsContainer.innerHTML += `<img src="data:${attachment.mimeType};base64,${attachment.data}" alt="${attachment.name || 'User attachment'}" class="chat-image w-24 h-24 object-cover">`;
                                        } else {
                                            attachmentsContainer.innerHTML += `
                                                <div class="chat-message-attachment-item">
                                                    <span data-lucide="${getFileIcon(attachment.mimeType)}" class="w-4 h-4 flex-shrink-0"></span>
                                                    <span class="truncate max-w-[120px]">${attachment.name || 'File'}</span>
                                                </div>
                                            `;
                                        }
                                    });
                                    newMessageContentDiv.appendChild(attachmentsContainer);
                                }
                                messageBubbleContent.prepend(newMessageContentDiv);
                                createIcons();
                            }
                            messageTextCache.set(editingMessageId, editedText);
                            messageDivToEdit.classList.remove('editing');
                        }
                    }
                } else {
                    const userParts = [];
                    if (userMessage) {
                        userParts.push({ text: userMessage });
                    }
                    for (const attachment of chatAttachments) {
                        userParts.push({
                            inlineData: {
                                mimeType: attachment.mimeType,
                                data: attachment.data
                            }
                        });
                    }
                    const newUserMessageId = `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                    appendChatMessage('user', userMessage, chatAttachments, newUserMessageId);
                    conversationHistory.push({ role: 'user', parts: userParts, id: newUserMessageId });
                }

                userInput.value = '';
                userInput.style.height = 'auto';
                chatAttachments = [];
                chatImageUpload.value = '';
                displayChatAttachments();
                suggestionsContainer.classList.add('hidden');
                selectedSuggestionIndex = -1;
                delete userInput.dataset.editingMessageId;
                
                toggleLoading(true); // This will set isGeneratingResponse and update button state

                try {
                    const payload = {
                        contents: conversationHistory,
                    };

                    const responseText = await callGeminiAPI(payload);

                    if (isGeneratingResponse) { // Still check if the user hasn't stopped it during API call
                        const newAiMessageId = `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                        const { messageContentDiv: aiContentDiv, messageDiv: aiMessageDiv } = appendChatMessage('ai', responseText, [], newAiMessageId);

                        conversationHistory.push({ role: 'model', parts: [{ text: responseText }], id: newAiMessageId });

                        if (isSimulateTypingEnabled) {
                            simulateTyping(aiContentDiv, responseText);
                        } else {
                            aiContentDiv.innerHTML = marked.parse(responseText);
                            if (typeof Prism !== 'undefined') {
                                Prism.highlightAllUnder(aiMessageDiv);
                            }
                            chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
                            toggleLoading(false);
                            isGeneratingResponse = false;
                            saveCurrentChat();
                        }
                    }
                } catch (error) {
                    console.error('Chat API call failed:', error);
                    appendChatMessage('ai', `Oops! Something went wrong. Please try again. (${error.message})`);
                    toggleLoading(false); // This will update the button state to 'send'
                    isGeneratingResponse = false;
                } 
            });
            
            // Removed: stopButton.addEventListener block

            chatImageUpload.addEventListener('change', async (event) => {
                const files = Array.from(event.target.files);
                if (files.length > 0) {
                    for (const file of files) {
                        const allowedTypes = [
                            'image/', 'text/', 'application/pdf',
                            'application/json', 'text/csv', 'application/xml', 'text/markdown'
                        ];
                        const isAllowed = allowedTypes.some(type => file.type.startsWith(type)) || file.name.endsWith('.md');

                        if (isAllowed) {
                            if (file.size > 10 * 1024 * 1024) { 
                                alert(`File "${file.name}" is too large (>${10}MB). Max 10MB per file.`);
                                continue;
                            }
                            try {
                                const { mimeType, data } = await fileToBase64(file);
                                chatAttachments.push({ file, mimeType, data, name: file.name });
                            } catch (error) {
                                alert(`Failed to read chat file ${file.name}.`);
                                console.error('Chat file read error:', error);
                            }
                        } else {
                            alert(`File type not supported for chat: "${file.name}" (${file.type}).`);
                        }
                    }
                    displayChatAttachments();
                    userInput.focus();
                    updateSendButtonState(); // Update button state after file attachment
                }
                chatImageUpload.value = ''; 
            });

            chatAttachmentsPreviewContainer.addEventListener('click', (event) => {
                const removeBtn = event.target.closest('.remove-attachment-btn');
                if (removeBtn) {
                    const attachmentDiv = removeBtn.closest('[data-index]');
                    if (attachmentDiv) {
                        const index = parseInt(attachmentDiv.dataset.index);
                        chatAttachments.splice(index, 1); 
                        displayChatAttachments(); 
                        userInput.focus();
                        updateSendButtonState(); // Update button state after attachment removal
                    }
                }
            });

            voiceInputBtn.addEventListener('click', () => {
                if (recognition) {
                    if (isVoiceInputActive) {
                        recognition.stop(); 
                    } else {
                        finalTranscript = ''; 
                        recognition.start();
                    }
                } else {
                    alert('Speech recognition is not supported in this browser.');
                }
            });

            chatbotContainer.addEventListener('dragover', (e) => {
                e.preventDefault();
                e.stopPropagation();
                chatbotContainer.classList.add('drag-over-active');
            });

            chatbotContainer.addEventListener('dragleave', (e) => {
                e.preventDefault();
                e.stopPropagation();
                chatbotContainer.classList.remove('drag-over-active');
            });

            chatbotContainer.addEventListener('drop', async (e) => {
                e.preventDefault();
                e.stopPropagation();
                chatbotContainer.classList.remove('drag-over-active');

                const files = Array.from(e.dataTransfer.files);
                if (files.length > 0) {
                    for (const file of files) {
                        const allowedTypes = [
                            'image/', 'text/', 'application/pdf',
                            'application/json', 'text/csv', 'application/xml', 'text/markdown'
                        ];
                        const isAllowed = allowedTypes.some(type => file.type.startsWith(type)) || file.name.endsWith('.md');

                        if (isAllowed) {
                            if (file.size > 10 * 1024 * 1024) { 
                                alert(`File "${file.name}" is too large (>${10}MB). Max 10MB per file.`);
                                continue;
                            }
                            try {
                                const { mimeType, data } = await fileToBase64(file);
                                chatAttachments.push({ file, mimeType, data, name: file.name });
                            } catch (error) {
                                alert(`Failed to read chat file ${file.name}.`);
                                console.error('Chat file read error:', error);
                            }
                        } else {
                            alert(`File type not supported for chat: "${file.name}" (${file.type}).`);
                        }
                    }
                    displayChatAttachments();
                    userInput.focus();
                    updateSendButtonState(); // Update button state after drag/drop
                }
            });
            
            chatHistoryDiv.addEventListener('click', async (event) => { // Made async for API call in regenerate
                const codeCopyButton = event.target.closest('.code-block-copy-button');
                if (codeCopyButton) {
                    const targetId = codeCopyButton.dataset.copyTarget;
                    const codeElement = document.getElementById(targetId);
                    if (codeElement) {
                        const codeToCopy = codeElement.textContent;
                        updateButtonIcon(codeCopyButton, 'check', 'w-4 h-4'); 
                        copyToClipboard(codeToCopy); 
                        setTimeout(() => { 
                            updateButtonIcon(codeCopyButton, 'clipboard', 'w-4 h-4'); 
                        }, 2000);
                        return; 
                    }
                }

                const chatCopyButton = event.target.closest('.copy-message-btn');
                if (chatCopyButton) {
                    const messageId = chatCopyButton.dataset.messageId;
                    const messageContent = messageTextCache.get(messageId); // Get raw text
                    if (messageContent) {
                        updateButtonIcon(chatCopyButton, 'check');
                        copyToClipboard(messageContent); 
                        setTimeout(() => { 
                            updateButtonIcon(chatCopyButton, 'clipboard');
                        }, 2000);
                    } else {
                        alert('Message content not found for copying.');
                    }
                    return; 
                }

                const dictateButton = event.target.closest('.dictate-message-btn');
                if (dictateButton) {
                    const messageId = dictateButton.dataset.messageId;
                    const messageContent = messageTextCache.get(messageId); // Get raw text
                    if (messageContent) {
                        toggleSpeech(messageContent, dictateButton);
                    } else {
                        alert('Message content not found for dictation.');
                    }
                    return; 
                }

                const editButton = event.target.closest('.edit-message-btn');
                if (editButton) {
                    const messageId = editButton.dataset.messageId;
                    const messageDivToEdit = document.querySelector(`.chat-message[data-message-id="${messageId}"]`);
                    
                    if (messageDivToEdit) {
                        const originalIndex = Array.from(chatHistoryDiv.children).indexOf(messageDivToEdit);
                        if (originalIndex !== -1) {
                            const originalMessage = conversationHistory[originalIndex];
                            
                            let originalText = '';
                            let originalAttachments = [];
                            originalMessage.parts.forEach(part => {
                                if (part.text) {
                                    originalText = part.text;
                                } else if (part.inlineData) {
                                    originalAttachments.push({
                                        file: null, 
                                        mimeType: part.inlineData.mimeType,
                                        data: part.inlineData.data,
                                        name: part.inlineData.name || 'Attachment' 
                                    });
                                }
                            });

                            userInput.value = originalText;
                            chatAttachments = originalAttachments; 
                            displayChatAttachments(); 

                            userInput.focus();
                            userInput.style.height = 'auto';
                            userInput.style.height = userInput.scrollHeight + 'px';

                            chatHistoryDiv.querySelectorAll('.chat-message').forEach(msg => msg.classList.remove('editing'));
                            messageDivToEdit.classList.add('editing');

                            userInput.dataset.editingMessageId = messageId;
                            updateButtonIcon(sendButton, 'save', 'w-5 h-5'); // Change icon to 'save' when editing
                            updateSendButtonState(); // Re-enable send button if there's input for saving
                        }
                    }
                    return;
                }

                const regenerateButton = event.target.closest('.regenerate-message-btn');
                if (regenerateButton) {
                    const messageId = regenerateButton.dataset.messageId;
                    const messageDiv = regenerateButton.closest('.chat-message');

                    const aiMessageIndex = Array.from(chatHistoryDiv.children).indexOf(messageDiv);

                    if (aiMessageIndex !== -1) {
                        const aiMsgInHistoryIndex = conversationHistory.findIndex(msg => msg.id === messageId);
                        if (aiMsgInHistoryIndex === -1) {
                            console.error("AI message not found in history for regeneration.");
                            alert("Could not regenerate: message not found in history.");
                            return;
                        }

                        // Slice history *before* this AI message
                        conversationHistory = conversationHistory.slice(0, aiMsgInHistoryIndex);
                        
                        // Remove messages from UI after this AI message (including itself)
                        while (chatHistoryDiv.children.length > aiMessageIndex) {
                            chatHistoryDiv.lastChild.remove();
                        }
                        
                        if (conversationHistory.length > 0) {
                            const lastUserMessage = conversationHistory[conversationHistory.length - 1];
                            if (lastUserMessage.role === 'user' && lastUserMessage.parts) {
                                let userTextForRegen = '';
                                let userAttachmentsForRegen = [];
                                lastUserMessage.parts.forEach(part => {
                                    if (part.text) userTextForRegen = part.text;
                                    if (part.inlineData) userAttachmentsForRegen.push({
                                        mimeType: part.inlineData.mimeType,
                                        data: part.inlineData.data,
                                        name: part.inlineData.name || 'Attachment' 
                                    });
                                });

                                userInput.value = userTextForRegen;
                                chatAttachments = userAttachmentsForRegen; 
                                displayChatAttachments(); 

                                // Directly trigger the API call logic without simulating a click,
                                // and ensure the button state is correctly updated.
                                toggleLoading(true); // Set to loading state immediately
                                // No need to push user message again, it's already in conversationHistory
                                // and we sliced back to it.

                                try {
                                    const payload = {
                                        contents: conversationHistory,
                                    };
                                    const responseText = await callGeminiAPI(payload);

                                    if (isGeneratingResponse) { // Check if not stopped during API call
                                        const newAiMessageId = `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                                        const { messageContentDiv: aiContentDiv, messageDiv: aiMessageDiv } = appendChatMessage('ai', responseText, [], newAiMessageId);
                                        conversationHistory.push({ role: 'model', parts: [{ text: responseText }], id: newAiMessageId });

                                        if (isSimulateTypingEnabled) {
                                            simulateTyping(aiContentDiv, responseText);
                                        } else {
                                            aiContentDiv.innerHTML = marked.parse(responseText);
                                            if (typeof Prism !== 'undefined') {
                                                Prism.highlightAllUnder(aiMessageDiv);
                                            }
                                            chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
                                            toggleLoading(false);
                                            isGeneratingResponse = false;
                                            saveCurrentChat();
                                        }
                                    }
                                } catch (error) {
                                    console.error('Chat API call failed during regeneration:', error);
                                    appendChatMessage('ai', `Oops! Something went wrong during regeneration. Please try again. (${error.message})`);
                                    toggleLoading(false);
                                    isGeneratingResponse = false;
                                }

                                // Clear input area after successful "resend" from regeneration
                                userInput.value = '';
                                userInput.style.height = 'auto';
                                chatAttachments = [];
                                chatImageUpload.value = '';
                                displayChatAttachments();
                                suggestionsContainer.classList.add('hidden');
                                selectedSuggestionIndex = -1;
                                delete userInput.dataset.editingMessageId;
                                updateSendButtonState(); // Ensure button is 'send' and disabled if no new input
                            } else {
                                console.error("Cannot regenerate: Last message in history is not a user message or is malformed.");
                                alert("Could not regenerate. The previous user message was not found or was empty. Starting a new chat.");
                                startNewChat();
                            }
                        } else {
                            alert("Cannot regenerate. No previous user message to base regeneration on. Starting a new chat.");
                            startNewChat();
                        }
                    }
                    return;
                }
            });

            newChatBtnSidebar.addEventListener('click', startNewChat);

            // Clear Current Chat Button Listener
            clearChatBtn.addEventListener('click', () => {
                if (confirm('Are you sure you want to clear the current chat history? This cannot be undone.')) {
                    startNewChat(); // This now clears local storage and restarts the chat
                }
            });

            // Add event listeners for the export buttons
            exportTxtBtn.addEventListener('click', exportAsTxt);
            exportPdfBtn.addEventListener('click', exportAsPdf);
            exportMdBtn.addEventListener('click', exportAsMd); // Updated listener

            mobileToggleSidebarBtn.addEventListener('click', () => {
                chatSidebar.classList.add('active-mobile-sidebar');
                mobileToggleSidebarBtn.style.display = 'none'; 
            });

            toggleSidebarBtn.addEventListener('click', () => {
                chatSidebar.classList.remove('active-mobile-sidebar');
                mobileToggleSidebarBtn.style.display = 'flex'; 
            });

            window.addEventListener('resize', () => {
                const isMobile = window.innerWidth <= 768;
                if (isMobile) {
                    chatSidebar.classList.remove('hidden-sidebar'); // Ensure sidebar isn't hidden by default CSS when on mobile
                    if (chatSidebar.classList.contains('active-mobile-sidebar')) {
                        mobileToggleSidebarBtn.style.display = 'none';
                    } else {
                        mobileToggleSidebarBtn.style.display = 'flex';
                    }
                    toggleSidebarBtn.style.display = 'flex'; 
                } else {
                    chatSidebar.classList.remove('active-mobile-sidebar'); // Hide mobile sidebar if resizing to desktop
                    mobileToggleSidebarBtn.style.display = 'none'; 
                    toggleSidebarBtn.style.display = 'none'; 
                }
                createIcons(); 
            });
        });
    </script>
</body>
</html>

-------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mystic Vision AI Chat (Lite)</title> <!-- Renamed title -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&family=Montserrat:wght@400;600&display=swap" rel="stylesheet">
    <!-- Tailwind CSS CDN for utility classes -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Marked.js CDN for Markdown parsing -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <!-- Lucide Icons for a modern, futuristic feel -->
    <script src="https://cdn.jsdelivr.net/npm/lucide-dynamic@latest/dist/lucide.min.js"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <!-- Prism.js for code syntax highlighting -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-okaidia.min.css" rel="stylesheet" />
    <!-- jsPDF CDN for PDF export -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <!-- PWA Manifest -->
    <link rel="manifest" href="/manifest.json">
    <style>
        /* General Styles - Mystic Vision Theme */
        :root {
            /* Default Cosmic Purple Palette */
            --primary-bg: #0A0A28; /* Even deeper dark blue-purple, almost black */
            --secondary-bg: #15153A; /* Darker purple-blue - container background */
            --tertiary-bg: #22224F; /* Medium dark purple-blue - header/input area/button base */
            --text-color: #E6E6FA; /* Light lavender text for ethereal feel */
            --accent-color: #C070FF; /* Vibrant mystical purple */
            --border-color: #2F2F6A; /* Slightly clearer border */
            --user-bubble: #353570; /* Deeper purple for user */
            --ai-bubble: #1A1A40; /* Slightly different dark purple for AI */
            --input-bg: #0C0C2F; /* Keeps the input field very dark */
            --button-hover-bg: #A040FF; /* Slightly darker accent for hover */
            --shadow-color: rgba(0, 0, 0, 0.6); /* Stronger shadow */
            --code-bg: #0D0D32; /* Code block background */
            --code-text: #F8F8F8; /* Code text color */
            --code-border: #2F2F6A; /* Code border */
            --code-header-bg: #22224F; /* Code header background */
            --code-header-border: #353570; /* Code header border */
            --inline-code-bg: rgba(192, 112, 255, 0.25); /* Inline code background */
            --inline-code-color: var(--accent-color); /* Inline code color */
            --message-action-bg: rgba(10, 10, 26, 0.7); /* Message action background */
            --message-action-user-bg: rgba(53, 53, 112, 0.7); /* Message action background for user messages */
            --message-action-icon: #BEC2D5; /* Lighter icon color */
            --message-action-icon-hover: var(--text-color); /* Message action icon hover color */

            /* Common Accent Colors (for alerts/status) */         
            --accent-error: #ef4444; /* Red for errors */         
            --accent-success: #22c55e; /* Green for success */          

            /* Font Families */         
            --font-family-primary: 'Poppins', sans-serif;         
            --font-family-secondary: 'Montserrat', sans-serif;          

            /* Autocomplete */
            --autocomplete-bg: var(--secondary-bg);
            --autocomplete-border: var(--border-color);
            --autocomplete-text: var(--text-color);
            --autocomplete-hover-bg: var(--tertiary-bg);
            --autocomplete-selected-bg: var(--accent-color);
            --autocomplete-selected-text: white;

            /* Cosmic Animation Colors */
            --cosmic-glow-color-1: #C070FF; /* Vibrant mystical purple */
            --cosmic-glow-color-2: #7B2FEE; /* Deeper mystical purple */
            --cosmic-star-color: #E6E6FA; /* Light lavender for stars */
            --user-avatar-bg: #4A4A80; /* Background for generic user avatar */
            --text-on-accent: #FFFFFF; /* Default text on accent color */
        }

        /* Starlight Lavender Theme */
        body.starlight-lavender { 
            --primary-bg: #F0F4FF; /* Very pale blue-lavender */
            --secondary-bg: #FFFFFF; /* Pure white for container/card background */
            --tertiary-bg: #E0E8FF; /* Pale light blue-purple for header/input area/button base */
            --text-color: #1A0033; /* Very dark purple/black for main text */
            --accent-color: #8C2BFF; /* Slightly richer/darker purple for light mode accent */
            --border-color: #C0C8D8; /* Soft light border */
            --user-bubble: #D8E2FF; /* Light blue-purple, user bubble */
            --ai-bubble: #F0F4FF; /* Even paler lavender, AI bubble */
            --input-bg: #F8F8FD; /* Slightly off-white for input field */
            --button-hover-bg: #B050FF; /* Slightly darker accent for hover in light mode */
            --shadow-color: rgba(0, 0, 0, 0.15); /* Lighter shadow */
            --code-bg: #F5F7FA; /* Lighter background for code in light mode */
            --code-text: #333; /* Code text color */
            --code-border: #D8DCE5; /* Code border */
            --code-header-bg: #E8ECF5; /* Code header background */
            --code-header-border: #D0D4DF; /* Code header border */
            --inline-code-bg: rgba(130, 0, 200, 0.12); /* Inline code background (LM accent with transparency) */
            --inline-code-color: var(--accent-color); /* Inline code color */
            --message-action-bg: rgba(255, 255, 255, 0.8); /* Message action background */
            --message-action-user-bg: rgba(220, 230, 255, 0.8); /* Message action background for user messages */
            --message-action-icon: #666; /* Message action icon color */
            --message-action-icon-hover: var(--text-color); /* Message action icon hover color */

            /* Autocomplete */
            --autocomplete-bg: var(--secondary-bg);
            --autocomplete-border: var(--border-color);
            --autocomplete-text: var(--text-color);
            --autocomplete-hover-bg: var(--tertiary-bg);
            --autocomplete-selected-bg: var(--accent-color);
            --autocomplete-selected-text: white;

            /* Cosmic Animation Colors Light Mode */
            --cosmic-glow-color-1: #8C2BFF; 
            --cosmic-glow-color-2: #6A1DCC;
            --cosmic-star-color: #333;
            --user-avatar-bg: #C0C8D8; /* Lighter background for generic user avatar */
            --text-on-accent: #FFFFFF;
        }

        /* Emerald Galaxy Theme */
        body.emerald-galaxy {
            --primary-bg: #031A20; /* Very dark teal/green-blue */
            --secondary-bg: #0B2B33; /* Darker teal-blue */
            --tertiary-bg: #15454F; /* Medium dark teal */
            --text-color: #E0FFFF; /* Pale aqua/cyan */
            --accent-color: #00FFC0; /* Vibrant emerald green */
            --border-color: #2D6C77; /* Slightly darker teal border */
            --user-bubble: #255C65; /* Darker green-blue bubble */
            --ai-bubble: #0F3A40; /* Even darker green-blue bubble */
            --input-bg: #052028;
            --button-hover-bg: #00D0A0; /* Slightly darker emerald */
            --shadow-color: rgba(0, 0, 0, 0.6);
            --code-bg: #0A252E;
            --code-text: #E0FFFF;
            --code-border: #2D6C77;
            --code-header-bg: #15454F;
            --code-header-border: #255C65;
            --inline-code-bg: rgba(0, 255, 192, 0.2);
            --inline-code-color: var(--accent-color);
            --message-action-bg: rgba(3, 26, 32, 0.7);
            --message-action-user-bg: rgba(37, 92, 101, 0.7);
            --message-action-icon: #BFDFFF;
            --message-action-icon-hover: var(--text-color);
            --user-avatar-bg: #1B3F47;
            --cosmic-glow-color-1: #00FFC0;
            --cosmic-glow-color-2: #00A080; 
            --cosmic-star-color: #E0FFFF;
            --text-on-accent: #000000;
        }

        /* Crimson Nebula Theme */
        body.crimson-nebula {
            --primary-bg: #1A0515; /* Very dark deep red-purple */
            --secondary-bg: #2B0A20; /* Darker red-purple */
            --tertiary-bg: #4F153A; /* Medium dark red-purple */
            --text-color: #FFEFF5; /* Pale pink/red-white */
            --accent-color: #FF4080; /* Vibrant deep rose/magenta */
            --border-color: #772D57; /* Slightly darker border */
            --user-bubble: #5C254F; /* Darker red-purple bubble */
            --ai-bubble: #3A0F2B; /* Even darker red-purple bubble */
            --input-bg: #20051A;
            --button-hover-bg: #FF60A0; /* Slightly brighter accent */
            --shadow-color: rgba(0, 0, 0, 0.6);
            --code-bg: #250A1F;
            --code-text: #FFEFF5;
            --code-border: #772D57;
            --code-header-bg: #4F153A;
            --code-header-border: #5C254F;
            --inline-code-bg: rgba(255, 64, 128, 0.2);
            --inline-code-color: var(--accent-color);
            --message-action-bg: rgba(26, 5, 21, 0.7);
            --message-action-user-bg: rgba(92, 37, 79, 0.7);
            --message-action-icon: #FFE0F0;
            --message-action-icon-hover: var(--text-color);
            --user-avatar-bg: #3F1B35;
            --cosmic-glow-color-1: #FF4080;
            --cosmic-glow-color-2: #FF0060; 
            --cosmic-star-color: #FFEFF5;
            --text-on-accent: #000000;
        }

        /* Golden Aurora Theme */
        body.golden-aurora {
            --primary-bg: #060B12; /* Even deeper, almost black-blue, base of the night sky */
            --secondary-bg: #0F161E; /* Darker blue-grey for main container */
            --tertiary-bg: #1A2533; /* Medium dark blue for header/input/sidebar section backgrounds */
            --text-color: #F8F8F8; /* Crisp off-white for main text for better readability */
            --accent-color: #FFD700; /* Pure, strong gold - keep this as the primary gold focus */
            --border-color: #2F3E50; /* Subtler, deeper blue border */
            --user-bubble: #28374A; /* A rich, slightly muted dark blue for user messages */
            --ai-bubble: #121C27; /* A very dark, muted blue for AI messages, distinct but harmonious */
            --input-bg: #080D14; /* Very dark for input field, blends with primary */
            --button-hover-bg: #FFC000; /* Slightly brighter golden-orange for hover */
            --shadow-color: rgba(0, 0, 0, 0.7); /* Deeper shadows for better separation */
            --code-bg: #0F161E; /* Same as secondary background for code blocks, consistency */
            --code-text: #E0FFFF; /* Pale aqua for code text for good readability on dark background */
            --code-border: #2F3E50; /* Same as main border */
            --code-header-bg: #1A2533; /* Same as tertiary */
            --code-header-border: #28374A; /* Same as user bubble */
            --inline-code-bg: rgba(255, 215, 0, 0.25); /* Slightly more opaque golden glow */
            --inline-code-color: #FFECB3; /* Lighter gold for inline code, stands out more */
            --message-action-bg: rgba(6, 11, 18, 0.7); /* More transparent dark for actions */
            --message-action-user-bg: rgba(40, 55, 74, 0.7); /* More transparent user action background */
            --message-action-icon: #BECDE0; /* Slightly bluer, lighter icon color */
            --message-action-icon-hover: var(--text-color);
            --user-avatar-bg: #2B3D55; /* Slightly desaturated dark blue for generic user avatar */
            /* Cosmic Animation Colors - Focus on golden and complementary warm tones */
            --cosmic-glow-color-1: #FFD700; /* Primary strong gold */
            --cosmic-glow-color-2: #FFA500; /* Complementary vibrant orange for aurora effect */
            --cosmic-star-color: #F8F8F8; /* Bright white for stars */
            --text-on-accent: #000000;
        }
        /* Cosmic Gold Theme (Royal Edition) */
        body.cosmic-gold {
            /* Deeper, more profound blacks */
            --primary-bg: #000000; /* True black of the cosmos */
            --secondary-bg: #0A0A10; /* Very deep dark blue-black */
            --tertiary-bg: #151520; /* Darker charcoal */

            /* Royal Gold & Text on Gold */
            --text-color: #FFFAF0; /* Soft, warm off-white/cream remains */
            --accent-color: #CCAA00; /* A rich, royal gold - less yellow, more profound */
            --text-on-accent: #000000; /* Essential: Black font for elements with gold background */

            /* Borders & Shadows */
            --border-color: #554422; /* Darker bronze/gold to complement the royal accent */
            --shadow-color: rgba(0, 0, 0, 0.8); /* Deeper shadows for more contrast */

            /* Bubbles & Input Fields */
            --user-bubble: #252530; /* Darker charcoal for user messages */
            --ai-bubble: #101018; /* Very dark blue-grey for AI messages, almost black */
            --input-bg: #030305; /* Extremely dark for input, a subtle whisper of difference from true black */

            /* Button Interactions */
            --button-hover-bg: #E0B500; /* A lighter, rich gold for button hover states */

            /* Code Blocks */
            --code-bg: #08080B; /* Darker code background */
            --code-text: var(--text-color);
            --code-border: var(--border-color);
            --code-header-bg: var(--tertiary-bg);
            --code-header-border: var(--user-bubble);

            /* Inline Code - Now with black text on royal gold */
            --inline-code-bg: var(--accent-color); /* Solid royal gold background */
            --inline-code-color: var(--text-on-accent); /* Black text on the gold */

            /* Message Actions */
            --message-action-bg: rgba(0, 0, 0, 0.7); /* Adjusted to new primary background */
            --message-action-user-bg: rgba(25, 25, 30, 0.7); /* Adjusted to new user bubble background */
            --message-action-icon: #C0C0C0;
            --message-action-icon-hover: var(--text-color);

            /* Avatars & Cosmic Glows */
            --user-avatar-bg: #222222; /* Darker grey for generic user avatar */
            --cosmic-glow-color-1: #CCAA00; /* Uses the new royal gold for glow */
            --cosmic-glow-color-2: #D08000; /* Slightly more burnt orange for the secondary glow */
            --cosmic-star-color: var(--text-color);
        }

        /* Neon Glitch Theme */
        body.neon-glitch {
            --primary-bg: #02010A; /* Very dark blue-black */
            --secondary-bg: #0F0A20; /* Dark blue-purple */
            --tertiary-bg: #1A1030; /* Deeper purple */
            --text-color: #E0FFFF; /* Electric light blue */
            --accent-color: #00E0FF; /* Bright cyan/aqua neon */
            --border-color: #2A1F45; /* Darker purple-blue */
            --user-bubble: #301A50; /* Deep purple for user */
            --ai-bubble: #15082A; /* Even darker purple for AI */
            --input-bg: #0A0515;
            --button-hover-bg: #00B0CC; /* Slightly darker neon */
            --shadow-color: rgba(0, 0, 0, 0.7);
            --code-bg: #080415;
            --code-text: #B0FFFF;
            --code-border: #2A1F45;
            --code-header-bg: #1A1030;
            --code-header-border: #301A50;
            --inline-code-bg: rgba(0, 224, 255, 0.25);
            --inline-code-color: var(--accent-color);
            --message-action-bg: rgba(2, 1, 10, 0.7);
            --message-action-user-bg: rgba(48, 26, 80, 0.7);
            --message-action-icon: #B0FFFF;
            --message-action-icon-hover: #E0FFFF;
            --user-avatar-bg: #20103A;
            --cosmic-glow-color-1: #00E0FF; /* Neon blue glow */
            --cosmic-glow-color-2: #FF00FF; /* Neon pink glow */
            --cosmic-star-color: #E0FFFF;
            --text-on-accent: #000000;
        }

        /* Ancient Papyrus Theme */
        body.ancient-papyrus {
            --primary-bg: #FDF6E3; /* Light cream/parchment background */
            --secondary-bg: #FFF8EB; /* Whiter cream for containers */
            --tertiary-bg: #E8E0C9; /* Slightly darker cream for headers/inputs */
            --text-color: #4A3A2B; /* Dark brown/sepia text */
            --accent-color: #A0522D; /* Earthy terracotta/sienna */
            --border-color: #D3C7B0; /* Muted brown border */
            --user-bubble: #F0E8D7; /* Light tan user bubble */
            --ai-bubble: #FCF5E0; /* Very pale cream AI bubble */
            --input-bg: #FBF4E0;
            --button-hover-bg: #8B4513; /* Darker earthy brown */
            --shadow-color: rgba(0, 0, 0, 0.1); /* Very light shadow */
            --code-bg: #E8E0C9;
            --code-text: #4A3A2B;
            --code-border: #D3C7B0;
            --code-header-bg: #DCCFA7;
            --code-header-border: #C8B99D;
            --inline-code-bg: rgba(160, 82, 45, 0.1);
            --inline-code-color: var(--accent-color);
            --message-action-bg: rgba(255, 255, 255, 0.7);
            --message-action-user-bg: rgba(240, 232, 215, 0.7);
            --message-action-icon: #666;
            --message-action-icon-hover: var(--text-color);
            --user-avatar-bg: #B0A080;
            --cosmic-glow-color-1: #D2B48C; /* Tan/parchment glow */
            --cosmic-glow-color-2: #B8860B; /* Golden brown glow */
            --cosmic-star-color: #4A3A2B; /* Dark specks as 'stars' */
            --text-on-accent: #FFFFFF;
        }


        /* Base Body Styles - Cosmic Overlay */
        body {
            font-family: var(--font-family-primary);
            background: linear-gradient(135deg, var(--primary-bg), var(--secondary-bg));
            color: var(--text-color);
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            overflow: hidden; 
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            transition: background 0.6s ease, color 0.6s ease;
            position: relative; /* Needed for cosmic background pseudo-element */
        }
        /* Cosmic Body Background */
        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            /* Subtle nebula effect with radial gradients */
            background: radial-gradient(circle at 15% 50%, var(--cosmic-glow-color-1) 0%, transparent 40%),
                        radial-gradient(circle at 85% 20%, var(--cosmic-glow-color-2) 0%, transparent 35%),
                        radial-gradient(circle at 40% 90%, var(--cosmic-glow-color-1) 0%, transparent 30%);
            background-size: 200% 200%; /* Make gradients larger to animate */
            animation: cosmicNebula 20s infinite alternate ease-in-out;
            z-index: -1; /* Behind everything */
            pointer-events: none; /* Don't block clicks */
            transition: background 0.6s ease;
        }

        @keyframes cosmicNebula {
            0% { background-position: 0% 0%; }
            100% { background-position: 100% 100%; }
        }

        /* Chatbot Container (Main Application) */
        .chatbot-container {
            background-color: var(--secondary-bg);
            border-radius: 25px;
            box-shadow: 0 15px 30px var(--shadow-color);
            width: 90%;
            max-width: 700px; 
            height: 90vh; 
            display: flex;
            overflow: hidden;
            border: 2px solid var(--border-color);
            animation: fadeIn 0.8s ease-out;
            position: relative; 
            transition: background-color 0.6s ease, border-color 0.6s ease, box-shadow 0.6s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Chat Sidebar */
        .chat-sidebar {
            width: 280px; /* Default open width for desktop */
            flex-shrink: 0; /* Prevents sidebar from shrinking */
            background-color: var(--tertiary-bg);
            border-right: 1px solid var(--border-color);
            display: flex;
            flex-direction: column;
            padding: 20px 15px;
            transition: width 0.3s ease-in-out, transform 0.3s ease-in-out, background-color 0.6s ease, border-color 0.6s ease;
            z-index: 20; /* Ensure sidebar is above main content if needed */
            box-shadow: 2px 0 10px rgba(0,0,0,0.3); /* Subtle shadow */
            overflow-y: auto; /* Enable scrolling for sidebar content */
        }
        .chat-sidebar::-webkit-scrollbar {
            width: 6px;
        }
        .chat-sidebar::-webkit-scrollbar-track {
            background: var(--primary-bg); 
            border-radius: 10px;
        }
        .chat-sidebar::-webkit-scrollbar-thumb {
            background-color: var(--accent-color); 
            border-radius: 10px;
            border: 1px solid var(--primary-bg); 
        }

        .chat-sidebar .sidebar-header {
            display: flex;
            flex-wrap: wrap; /* Allows items to wrap if space is constrained */
            align-items: center;
            justify-content: space-between; /* Pushes items to ends */
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--border-color);
        }
        .chat-sidebar .sidebar-header h3 {
            margin: 0 10px; /* Adjust margin for spacing from buttons */
            flex-grow: 1; /* Allows title to take available space */
            text-align: center; /* Center the title visually */
            color: var(--accent-color);
            font-family: var(--font-family-secondary);
            font-size: 1.2em;
        }

        /* New Chat Button (now within sidebar) */
        #newChatBtn {
            position: static; /* No longer absolutely positioned */
            margin-right: 0; /* Remove old margin to let justify-content handle spacing */
            background-color: var(--accent-color);
            color: var(--text-on-accent);
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.8em;
            font-family: var(--font-family-primary);
            font-weight: 600;
            cursor: pointer;
            border: none;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: background-color 0.3s ease, transform 0.2s ease, color 0.6s ease;
            z-index: 3; 
            display: flex;
            align-items: center;
            gap: 4px;
        }
        #newChatBtn:hover {
            background-color: var(--button-hover-bg);
            transform: translateY(-1px);
        }
        #newChatBtn:active {
            transform: translateY(0);
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        }
        #newChatBtn .lucide {
            width: 0.9em;
            height: 0.9em;
        }

        /* Toggle Sidebar Button (inside sidebar, 'X' icon for mobile close) */
        #toggleSidebarBtn {
            background: none;
            border: none;
            color: var(--text-color);
            cursor: pointer;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: none; /* Hidden by default, shown on mobile when sidebar open */
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s ease;
        }
        #toggleSidebarBtn:hover {
            background-color: rgba(255,255,255,0.1);
        }

        /* Sidebar Section Styling */
        .sidebar-section {
            margin-bottom: 1rem;
            padding: 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            background-color: var(--secondary-bg);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: background-color 0.6s ease, border-color 0.6s ease, box-shadow 0.6s ease;
        }
        .sidebar-section h4 {
            margin-top: 0;
            margin-bottom: 0.75rem;
            color: var(--accent-color);
            font-family: var(--font-family-secondary);
            font-size: 1.1em;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 0.5rem;
            transition: color 0.6s ease, border-color 0.6s ease;
        }
        /* Style for regular buttons within sidebar sections */
        .sidebar-section button {
            background-color: var(--accent-color); /* Default button color */
            color: var(--text-on-accent);
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-size: 0.9em;
            font-weight: 600;
            cursor: pointer;
            border: none;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: background-color 0.3s ease, transform 0.2s ease, color 0.6s ease;
            display: flex; /* For icons */
            align-items: center;
            justify-content: center;
            gap: 0.5rem; /* Space between text and icon */
        }
        .sidebar-section button:hover {
            background-color: var(--button-hover-bg);
            transform: translateY(-1px);
        }
        .sidebar-section button:active {
            transform: translateY(0);
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        }

        /* Theme Selector Styling */
        .theme-selector-container {
            display: flex;
            flex-direction: column; /* Stack them vertically */
            gap: 8px; /* Space between toggles */
        }
        .theme-selector-container label { 
            color: var(--text-color); 
            transition: color 0.6s ease;
            font-size: 0.8em; /* Smaller text */
            vertical-align: middle;
            line-height: 1; 
        }
        .theme-selector-container select {
            background-color: var(--input-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 0.8em;
            transition: background-color 0.6s ease, color 0.6s ease, border-color 0.6s ease;
            cursor: pointer;
            -webkit-appearance: none; /* Remove default dropdown arrow for custom styling */
            -moz-appearance: none;
            appearance: none;
            background-repeat: no-repeat;
            background-position: right 8px center;
            padding-right: 28px; /* Make space for the custom arrow */
        }
        .theme-selector-container select:hover {
            background-color: var(--secondary-bg);
        }
        /* Dynamic SVG for select arrow */
        .theme-selector-container select[data-arrow-color] {
            background-image: var(--select-arrow-svg, url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-down"><path d="m6 9 6 6 6-6"/></svg>'));
        }

        /* Main Chat Content */
        .chat-main-content {
            flex-grow: 1; /* Takes remaining space */
            display: flex;
            flex-direction: column;
            overflow: hidden; /* Important for chat history scroll */
            transition: width 0.3s ease-in-out;
            border-top-left-radius: 23px; /* Apply to main content for desktop if sidebar is open */
            border-bottom-left-radius: 23px; /* Apply to main content for desktop if sidebar is open */
        }

        /* Header */
        .chatbot-header {
            background-color: var(--tertiary-bg);
            padding: 15px; 
            border-bottom: 2px solid var(--border-color);
            text-align: center;
            border-top-left-radius: 23px; /* Keep radius for main header */
            border-top-right-radius: 23px; /* Keep radius for main header */
            position: relative;
            overflow: hidden;
            z-index: 10; 
            transition: background-color 0.6s ease, border-color 0.6s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0; 
        }
        
        .chatbot-header .header-content {
            position: relative;
            z-index: 2;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
        }

        .chatbot-header h1 {
            margin: 0;
            font-size: 2em; 
            color: var(--accent-color);
            font-family: var(--font-family-secondary);
            font-weight: 600;
            letter-spacing: 1px;
            text-shadow: 0 0 10px var(--cosmic-glow-color-1), 0 0 20px var(--cosmic-glow-color-2);
            transition: color 0.6s ease, text-shadow 0.6s ease;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .chatbot-header .logo {
            height: 2.5em; 
            width: auto;
            object-fit: contain;
            filter: drop-shadow(0 0 5px var(--cosmic-glow-color-1));
            transition: filter 0.6s ease;
        }

        .chatbot-header .tagline {
            font-family: var(--font-family-secondary);
            font-size: 0.9em;
            color: var(--text-color);
            opacity: 0.7;
            margin: 0;
            font-style: italic;
            transition: color 0.6s ease;
        }

        .chatbot-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle at center, var(--cosmic-glow-color-1) 0%, transparent 70%);
            transform: rotate(45deg);
            animation: headerGlow 8s infinite alternate ease-in-out, pulseGlow 4s infinite alternate ease-in-out;
            z-index: 1;
            transition: background 0.6s ease;
        }

        @keyframes headerGlow {
            0% { transform: scale(0.8) rotate(0deg); opacity: 0.6; }
            50% { transform: scale(1.1) rotate(180deg); opacity: 0.8; }
            100% { transform: scale(0.8) rotate(360deg); opacity: 0.6; }
        }
        @keyframes pulseGlow {
            0% { box-shadow: 0 0 15px var(--cosmic-glow-color-1); }
            100% { box-shadow: 0 0 25px var(--cosmic-glow-color-2); }
        }

        /* Mobile Sidebar Toggle (Hamburger icon in main header) */
        #mobileToggleSidebarBtn {
            position: absolute;
            top: 20px; /* Aligns with original newChatBtn */
            left: 20px; /* Aligns with original newChatBtn */
            background-color: var(--tertiary-bg);
            color: var(--text-color);
            padding: 10px;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: none; /* Hidden by default, shown on mobile */
            align-items: center;
            justify-content: center;
            border: none;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: background-color 0.3s ease, transform 0.2s ease;
            z-index: 15; /* Ensure it's above other header elements */
        }
        #mobileToggleSidebarBtn:hover {
            background-color: var(--secondary-bg);
            transform: translateY(-1px);
        }
        #mobileToggleSidebarBtn:active {
            transform: translateY(0);
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        }

        /* NEW: Desktop Sidebar Toggle Button */
        #desktopToggleSidebarBtn {
            position: absolute;
            top: 50%;
            right: 20px; /* Adjust as needed */
            transform: translateY(-50%);
            background-color: var(--tertiary-bg); /* Match header background */
            color: var(--text-color);
            padding: 10px;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: none; /* Hidden by default, shown by media query */
            align-items: center;
            justify-content: center;
            border: none;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: background-color 0.3s ease, transform 0.2s ease, color 0.6s ease;
            z-index: 15; /* Ensure it's above other header elements */
        }
        #desktopToggleSidebarBtn:hover {
            background-color: var(--secondary-bg);
            transform: translateY(-50%) translateY(-1px); /* Keep vertical centering */
        }
        #desktopToggleSidebarBtn:active {
            transform: translateY(-50%) translateY(0);
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        }
        #desktopToggleSidebarBtn .lucide {
            width: 1.25em;
            height: 1.25em;
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            /* ... existing rules ... */
            #mobileToggleSidebarBtn {
                display: flex; /* Show on mobile */
            }
            #toggleSidebarBtn { /* 'X' button inside sidebar */
                display: flex; 
            }
            #desktopToggleSidebarBtn {
                display: none; /* Hide on mobile */
            }

            /* ... existing mobile sidebar/main content adjustments ... */
            .chat-sidebar {
                /* ... existing styles ... */
                width: min(80vw, 320px); /* Reset width for mobile transform */
                padding: 15px; /* Reset padding for mobile */
                overflow-y: auto; /* Ensure scroll on mobile */
            }
        }

        /* Desktop specific styles (min-width: 769px) */
        @media (min-width: 769px) {
            #mobileToggleSidebarBtn {
                display: none; /* Hide hamburger on desktop */
            }
            #toggleSidebarBtn {
                display: none; /* Hide 'X' button on desktop (only needed for mobile sidebar close) */
            }
            /* NEW: Show desktop toggle on desktop */
            #desktopToggleSidebarBtn {
                display: flex; /* Show on desktop */
            }

            /* When sidebar is closed on desktop, main content should have full container radius */
            .chat-main-content.sidebar-hidden {
                border-top-left-radius: 23px;
                border-bottom-left-radius: 23px;
            }
            /* Sidebar is initially open on desktop, so main content starts with no left radius */
            .chat-main-content:not(.sidebar-hidden) {
                border-top-left-radius: 0;
                border-bottom-left-radius: 0;
            }
            /* NEW: Ensure sidebar returns to desktop defaults if resizing from mobile */
            .chat-sidebar {
                position: static; /* No fixed position on desktop */
                transform: translateX(0); /* No transform on desktop */
                box-shadow: 2px 0 10px rgba(0,0,0,0.3); /* Restore shadow on desktop */
                width: 280px; /* Default open width */
                padding: 20px 15px; /* Default padding */
                overflow-y: auto; /* Ensure scrolling */
            }
        }


        /* Chat History */
        .chat-history {
            flex-grow: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 15px;
            scroll-behavior: smooth;
            padding-bottom: 30px; /* Increased padding to give more space from input */
        }

        .chat-history::-webkit-scrollbar {
            width: 8px;
        }

        .chat-history::-webkit-scrollbar-track {
            background: var(--primary-bg); 
            border-radius: 10px;
            transition: background 0.6s ease;
        }

        .chat-history::-webkit-scrollbar-thumb {
            background-color: var(--accent-color); 
            border-radius: 10px;
            border: 2px solid var(--primary-bg); 
            transition: background-color 0.6s ease, border-color 0.6s ease;
        }

        /* Message Bubbles */
        .chat-message {
            max-width: 80%;
            line-height: 1.5;
            word-wrap: break-word;
            animation: cosmicRiseIn 0.5s ease-out; /* NEW: Cosmic Rise In */
            position: relative; 
            font-size: 0.95rem; 
            display: flex; /* Make messages a flex container for avatar */
            align-items: flex-start; /* Align items to the top */
        }
        .chat-message.editing {
            border: 2px dashed var(--accent-color);
            opacity: 0.8;
            box-shadow: 0 0 10px rgba(192, 112, 255, 0.5);
        }

        /* NEW: Cosmic Rise In Animation */
        @keyframes cosmicRiseIn {
            from { opacity: 0; transform: translateY(20px) scale(0.95); }
            to { opacity: 1; transform: translateY(0) scale(1); }
        }

        /* NEW: Avatar Styling */
        .chat-avatar {
            width: 40px; /* Avatar size */
            height: 40px;
            border-radius: 50%; /* Circular avatar */
            object-fit: cover;
            flex-shrink: 0; /* Prevent avatar from shrinking */
            margin: 0 10px; /* Space between avatar and bubble */
            border: 2px solid var(--border-color); /* Subtle border */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
            transition: border-color 0.6s ease, box-shadow 0.6s ease;
        }

        /* NEW: Generic Lucide Avatar Icon Styling */
        .lucide-avatar-icon {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--user-avatar-bg); /* Themed background */
            color: var(--accent-color); /* Accent color for the icon */
            flex-shrink: 0;
            margin: 0 10px;
            border: 2px solid var(--border-color);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
            transition: background-color 0.6s ease, color 0.6s ease, border-color 0.6s ease, box-shadow 0.6s ease;
        }
        .lucide-avatar-icon .lucide {
            width: 1.5em; /* Larger icon inside avatar circle */
            height: 1.5em;
            stroke-width: 1.5; /* Make the icon a bit bolder */
        }

        /* Message Bubble Content Wrapper */
        .message-bubble-content {
            padding: 12px 18px; /* This is where the actual bubble padding goes */
            border-radius: 20px;
            line-height: 1.5;
            word-wrap: break-word;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            flex-grow: 1; /* Allow content to take available space */
            position: relative; /* For actions inside */
            padding-bottom: 2.5rem; /* Ensure space for actions */
            transition: background-color 0.6s ease, color 0.6s ease, background-image 0.6s ease, box-shadow 0.6s ease;
            min-width: 0;
            overflow: auto;
            /* FIX: Ensure minimum height for action buttons */
            min-height: 4.5rem; /* Sufficient height for text + action buttons at the bottom */
        }

        .chat-message.user {
            margin-left: auto; /* Pushes user message to the right */
            flex-direction: row-reverse; /* Avatar on the right for user */
        }
        .chat-message.user .message-bubble-content {
            background-color: var(--user-bubble);
            color: var(--text-color);
            border-bottom-right-radius: 5px; 
            background-image: linear-gradient(to bottom right, var(--user-bubble), color-mix(in srgb, var(--user-bubble) 90%, black 10%)); /* Dynamic darker shade */
        }

        .chat-message.ai {
            margin-right: auto; /* Pushes AI message to the left */
            flex-direction: row; /* Avatar on the left for AI */
        }
        .chat-message.ai .message-bubble-content {
            background-color: var(--ai-bubble);
            color: var(--text-color);
            border-bottom-left-radius: 5px; 
            background-image: linear-gradient(to bottom left, var(--ai-bubble), color-mix(in srgb, var(--ai-bubble) 90%, black 10%)); /* Dynamic darker shade */
        }

        /* Markdown Styling within AI messages */
        .chat-message .message-content {
            padding: 0; 
            margin: 0;
        }
        .chat-message.ai .message-content p,
        .chat-message.ai .message-content ul,
        .chat-message.ai .message-content ol,
        .chat-message.ai .message-content h1,
        .chat-message.ai .message-content h2,
        .chat-message.ai .message-content h3,
        .chat-message.ai .message-content blockquote {
            margin-bottom: 1em;
            transition: color 0.6s ease; /* For changing heading colors */
        }
        .chat-message.ai .message-content h1,
        .chat-message.ai .message-content h2,
        .chat-message.ai .message-content h3 {
            color: var(--accent-color); /* Headings use accent color */
        }

        .chat-message.ai .message-content p:last-child,
        .chat-message.ai .message-content ul:last-child,
        .chat-message.ai .message-content ol:last-child,
        .chat-message.ai .message-content blockquote:last-child {
            margin-bottom: 0;
        }
        .chat-message.ai .message-content ul,
        .chat-message.ai .message-content ol {
            padding-left: 1.5em; 
        }
        .chat-message.ai .message-content li {
            margin-bottom: 0.5em;
        }
        .chat-message.ai .message-content strong {
            font-weight: bold;
            color: var(--accent-color); 
            transition: color 0.6s ease;
        }
        .chat-message.ai .message-content em {
            font-style: italic;
        }
        .chat-message.ai .message-content blockquote {
            border-left: 4px solid var(--accent-color); /* Blockquotes use accent color */
            color: var(--text-color); /* Main text color for readability */
            padding-left: 1em;
            margin-left: 0;
            transition: border-color 0.6s ease, color 0.6s ease;
        }

        /* Code block specific styling */
        .code-block-container {
            background-color: var(--code-bg); 
            color: var(--code-text); 
            border-radius: 0.75rem; 
            margin-top: 1rem;
            margin-bottom: 1rem;
            overflow-y: hidden; 
            border: 1px solid var(--code-border); 
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
            transition: background-color 0.6s ease, color 0.6s ease, border-color 0.6s ease;
        }
        .code-block-container pre {
            margin: 0; 
            padding: 1rem;
            overflow-x: auto; 
            font-family: 'Consolas', 'Fira Code', 'Cascadia Code', monospace; 
            font-size: 0.9em;
            line-height: 1.4;
        }
        .code-block-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: var(--code-header-bg); 
            color: var(--text-color); 
            padding: 0.5rem 1rem;
            border-bottom: 1px solid var(--code-header-border);
            font-size: 0.85em;
            border-top-left-radius: 0.75rem;
            border-top-right-radius: 0.75rem;
            transition: background-color 0.6s ease, color 0.6s ease, border-color 0.6s ease;
        }
        .code-block-copy-button {
            background-color: transparent;
            border: none;
            color: var(--text-color); /* Code header text color */
            cursor: pointer;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            transition: background-color 0.2s ease, color 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.25rem;
            font-size: 0.85em;
        }
        .code-block-copy-button:hover {
            background-color: color-mix(in srgb, var(--code-header-bg) 80%, white 20%); /* Lighter hover based on header */
            color: var(--text-color); 
        }
        /* Inline code */
        .chat-message.ai .message-content code:not(pre > code) {
            background-color: var(--inline-code-bg); 
            border-radius: 0.25rem;
            padding: 0.2em 0.4em;
            font-family: 'Consolas', monospace;
            font-size: 0.9em;
            color: var(--inline-code-color); 
            transition: background-color 0.6s ease, color 0.6s ease;
        }
        /* Links */
        .chat-message.ai .message-content a {
            color: var(--accent-color);
            text-decoration: underline;
            transition: color 0.6s ease;
        }
        .chat-message.ai .message-content a:hover {
            color: var(--button-hover-bg); 
        }

        /* Message Action Buttons (Copy/Dictate/Edit/Regenerate) */
        .message-actions {
            position: absolute; /* Changed to absolute for Lite Version */
            bottom: 0.5rem;
            right: 1rem;
            display: flex;
            gap: 0.5rem;
            padding: 0.25rem 0.5rem;
            border-radius: 0.75rem;
            backdrop-filter: blur(5px);
            transition: opacity 0.3s ease;
            opacity: 0; 
            z-index: 10;
            background-color: var(--message-action-bg);
        }
        /* Make actions visible when the entire message (including avatar) is hovered */
        .chat-message:hover .message-actions {
            opacity: 1; 
        }
        .message-actions button {
            background: none;
            border: none;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 0.375rem;
            transition: background-color 0.2s ease, color 0.2s ease;
            display: flex; 
            align-items: center;
            justify-content: center;
        }
        .message-actions button .lucide { 
            color: var(--message-action-icon); 
            width: 1rem;
            height: 1rem;
            transition: color 0.6s ease;
        }
        .message-actions button:hover .lucide {
            color: var(--message-action-icon-hover); 
        }
        .message-actions button:hover {
            background-color: rgba(255, 255, 255, 0.1); 
        }
        .chat-message.user .message-actions {
            background-color: var(--message-action-user-bg);
        }
        /* Specific attachment preview styling within messages (not the input area ones) */
        .chat-message-attachment-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 0.75rem;
            border-radius: 1rem;
            background-color: var(--tertiary-bg); 
            color: var(--text-color); 
            font-size: 0.875rem;
            box-shadow: 0 1px 2px rgba(0,0,0,0.2);
            transition: background-color 0.6s ease, color 0.6s ease, box-shadow 0.6s ease;
        }

        /* Input Area */
        .chat-input {
            padding: 20px;
            border-top: 2px solid var(--border-color);
            display: flex;
            gap: 10px; 
            align-items: end; 
            background-color: var(--tertiary-bg);
            border-bottom-left-radius: 23px;
            border-bottom-right-radius: 23px;
            position: relative; 
            transition: background-color 0.6s ease, border-color 0.6s ease;
            flex-shrink: 0; 
        }

        .chat-input textarea {
            flex-grow: 1;
            padding: 10px 15px; 
            border: 1px solid var(--border-color);
            border-radius: 25px;
            background-color: var(--input-bg);
            color: var(--text-color);
            font-family: var(--font-family-primary);
            font-size: 1em;
            resize: none;
            outline: none;
            box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.3);
            transition: border-color 0.3s ease, background-color 0.3s ease, color 0.6s ease;
            min-height: 40px; 
            height: auto; 
            overflow-y: hidden; 
        }

        .chat-input textarea:focus {
            border-color: var(--accent-color);
            background-color: color-mix(in srgb, var(--primary-bg) 90%, var(--tertiary-bg) 10%); 
        }

        /* Action buttons in input area (Send, Mic, Paperclip) */
        .chat-input .icon-button { 
            background-color: var(--tertiary-bg); 
            color: var(--text-color);
            border: none;
            border-radius: 50%; 
            width: 48px; 
            height: 48px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease, color 0.6s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2); 
            display: flex; 
            align-items: center;
            justify-content: center;
            flex-shrink: 0; 
        }

        .chat-input .icon-button:hover {
            background-color: var(--secondary-bg); 
            transform: translateY(-1px);
        }
        .chat-input .icon-button:active {
            transform: translateY(0);
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        }
        .chat-input .icon-button .lucide {
            width: 1.25em; 
            height: 1.25em;
        }

        #sendButton {
            background-color: var(--accent-color); 
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3); 
            transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease, opacity 0.3s ease, cursor 0.3s ease;
        }
        #sendButton:hover {
            background-color: var(--button-hover-bg);
            transform: translateY(-2px);
        }
        #sendButton:active {
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        }
        /* Disabled state for the sendButton */
        #sendButton:disabled {
            background-color: var(--tertiary-bg); /* Match other icon buttons or a neutral color */
            cursor: not-allowed;
            opacity: 0.6; /* Indicate disabled state */
            box-shadow: none;
            transform: none;
        }
        #sendButton:disabled .lucide {
            color: var(--border-color); /* Faded icon color */
        }

        /* Loading Indicator - Cosmic Loader */
        .loader-container {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            height: 100%;
        }
        .loader-dot {
            width: 15px; /* Slightly larger */
            height: 15px;
            margin: 0 6px; /* More space */
            background-color: var(--accent-color);
            box-shadow: 0 0 10px var(--accent-color), 0 0 20px rgba(192, 112, 255, 0.5); /* Glow effect */
            border-radius: 50%;
            display: inline-block;
            animation: cosmicBounce 1.8s infinite ease-in-out both; /* Slower, more ethereal bounce */
            transition: background-color 0.6s ease, box-shadow 0.6s ease;
        }
        .loader-dot:nth-child(1) { animation-delay: -0.6s; }
        .loader-dot:nth-child(2) { animation-delay: -0.3s; }
        .loader-dot:nth-child(3) { animation-delay: 0s; }
        
        @keyframes cosmicBounce {
            0%, 100% {
                transform: translateY(0) scale(1);
                opacity: 0.8;
            }
            50% {
                transform: translateY(-10px) scale(1.2); /* Float up and enlarge slightly */
                opacity: 1;
                background-color: var(--cosmic-glow-color-1); /* Change color at peak */
            }
        }
        /* Voice input active state */
        .voice-input-active {
            background-color: var(--accent-error) !important; 
            animation: pulse-red 1s infinite cubic-bezier(0.4, 0, 0.6, 1);
        }
        @keyframes pulse-red {
            0%, 100% { box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7); }
            50% { box-shadow: 0 0 0 10px rgba(239, 68, 68, 0); }
        }

        /* Attachment Preview (in input area) */
        .chat-image {
            max-width: 100%;
            height: auto;
            border-radius: 0.75rem;
            margin-top: 0.5rem;
            display: block;
        }
        #chat-attachments-preview-container {
            background-color: var(--tertiary-bg);
            border-radius: 10px;
            padding: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
            border: 1px solid var(--border-color);
            transition: background-color 0.6s ease, border-color 0.6s ease, box-shadow 0.6s ease;
        }
        .chat-attachment-preview-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 0.75rem;
            border-radius: 1rem;
            background-color: var(--secondary-bg); /* Use secondary for inner items */
            color: var(--text-color); 
            font-size: 0.875rem;
            box-shadow: 0 1px 2px rgba(0,0,0,0.2);
            transition: background-color 0.6s ease, color 0.6s ease, box-shadow 0.6s ease;
        }
        .chat-attachment-preview-item .remove-attachment-btn {
            background: none;
            border: none;
            color: var(--accent-color); 
            cursor: pointer;
            padding: 0.1rem;
            border-radius: 50%;
            transition: background-color 0.2s ease, color 0.6s ease;
        }
        .chat-attachment-preview-item .remove-attachment-btn:hover {
            background-color: rgba(192, 112, 255, 0.2);
        }

        /* Drag and Drop visual feedback for chat window */
        .chatbot-container.drag-over-active {
            border: 2px dashed var(--accent-color);
            box-shadow: 0 0 20px var(--accent-color), 0 0 30px var(--accent-color) inset;
            transition: border-color 0.6s ease, box-shadow 0.6s ease;
        }

        /* Copy Message Toast */
        #copy-message {
            position: fixed;
            bottom: 3rem; 
            left: 50%;
            transform: translateX(-50%);
            padding: 0.75rem 1.5rem;
            background-color: var(--accent-success);
            color: white;
            border-radius: 9999px;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            opacity: 0;
            visibility: hidden;
            transition: all 0.5s ease-in-out;
            z-index: 100;
        }

        #copy-message.show {
            opacity: 1;
            visibility: visible;
        }

        /* Autocomplete Suggestions */
        #suggestions-container {
            position: absolute;
            bottom: 100%; /* Position above the input field */
            left: 0;
            right: 0;
            margin-bottom: 10px; /* Space between input and suggestions */
            background-color: var(--autocomplete-bg);
            border: 1px solid var(--autocomplete-border);
            border-radius: 10px;
            box-shadow: 0 -5px 15px rgba(0,0,0,0.2);
            max-height: 200px;
            overflow-y: auto;
            z-index: 20; /* Ensure it's above other input elements */
            transition: background-color 0.6s ease, border-color 0.6s ease, box-shadow 0.6s ease;
        }
        #suggestions-container ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        #suggestions-container li {
            padding: 10px 15px;
            cursor: pointer;
            color: var(--autocomplete-text);
            transition: background-color 0.2s ease, color 0.6s ease;
        }
        #suggestions-container li:hover,
        #suggestions-container li.selected {
            background-color: var(--autocomplete-hover-bg);
        }
        #suggestions-container li.selected {
            background-color: var(--autocomplete-selected-bg);
            color: var(--autocomplete-selected-text);
        }


        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .chatbot-container {
                width: 95%;
                height: 95vh;
                border-radius: 15px;
            }

            /* Mobile Sidebar */
            .chat-sidebar {
                position: fixed; /* Fixed position for mobile sidebar */
                top: 0;
                left: 0;
                bottom: 0;
                width: min(80vw, 320px); /* Adjust width for mobile, max 320px or 80vw */
                transform: translateX(-100%); /* Hidden by default */
                transition: transform 0.3s ease-in-out;
                box-shadow: none; /* No shadow by default */
                padding: 15px;
                background-color: var(--tertiary-bg); /* Ensure background is set for overlay */
            }
            .chat-sidebar.active-mobile-sidebar {
                transform: translateX(0); /* Show on active */
                box-shadow: 2px 0 10px rgba(0,0,0,0.3); /* Add shadow when open */
            }
            /* Hide main content header's border-radius when sidebar is open */
            .chat-sidebar.active-mobile-sidebar + .chat-main-content .chatbot-header {
                border-top-left-radius: 0;
            }

            .chat-main-content {
                width: 100%; /* Main content always full width on mobile */
                border-top-left-radius: 13px; /* Apply to main content for mobile */
                border-bottom-left-radius: 13px; /* Apply to main content for mobile */
            }

            /* Mobile Header Adjustments */
            .chatbot-header {
                padding: 15px; 
                padding-left: 60px; /* Make space for hamburger */
                justify-content: center; /* Center content when hamburger is present */
                border-top-left-radius: 13px;
                border-top-right-radius: 13px;
            }
            .chatbot-header h1 {
                font-size: 1.8em;
                margin-top: 0; /* Remove top margin */
            }
            .chatbot-header .logo {
                height: 2em;
            }
            .chatbot-header .tagline {
                font-size: 0.8em;
                margin-bottom: 0;
            }

            /* Mobile specific toggle button (hamburger in main header) */
            #mobileToggleSidebarBtn {
                display: flex; /* Show on mobile */
                top: 15px;
                left: 15px;
                width: 40px;
                height: 40px;
            }
            /* Toggle button inside sidebar (X icon) */
            #toggleSidebarBtn {
                display: flex; /* Always show inside sidebar header on mobile */
            }
            
            .theme-selector-container label {
                font-size: 0.7em;
            }
            .theme-selector-container select {
                font-size: 0.7em;
                padding: 3px 6px;
                padding-right: 24px;
                background-position: right 6px center;
                background-size: 16px;
            }

            /* Sidebar New Chat Button (smaller for mobile sidebar) */
            #newChatBtn {
                padding: 5px 9px;
                font-size: 0.65em;
                gap: 3px;
            }
            #newChatBtn .lucide {
                width: 0.6em;
                height: 0.6em;
            }


            /* Chat Message Mobile Adjustments */
            .chat-history {
                padding: 10px;
                gap: 8px;
            }

            .chat-message {
                max-width: 95%; /* Wider bubbles for smaller screens */
            }
            .chat-avatar, .lucide-avatar-icon {
                width: 32px;
                height: 32px;
                margin: 0 6px;
            }
            .lucide-avatar-icon .lucide {
                width: 1.2em;
                height: 1.2em;
            }
            .message-bubble-content {
                padding: 10px 14px;
                padding-bottom: 2rem;
                border-radius: 16px;
                font-size: 0.9rem; /* Slightly larger for readability */
                min-height: 4rem; /* Adjusted for mobile */
            }

            .message-actions {
                bottom: 0.3rem; 
                right: 0.6rem;
                gap: 0.3rem;
                padding: 0.15rem 0.3rem;
                border-radius: 0.5rem;
            }
            .message-actions button {
                padding: 0.1rem;
            }
            .message-actions button .lucide {
                width: 0.8rem;
                height: 0.8rem;
            }

            .chat-input {
                padding: 10px;
                gap: 6px;
                align-items: center;
                border-bottom-left-radius: 13px;
                border-bottom-right-radius: 13px;
                flex-wrap: wrap; /* Allow buttons to wrap */
            }

            .chat-input textarea {
                padding: 8px 12px; 
                font-size: 0.9em;
                min-height: 38px;
                max-height: 120px;
            }

            .chat-input .icon-button {
                width: 42px;
                height: 42px;
            }
            .chat-input .icon-button .lucide {
                width: 1em;
                height: 1em;
            }

            #chat-attachments-preview-container {
                padding: 6px;
                margin-bottom: 8px;
            }
            .chat-attachment-preview-item {
                font-size: 0.75em;
                padding: 0.3rem 0.5rem;
                border-radius: 0.75rem;
            }
            .chat-attachment-preview-item .remove-attachment-btn .lucide {
                width: 0.7rem;
                height: 0.7rem;
            }

            #copy-message {
                bottom: 1.5rem;
                padding: 0.5rem 1rem;
                font-size: 0.85rem;
            }

            #suggestions-container {
                margin-bottom: 8px;
            }
            #suggestions-container li {
                padding: 8px 12px;
                font-size: 0.85em;
            }
        }

        /* Desktop specific styles (min-width: 769px) */
        @media (min-width: 769px) {
            #mobileToggleSidebarBtn {
                display: none; /* Hide hamburger on desktop */
            }
            #toggleSidebarBtn {
                display: none; /* Hide 'X' button on desktop (only needed for mobile sidebar close) */
            }
            /* When sidebar is closed on desktop, main content should have full container radius */
            .chat-main-content.sidebar-hidden {
                border-top-left-radius: 23px;
                border-bottom-left-radius: 23px;
            }
            /* Sidebar is initially open on desktop, so main content starts with no left radius */
            .chat-main-content:not(.sidebar-hidden) {
                border-top-left-radius: 0;
                border-bottom-left-radius: 0;
            }
        }
    </style>
</head>
<body class="antialiased cosmic-purple">
    <div class="chatbot-container">
        <!-- Sidebar -->
        <aside class="chat-sidebar" id="chatSidebar">
            <div class="sidebar-header">
                <button id="newChatBtn" title="Start a New Chat">
                    <span data-lucide="sparkles" class="w-4 h-4"></span>
                    New Chat
                </button>
                <h3 class="font-semibold text-lg">Settings</h3>
                <!-- Button to toggle sidebar visibility on mobile/smaller screens -->
                <button id="toggleSidebarBtn" title="Close Sidebar">
                    <span data-lucide="x" class="w-5 h-5"></span>
                </button>
            </div>

            <!-- Theme Selector -->
            <div class="sidebar-section theme-selector-container">
                <h4 class="font-semibold text-accent-color mb-2">Theme</h4>
                <label for="theme-select" class="font-primary text-sm sr-only">Select Theme:</label>
                <select id="theme-select" class="w-full">
                    <option value="cosmic-purple">Cosmic Purple</option>
                    <option value="starlight-lavender">Starlight Lavender</option>
                    <option value="emerald-galaxy">Emerald Galaxy</option>
                    <option value="crimson-nebula">Crimson Nebula</option>
                    <option value="golden-aurora">Golden Aurora</option>
                    <option value="cosmic-gold">Cosmic Gold</option>
                    <option value="neon-glitch">Neon Glitch</option>
                    <option value="ancient-papyrus">Ancient Papyrus</option>
                </select>
            </div>

            <!-- Export Current Chat Section -->
            <div class="sidebar-section">
                <h4 class="font-semibold text-accent-color mb-2">Export Chat</h4>
                <div class="flex flex-col gap-2">
                    <button id="exportTxtBtn">
                        <span data-lucide="file-text" class="w-4 h-4"></span> Export as TXT
                    </button>
                    <button id="exportPdfBtn">
                        <span data-lucide="file-text" class="w-4 h-4"></span> Export as PDF
                    </button>
                    <button id="exportMdBtn">
                        <span data-lucide="file-code" class="w-4 h-4"></span> Export as MD
                    </button>
                    <button id="exportJsonBtn"> <!-- New JSON Export Button -->
                        <span data-lucide="file-json" class="w-4 h-4"></span> Export as JSON
                    </button>
                </div>
            </div>
            
        </aside>

        <!-- Main Chat Content -->
        <main class="chat-main-content" id="chatMainContent">
            <header class="chatbot-header">
                <!-- Hamburger/Sidebar toggle for mobile. -->
                <button id="mobileToggleSidebarBtn" title="Open Sidebar">
                    <span data-lucide="menu" class="w-5 h-5"></span>
                </button>

                <div class="header-content">
                    <h1>
                        <img src="logo.png" alt="Mystic Vision AI Lite Logo" class="logo"> <!-- Renamed logo alt -->
                        Mystic Vision AI Lite <!-- Renamed H1 title -->
                    </h1>
                    <p class="tagline">Experience the beyond</p>
                </div>

                <!-- NEW: Desktop Sidebar Toggle Button -->
                <button id="desktopToggleSidebarBtn" title="Toggle Sidebar" class="icon-button absolute right-4 top-1/2 -translate-y-1/2">
                    <span data-lucide="chevron-left" class="w-5 h-5"></span>
                </button>
            </header>
            <div class="chat-history" id="chatHistory">
                <!-- Initial AI message will be added by JS -->
            </div>
            <div class="chat-input" id="chatInputArea">
                <!-- Autocomplete Suggestions Container -->
                <div id="suggestions-container" class="hidden">
                    <ul id="suggestions-list"></ul>
                </div>

                <!-- Attachment preview -->
                <div id="chat-attachments-preview-container" class="mb-2 flex flex-wrap items-center gap-2 hidden absolute left-4 right-4" style="bottom: 100%; transform: translateY(-10px);">
                    <!-- Attachments previews will be dynamically added here -->
                </div>

                <!-- Voice Input Button -->
                <button id="voice-input-btn" class="icon-button" aria-label="Voice Input">
                    <span data-lucide="mic" class="w-5 h-5"></span>
                </button>

                <!-- Attach File Button (uses a label to link to the hidden file input) -->
                <label for="chat-image-upload" id="attach-file-btn" class="icon-button cursor-pointer" aria-label="Attach File">
                    <span data-lucide="paperclip" class="w-5 h-5"></span>
                </label>
                <input type="file" id="chat-image-upload" accept="image/*, .txt, .pdf, .csv, .json, .xml, .md" class="hidden" multiple>

                <textarea id="userInput" placeholder="Type your message..." rows="1"></textarea>
                
                <!-- Send/Stop Button (Combined) -->
                <button id="sendButton" class="icon-button">
                    <span data-lucide="send" class="w-5 h-5"></span>
                </button>
            </div>
        </main>
    </div>

    <!-- Temporary message for clipboard copy -->
    <div id="copy-message">Text copied to clipboard!</div>

    <!-- Prism.js components for common languages -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-css.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-markup.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-sql.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-json.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-bash.min.js"></script>
    <!-- Add more Prism.js language components as needed -->

    <script>
        // !! IMPORTANT: REPLACE WITH YOUR ACTUAL GEMINI API KEY !!
        // !! DO NOT USE THIS METHOD IN PRODUCTION. USE A SERVER-SIDE PROXY. !!
        // The key below is a placeholder and WILL NOT WORK.
        const GEMINI_API_KEY = 'AIzaSyCzx6ReMk8ohPJcCjGwHHzu7SvFccJqAbA'; // <--- REPLACE THIS WITH YOUR ACTUAL KEY
        // In the Lite version, the model is fixed, not selectable by the user.
        const DEFAULT_GEMINI_MODEL = 'gemini-2.5-flash-preview-05-20'; 
        const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/${DEFAULT_GEMINI_MODEL}:generateContent?key=${GEMINI_API_KEY}`;

        // --- Global State Variables and Constants ---
        let conversationHistory = []; // Current chat's history (roles & parts)
        const CURRENT_CHAT_STORAGE_KEY = 'mv-lite-current-session-chat'; // Unique key for Lite version
        
        let chatAttachments = []; 
        const messageTextCache = new Map(); // Stores raw text for copy/dictate before Markdown parsing
        let currentUtterance = null;
        let isSpeaking = false;
        let isGeneratingResponse = false; // To control send/stop buttons
        
        let SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        let recognition = null;
        let isVoiceInputActive = false;
        let finalTranscript = ''; 
        let selectedSuggestionIndex = -1;

        const initialAIMessage = {
            role: 'model',
            parts: [{ text: 'Greetings, seeker! I am Mystic Vision AI Lite, designed to help you glimpse the beyond. What wisdom do you seek?' }], // Renamed initial message
        };

        // Avatars
        const USER_AVATAR_ICON = 'user'; 
        const AI_AVATAR_URL = 'logo.png'; 

        const autocompleteSuggestions = [
            // Your extensive list of autocomplete suggestions
            // (Copied from Code 2 to ensure consistency and richness of suggestions)
            "What is the capital of France?",
            "Explain quantum physics simply.",
            "How does a combustion engine work?",
            "Summarize the plot of Hamlet.",
            "What are the benefits of exercise?",
            "Calculate the square root of 144.",
            "Convert 50 miles to kilometers.",
            "Define artificial intelligence.",
            "What is blockchain technology?",
            "Explain the internet.",
            "Tell me about renewable energy.",
            "What are the phases of the moon?",
            "How do volcanoes erupt?",
            "What causes tides?",
            "What is the speed of light?",
            "How does photosynthesis work?",
            "What are the main types of clouds?",
            "Explain the concept of infinity.",
            "What is the difference between AI and machine learning?",
            "How does GPS work?",

            // Creative Writing/Ideas
            "Write a short story about a talking animal.",
            "Compose a poem about the ocean.",
            "Give me five ideas for a fantasy novel.",
            "Write a dialogue between a robot and a human.",
            "Generate a catchy slogan for a coffee shop.",
            "Describe a futuristic city.",
            "Create a character profile for a wizard.",
            "Write a fairy tale with a modern twist.",
            "Brainstorm names for a new tech startup.",
            "Suggest topics for a blog about travel.",
            "Write an exciting opening paragraph for an horrific adventure story.",
            "Compose a haiku about autumn.",
            "Develop a plot for a sci-fi film.",
            "Write a humorous obituary.",
            "Describe a unique alien species.",

            // Programming/Tech Help
            "How to write a 'Hello, World!' program in Python?",
            "Explain asynchronous JavaScript.",
            "What is the best framework for web development?",
            "How to debug a Java application?",
            "Write a SQL query to select all users.",
            "Explain REST APIs.",
            "What is version control?",
            "How do I install Node.js?",
            "Explain recursion in programming.",
            "What are data structures?",
            "How to optimize a website for speed?",
            "Explain object-oriented programming.",
            "Write a simple HTML structure.",
            "What is cloud computing?",
            "How to secure a web application?",

            // Education/Learning
            "How to study effectively for exams?",
            "Tips for learning a new language.",
            "What are good resources for learning history?",
            "How to improve my public speaking skills?",
            "Suggest a good book for beginners in astrophysics.",
            "What are the benefits of lifelong learning?",
            "How to choose a university major?",
            "Explain critical thinking.",
            "What is metacognition?",
            "How to set SMART goals?",

            // Health/Wellness
            "What are the benefits of a balanced diet?",
            "Suggest a simple home workout routine.",
            "How to reduce stress naturally?",
            "What are common symptoms of flu?",
            "Explain the importance of sleep.",
            "Tips for maintaining mental health.",
            "What foods boost immunity?",
            "How to stay hydrated?",
            "What is mindfulness meditation?",
            "How to improve posture?",

            // Food/Cooking
            "Suggest a quick and healthy dinner recipe.",
            "How to bake a perfect chocolate chip cookie?",
            "What are common cooking herbs?",
            "Explain sous-vide cooking.",
            "Recipe for a vegan lasagna.",
            "How to make sourdough bread?",
            "Best way to store fresh produce.",

            // Travel/Culture
            "What are the top 5 tourist attractions in Rome?",
            "Suggest a budget-friendly travel destination.",
            "How to pack efficiently for a trip?",
            "Tell me about Japanese culture.",
            "What are some famous landmarks in India?",
            "Tips for solo travel.",
            "Explain local customs in Thailand.",

            // Self-Improvement/Productivity
            "How to build good habits?",
            "Tips for time management.",
            "How to overcome procrastination?",
            "Suggest ways to boost creativity.",
            "How to practice active listening?",
            "What are methods for conflict resolution?",
            "How to give constructive feedback?",

            // Environment/Sustainability
            "What is climate change?",
            "How to reduce my carbon footprint?",
            "Explain recycling processes.",
            "What is sustainable living?",
            "Tips for conserving water at home.",

            // Philosophical/Existential (keeping some of the original theme)
            "What is the meaning of life?",
            "How can I find inner peace?",
            "What is intuition?",
            "Explain the concept of enlightenment.",
            "What is the purpose of suffering?",
            "How can I connect with my higher self?",
            "What does synchronicity mean?",
            "Tell me about the law of attraction.",
            "How to cultivate compassion?",
            "What is the significance of dreams?",

            // And more... (Extensive additions)
            "Tell me a fun fact.",
            "What's the origin of the phrase 'break a leg'?",
            "Who invented the telephone?",
            "Explain the stock market.",
            "How to manage personal finances?",
            "What are common cybersecurity threats?",
            "Explain the concept of net neutrality.",
            "What is artificial general intelligence?",
            "How does facial recognition work?",
            "Tell me about virtual reality.",
            "What is augmented reality?",
            "Explain ethical AI.",
            "How to start a podcast?",
            "Tips for public speaking.",
            "What is imposter syndrome?",
            "How to build resilience?",
            "Explain the gig economy.",
            "What is CRISPR technology?",
            "How to make compost?",
            "What are the benefits of gardening?",
            "Tell me about Roman history.",
            "Explain the Cold War.",
            "What were the causes of World War II?",
            "Tell me about ancient Egypt.",
            "What is democracy?",
            "Explain socialism.",
            "What are human rights?",
            "How does voting work?",
            "What is diplomacy?",
            "Tell me about different types of governments.",
            "How does inflation affect the economy?",
            "What is GDP?",
            "Explain interest rates.",
            "What is a recession?",
            "How to save for retirement?",
            "What is compound interest?",
            "Tell me about different investment strategies.",
            "How to create a budget?",
            "What is credit score?",
            "Explain mortgages.",
            "What is insurance?",
            "How to write a resume?",
            "Tips for a job interview.",
            "How to negotiate salary?",
            "What are common career paths in tech?",
            "Explain emotional intelligence.",
            "How to build strong relationships?",
            "Tips for effective communication.",
            "How to handle difficult conversations?",
            "What is empathy?",
            "How to resolve conflict in relationships?",
            "Tell me about different personality types.",
            "What is positive psychology?",
            "How to practice self-care?",
            "What are common symptoms of flu?",
            "How to improve focus and concentration?",
            "What is the Pomodoro Technique?",
            "Explain the Eisenhower Matrix.",
            "How to prioritize tasks?",
            "Tips for remote work productivity.",
            "What is digital minimalism?",
            "How to manage screen time?",
            "What are the benefits of digital detox?",
            "Explain the concept of 'flow state'.",
            "How to overcome creative blocks?",
            "What are different learning styles?",
            "Tips for active reading.",
            "How to write an essay?",
            "Explain plagiarism.",
            "What is citation?",
            "How to do research effectively?",
            "What are open educational resources?",
            "Explain the peer review process.",
            "What is gamification in education?",
            "How to teach children about money?",
            "Tips for teaching a new skill.",
            "What is the Socratic method?",
            "Explain experiential learning.",
            "How to foster curiosity?",
            "What is problem-based learning?",
            "Tell me about different teaching philosophies.",
            "How to create engaging presentations?",
            "What are Bloom's Taxonomy levels?",
            "Explain formative assessment.",
            "What is summative assessment?",
            "How to provide effective feedback to students?",
            "Tips for classroom management.",
            "What is differentiated instruction?",
            "How to support students with learning disabilities?",
            "Explain inclusive education.",
            "What is homeschooling?",
            "How to choose the right school?",
            "What are extracurricular activities?",
            "Explain project-based learning.",
            "What is inquiry-based learning?",
            "How to promote critical thinking in students?",
            "What are the benefits of collaborative learning?",
            "How to use technology effectively in education?",
            "Explain blended learning.",
            "What is flipped classroom?",
            "How to assess student performance fairly?",
            "Tips for parent-teacher communication.",
            "What is social-emotional learning?",
            "How to build self-esteem in children?",
            "Explain the growth mindset.",
            "How to encourage creativity in children?",
            "What are different parenting styles?",
            "Tips for dealing with teenage rebellion.",
            "How to foster independence in children?",
            "What is positive reinforcement?",
            "Explain attachment theory.",
            "How to handle sibling rivalry?",
            "Tips for raising resilient children.",
            "What is childhood development?",
            "How to support children's emotional well-being?",
            "Explain the concept of play-based learning.",
            "What are the benefits of outdoor play?",
            "How to choose age-appropriate toys?",
            "What is early childhood education?",
            "Tips for preparing children for kindergarten.",
            "How to teach children to read?",
            "Explain phonics.",
            "What is whole language approach?",
            "How to help children with math?",
            "Tips for science experiments at home.",
            "How to introduce art to children?",
            "What is music education for kids?",
            "How to teach children about nature?",
            "Explain environmental education for kids.",
            "What are the benefits of storytelling for children?",
            "How to encourage imagination in children?",
            "Tips for screen time limits for kids.",
            "What are healthy eating habits for children?",
            "How to deal with picky eaters?",
            "Explain food allergies in children.",
            "How to encourage physical activity in children?",
            "What are developmental milestones?",
            "Tips for potty training.",
            "How to handle temper tantrums?",
            "What is positive discipline?",
            "Explain logical consequences.",
            "How to teach empathy to children?",
            "Tips for teaching generosity.",
            "How to foster gratitude in children?",
            "What is emotional regulation for kids?",
            "How to help children cope with big emotions?",
            "Explain resilience in children.",
            "What are coping mechanisms for kids?",
            "How to build a child's confidence?",
            "Tips for managing sibling relationships.",
            "How to prepare for a new baby?",
            "What is postpartum depression?",
            "How to support a partner after childbirth?",
            "Tips for new parents.",
            "What are common newborn challenges?",
            "How to breastfeed successfully?",
            "Explain bottle feeding.",
            "What is safe sleep for infants?",
            "How to manage infant crying?",
            "Tips for baby soothing techniques.",
            "What is colic?",
            "How to introduce solid foods to babies?",
            "Explain baby-led weaning.",
            "What are common baby illnesses?",
            "How to take a baby's temperature?",
            "Tips for infant first aid.",
            "What is toddler development?",
            "How to handle toddler tantrums?",
            "Explain the 'terrible twos'.",
            "How to encourage speech development in toddlers?",
            "Tips for toilet training toddlers.",
            "What are good toddler activities?",
            "How to promote social skills in toddlers?",
            "Explain parallel play.",
            "What is imaginative play?",
            "How to manage bedtime routines for toddlers?",
            "Tips for dealing with toddler sleep regressions.",
            "What are common toddler fears?",
            "How to ease separation anxiety in toddlers?",
            "Explain positive parenting.",
            "What is gentle parenting?",
            "How to set boundaries with toddlers?",
            "Tips for dealing with toddler biting or hitting.",
            "What is preschool development?",
            "How to prepare a child for preschool?",
            "Explain social skills for preschoolers.",
            "What are good preschool activities?",
            "How to teach preschoolers letters and numbers?",
            "Tips for improving fine motor skills in preschoolers.",
            "What is gross motor skills?",
            "How to encourage independent play in preschoolers?",
            "Explain cooperative play.",
            "What is dramatic play?",
            "How to foster problem-solving skills in preschoolers?",
            "Tips for managing preschooler behavior challenges.",
            "What is kindergarten readiness?",
            "How to support children's transition to school?",
            "Explain school-age development.",
            "What are academic skills for school-age children?",
            "How to help with homework?",
            "Tips for building good study habits.",
            "What are common learning challenges in school-age children?",
            "How to support children with ADHD?",
            "Explain dyslexia.",
            "What are autism spectrum disorders?",
            "How to encourage reading in school-age children?",
            "Tips for developing writing skills.",
            "How to make math fun?",
            "What are benefits of extracurricular activities for school-age children?",
            "How to deal with bullying?",
            "Explain peer pressure.",
            "What is healthy self-esteem in school-age children?",
            "How to teach responsibility to school-age children?",
            "Tips for managing screen time for school-age children?",
            "What is adolescent development?",
            "How to communicate with teenagers?",
            "Explain puberty.",
            "What are common teenage challenges?",
            "How to support teenagers' mental health?",
            "Tips for discussing difficult topics with teenagers.",
            "What is identity formation in adolescence?",
            "How to navigate peer relationships in adolescence?",
            "Explain romantic relationships in adolescence.",
            "What are common teenage stressors?",
            "How to build resilience in teenagers?",
            "Tips for college application process.",
            "What is career exploration for teenagers?",
            "How to teach financial literacy to teenagers?",
            "Explain civic engagement for teenagers.",
            "What are global issues teenagers should know?",
            "How to encourage critical thinking in teenagers?",
            "Tips for managing stress as a teenager.",
            "What are healthy coping mechanisms for teenagers?",
            "How to promote self-advocacy in teenagers?",
            "Explain the concept of consent to teenagers.",
            "What is responsible social media use for teenagers?",
            "How to address cyberbullying?",
            "Tips for safe online interactions for teenagers.",
            "What are warning signs of substance abuse in teenagers?",
            "How to talk to teenagers about sex education?",
            "Explain reproductive health for teenagers.",
            "What are sexually transmitted infections (STIs)?",
            "How to teach healthy relationships to teenagers?",
            "Tips for managing emotions in adolescence.",
            "What is emotional regulation in teenagers?",
            "How to help teenagers develop empathy?",
            "Explain moral development in adolescence.",
            "What is character education for teenagers?",
            "How to encourage volunteering in teenagers?",
            "Tips for building leadership skills in teenagers.",
            "What is entrepreneurship for teenagers?",
            "How to foster innovation in teenagers?",
            "Explain design thinking for teenagers.",
            "What are future job skills?",
            "How to prepare teenagers for the future of work?",
            "Tips for developing a growth mindset in teenagers.",
            "What is neuroplasticity?",
            "How to improve memory?",
            "Explain cognitive biases.",
            "What is decision-making theory?",
            "How to improve problem-solving skills?",
            "Tips for creative thinking techniques.",
            "What is lateral thinking?",
            "How to brainstorm effectively?",
            "Explain mind mapping.",
            "What are logical fallacies?",
            "How to analyze arguments?",
            "Tips for persuasive writing.",
            "What is rhetoric?",
            "How to give a compelling presentation?",
            "Explain nonverbal communication.",
            "What is body language?",
            "How to read facial expressions?",
            "Tips for improving listening skills.",
            "What is active listening?",
            "How to build rapport?",
            "Explain emotional intelligence in leadership.",
            "What is servant leadership?",
            "How to motivate a team?",
            "Tips for conflict resolution in the workplace.",
            "What is negotiation strategy?",
            "How to conduct effective meetings?",
            "Explain project management methodologies.",
            "What is Agile development?",
            "How to manage risk in projects?",
            "Tips for effective delegation.",
            "What is time blocking?",
            "How to use productivity tools?",
            "Explain the 'Getting Things Done' (GTD) method.",
            "What is the 80/20 rule?",
            "How to overcome perfectionism?",
            "Tips for dealing with stress at work.",
            "What is work-life balance?",
            "How to prevent burnout?",
            "Explain mindfulness at work.",
            "What is imposter syndrome in the workplace?",
            "How to build a professional network?",
            "Tips for career advancement.",
            "What is personal branding?",
            "How to write a professional email?",
            "Explain business ethics.",
            "What is corporate social responsibility?",
            "How to build a diverse and inclusive workplace?",
            "Tips for managing remote teams.",
            "What is cybersecurity best practices?",
            "How to protect personal data online?",
            "Explain phishing scams.",
            "What is ransomware?",
            "How to create strong passwords?",
            "Tips for secure browsing.",
            "What is two-factor authentication?",
            "How to use a VPN?",
            "Explain data encryption.",
            "What is cloud security?",
            "How to backup data effectively?",
            "Tips for managing digital privacy.",
            "What is GDPR?",
            "Explain CCPA.",
            "How to identify fake news?",
            "Tips for media literacy.",
            "What is critical thinking about news?",
            "How to verify information online?",
            "Explain logical fallacies in arguments.",
            "What is cognitive bias in decision making?",
            "How to overcome confirmation bias?",
            "Tips for effective communication in a crisis.",
            "What is crisis management?",
            "How to prepare for natural disasters?",
            "Explain first aid basics.",
            "What to do in a fire emergency?",
            "How to perform CPR?",
            "Tips for staying safe online.",
            "What is online etiquette?",
            "How to be a good digital citizen?",
            "Explain responsible AI development.",
            "What are the ethical implications of AI?",
            "How to ensure AI fairness?",
            "Tips for developing trustworthy AI.",
            "What is human-centered AI design?",
            "Explain AI explainability (XAI).",
            "What is value alignment in AI?",
            "How to regulate AI?",
            "Tips for AI policy making.",
            "What is AI governance?",
            "How to promote responsible innovation?",
            "Explain technological singularity.",
            "What is transhumanism?",
            "How to live a minimalist lifestyle?",
            "Tips for decluttering your home.",
            "What are the benefits of minimalism?",
            "How to reduce waste?",
            "Explain composting.",
            "What is upcycling?",
            "How to save energy at home?",
            "Tips for sustainable fashion.",
            "What is ethical consumption?",
            "How to support local businesses?",
            "Explain fair trade.",
            "What is conscious consumerism?",
            "How to reduce plastic use?",
            "Tips for growing your own food.",
            "What are organic farming practices?",
            "Explain permaculture.",
            "What is vertical farming?",
            "How to conserve water in gardening?",
            "Tips for attracting pollinators to your garden.",
            "What are native plants?",
            "How to create a rain garden?",
            "Explain ecological footprint.",
            "What is carbon neutrality?",
            "How to offset carbon emissions?",
            "Tips for renewable energy adoption.",
            "What is solar power?",
            "Explain wind energy.",
            "What are geothermal energy benefits?",
            "How to promote sustainable transportation?",
            "Tips for electric vehicle adoption.",
            "What is public transportation?",
            "How to encourage walking and cycling?",
            "Explain urban planning for sustainability.",
            "What is green building?",
            "How to design energy-efficient homes?",
            "Tips for sustainable waste management.",
            "What is zero-waste living?",
            "How to reduce food waste?",
            "Explain circular economy.",
            "What are challenges of sustainable development?",
            "How to achieve the UN Sustainable Development Goals?",
            "Tips for environmental activism.",
            "What is citizen science?",
            "How to get involved in conservation?",
            "Explain biodiversity loss.",
            "What are endangered species?",
            "How to protect wildlife?",
            "Tips for marine conservation.",
            "What is plastic pollution?",
            "How to clean up oceans?",
            "Explain reforestation efforts.",
            "What are benefits of planting trees?",
            "How to restore wetlands?",
            "Tips for protecting freshwater resources.",
            "What is water scarcity?",
            "How to manage water resources sustainably?",
            "Explain desertification.",
            "What are impacts of deforestation?",
            "How to prevent soil erosion?",
            "Tips for sustainable agriculture.",
            "What is agroforestry?",
            "How to promote regenerative farming?",
            "Explain food security.",
            "What are global hunger issues?",
            "How to ensure equitable food access?",
            "Tips for reducing global poverty.",
            "What is microfinance?",
            "How to support economic development?",
            "Explain social justice.",
            "What are human rights abuses?",
            "How to promote peace and conflict resolution?",
            "Tips for humanitarian aid.",
            "What is disaster relief?",
            "How to support refugees?",
            "Explain global health challenges.",
            "What are pandemics?",
            "How to improve public health?",
            "Tips for disease prevention.",
            "What is universal healthcare?",
            "How to address health disparities?",
            "Explain mental health awareness.",
            "What are common mental health conditions?",
            "How to seek mental health support?",
            "Tips for reducing mental health stigma.",
            "What is cognitive behavioral therapy (CBT)?",
            "Explain dialectical behavior therapy (DBT).",
            "What is psychotherapy?",
            "How to find a good therapist?",
            "Tips for managing anxiety.",
            "What are symptoms of depression?",
            "How to cope with grief?",
            "Explain trauma-informed care.",
            "What is PTSD?",
            "How to support someone with a mental illness?",
            "Tips for self-compassion.",
            "What is positive self-talk?",
            "How to build emotional resilience?",
            "Explain the power of forgiveness.",
            "What is gratitude journaling?",
            "How to practice daily affirmations?",
            "Tips for building a meditation habit.",
            "What are different types of meditation?",
            "How to start a yoga practice?",
            "Explain the benefits of stretching.",
            "What is strength training?",
            "How to improve cardiovascular health?",
            "Tips for a healthy diet.",
            "What are macronutrients?",
            "Explain micronutrients.",
            "What is intermittent fasting?",
            "How to meal prep effectively?",
            "Tips for weight management.",
            "What are signs of healthy eating?",
            "How to overcome emotional eating?",
            "Explain intuitive eating.",
            "What are common food myths?",
            "How to read nutrition labels?",
            "Tips for cooking healthy meals.",
            "What is food safety?",
            "How to prevent foodborne illnesses?",
            "Explain organic vs. conventional food.",
            "What are genetically modified organisms (GMOs)?",
            "How to reduce sugar intake?",
            "Tips for reducing processed foods.",
            "What are healthy snack ideas?",
            "How to stay motivated to exercise?",
            "Explain the benefits of walking.",
            "What is high-intensity interval training (HIIT)?",
            "How to build muscle?",
            "Tips for improving flexibility.",
            "What is functional fitness?",
            "How to prevent sports injuries?",
            "Explain warm-up and cool-down exercises.",
            "What is foam rolling?",
            "How to relieve muscle soreness?",
            "Tips for managing chronic pain.",
            "What are benefits of massage therapy?",
            "Explain acupuncture.",
            "What is chiropractic care?",
            "How to improve sleep hygiene?",
            "Tips for overcoming insomnia.",
            "What are different sleep stages?",
            "How to deal with jet lag?",
            "Explain sleep apnea.",
            "What are benefits of napping?",
            "How to manage shift work sleep disorder?",
            "Tips for creating a relaxing bedtime routine.",
            "What are natural sleep aids?",
            "How to reduce screen time before bed?",
            "Explain the impact of caffeine on sleep.",
            "What are benefits of sunlight exposure?",
            "How to boost vitamin D levels?",
            "Tips for eye health.",
            "What are signs of digital eye strain?",
            "How to protect hearing?",
            "Explain tinnitus.",
            "What are common skin conditions?",
            "How to maintain healthy skin?",
            "Tips for sun protection.",
            "What are signs of skin cancer?",
            "How to manage acne?",
            "Explain eczema.",
            "What is psoriasis?",
            "How to care for hair?",
            "Tips for nail health.",
            "What are signs of dehydration?",
            "How to stay hydrated effectively?",
            "Explain electrolytes.",
            "What are benefits of drinking water?",
            "How to track water intake?",
            "Tips for incorporating more fruits and vegetables.",
            "What are benefits of fiber?",
            "Explain probiotics.",
            "What are prebiotics?",
            "How to improve gut health?",
            "Tips for managing digestive issues.",
            "What is IBS?",
            "Explain Crohn's disease.",
            "What is ulcerative colitis?",
            "How to manage acid reflux?",
            "Tips for a healthy colon.",
            "What are benefits of meditation for digestion?",
            "How to reduce inflammation through diet?",
            "Explain autoimmune diseases.",
            "What is chronic fatigue syndrome?",
            "How to manage fibromyalgia?",
            "Tips for living with diabetes.",
            "What are symptoms of high blood sugar?",
            "How to manage blood pressure?",
            "Explain cholesterol levels.",
            "What are signs of heart attack?",
            "How to prevent stroke?",
            "Tips for bone health.",
            "What is osteoporosis?",
            "How to maintain joint health?",
            "Explain arthritis.",
            "What are benefits of Omega-3 fatty acids?",
            "How to boost brain health?",
            "Tips for preventing cognitive decline.",
            "What are signs of dementia?",
            "How to support brain aging?",
            "Explain neurodegenerative diseases.",
            "What is Parkinson's disease?",
            "How to manage Alzheimer's disease?",
            "Tips for improving memory and focus.",
            "What are brain training exercises?",
            "How to learn new skills to boost brain health?",
            "Explain the benefits of reading for the brain.",
            "What is neurodiversity?",
            "How to support neurodivergent individuals?",
            "Tips for understanding autism spectrum.",
            "What is ADHD management?",
            "How to help someone with dyslexia?",
            "Explain the concept of neurotypical.",
            "What are sensory processing issues?",
            "How to create sensory-friendly environments?",
            "Tips for effective communication with neurodivergent people.",
            "What is social communication disorder?",
            "How to foster inclusivity for all abilities?",
            "Explain universal design.",
            "What are assistive technologies?",
            "How to advocate for disability rights?",
            "Tips for being an ally to marginalized groups.",
            "What is intersectionality?",
            "How to understand privilege?",
            "Explain systemic racism.",
            "What is unconscious bias?",
            "How to challenge discrimination?",
            "Tips for promoting equality.",
            "What is diversity and inclusion (D&I)?",
            "How to build an equitable society?",
            "Explain the role of education in social change.",
            "What are civil rights movements?",
            "How to engage in peaceful protests?",
            "Tips for community organizing.",
            "What is grassroots activism?",
            "How to create social impact?",
            "Explain philanthropy.",
            "What are non-profit organizations?",
            "How to volunteer effectively?",
            "Tips for ethical consumerism.",
            "What is impact investing?",
            "How to support fair trade initiatives?",
            "Explain corporate social responsibility.",
            "What is sustainable business practices?",
            "How to measure social impact?",
            "Tips for ethical leadership.",
            "What is servant leadership?",
            "How to build a purpose-driven organization?",
            "Explain stakeholder capitalism.",
            "What are B Corps?",
            "How to balance profit and purpose?",
            "Tips for social entrepreneurship.",
            "What is disruptive innovation?",
            "How to foster creativity in business?",
            "Explain design thinking for problem-solving.",
            "What are lean startup principles?",
            "How to conduct market research?",
            "Tips for developing a business plan.",
            "What is intellectual property?",
            "How to protect your brand?",
            "Explain trademark and copyright.",
            "What are patents?",
            "How to raise capital for a startup?",
            "Tips for pitching to investors.",
            "What is venture capital?",
            "Explain angel investors.",
            "What are crowdfunding platforms?",
            "How to manage business finances?",
            "Tips for financial forecasting.",
            "What is break-even analysis?",
            "How to optimize cash flow?",
            "Explain profit and loss statements.",
            "What is a balance sheet?",
            "How to interpret financial ratios?",
            "Tips for effective budgeting.",
            "What is risk management in business?",
            "How to create a crisis management plan?",
            "Explain business continuity planning.",
            "What are cybersecurity risks for businesses?",
            "How to protect business data?",
            "Tips for data privacy compliance.",
            "What is GDPR for businesses?",
            "How to build a strong company culture?",
            "Explain employee engagement.",
            "What are performance management strategies?",
            "How to provide constructive feedback to employees?",
            "Tips for conflict resolution in teams?",
            "What is diversity and inclusion in HR?",
            "How to recruit top talent?",
            "Explain onboarding processes.",
            "What are employee benefits?",
            "How to manage employee compensation?",
            "Tips for leadership development.",
            "What is succession planning?",
            "How to foster innovation in the workplace?",
            "Explain change management.",
            "What is organizational development?",
            "How to build a learning organization?",
            "Tips for continuous improvement.",
            "What is Six Sigma?",
            "Explain Lean methodology.",
            "What is Total Quality Management (TQM)?",
            "How to conduct a SWOT analysis?",
            "Tips for strategic planning.",
            "What is competitive analysis?",
            "How to identify market trends?",
            "Explain customer relationship management (CRM).",
            "What are sales strategies?",
            "How to develop a marketing plan?",
            "Tips for digital marketing.",
            "What is content marketing?",
            "Explain SEO best practices.",
            "What is social media marketing?",
            "How to run effective ad campaigns?",
            "Tips for email marketing.",
            "What is influencer marketing?",
            "How to measure marketing ROI?",
            "Explain brand building.",
            "What is brand identity?",
            "How to create a strong brand message?",
            "Tips for public relations.",
            "What is crisis communication?",
            "How to manage a brand's reputation?",
            "Explain customer service excellence.",
            "What are key performance indicators (KPIs)?",
            "How to use data analytics in business?",
            "Tips for business intelligence.",
            "What is big data?",
            "Explain cloud computing for business.",
            "What are enterprise resource planning (ERP) systems?",
            "How to use AI in business operations?",
            "Tips for automation in business.",
            "What is robotic process automation (RPA)?",
            "How to implement machine learning in business?",
            "Explain the Internet of Things (IoT) in industry.",
            "What is Industry 4.0?",
            "How to leverage augmented reality in business?",
            "Tips for virtual reality applications in enterprise.",
            "What is quantum computing?",
            "Explain the future of work.",
            "What are trends in remote work?",
            "How to design hybrid work models?",
            "Tips for fostering collaboration in distributed teams.",
            "What is employee well-being in the workplace?",
            "How to support mental health at work?",
            "Explain stress management for employees.",
            "What is resilience in the workplace?",
            "How to promote a positive work environment?",
            "Tips for building psychological safety at work.",
            "What is inclusive leadership?",
            "How to address unconscious bias in hiring?",
            "Explain diversity recruitment strategies.",
            "What is equity in the workplace?",
            "How to create belonging at work?",
            "Tips for allyship in the workplace.",
            "What is inclusive hiring?",
            "How to reduce bias in recruitment?",
            "Explain fair compensation practices.",
            "What are performance reviews best practices?",
            "How to give constructive feedback effectively?",
            "Tips for managing difficult conversations at work.",
            "What is conflict resolution in teams?",
            "How to build high-performing teams?",
            "Explain team dynamics.",
            "What are leadership styles?",
            "How to choose the right leadership approach?",
            "Tips for motivating diverse teams.",
            "What is servant leadership in practice?",
            "How to empower employees?",
            "Explain delegation techniques.",
            "What are effective meeting strategies?",
            "How to run productive brainstorming sessions?",
            "Tips for decision-making in teams.",
            "What is agile project management?",
            "How to implement Scrum methodology?",
            "Explain Kanban boards.",
            "What are project management software tools?",
            "How to manage project risks?",
            "Tips for stakeholder management.",
            "What is resource allocation in projects?",
            "How to track project progress?",
            "Explain project closure best practices.",
            "What is quality management in projects?",
            "How to conduct post-mortems for projects?",
            "Tips for continuous improvement in operations.",
            "What is Lean Six Sigma?",
            "How to optimize business processes?",
            "Explain supply chain management strategies.",
            "What are logistics and transportation trends?",
            "How to manage inventory effectively?",
            "Tips for warehouse optimization.",
            "What is e-commerce fulfillment?",
            "How to handle returns and reverse logistics?",
            "Explain retail operations management.",
            "What are customer experience (CX) strategies?",
            "How to map the customer journey?",
            "Tips for enhancing customer satisfaction.",
            "What is net promoter score (NPS)?",
            "How to collect customer feedback?",
            "Explain customer service best practices.",
            "What are chatbots for customer support?",
            "How to use AI in customer service?",
            "Tips for personalizing customer interactions.",
            "What is customer relationship management (CRM) software?",
            "How to implement a CRM system?",
            "Explain sales process optimization.",
            "What are B2B sales strategies?",
            "How to cold call effectively?",
            "Tips for lead generation.",
            "What is conversion rate optimization?",
            "How to build a sales funnel?",
            "Explain marketing automation.",
            "What are email marketing best practices?",
            "How to design effective landing pages?",
            "Tips for search engine marketing (SEM).",
            "What is Google Ads?",
            "How to optimize for local SEO?",
            "Explain content strategy for websites.",
            "What are types of blog content?",
            "How to write engaging headlines?",
            "Tips for social media content creation.",
            "What is video marketing?",
            "How to use TikTok for business?",
            "Explain Instagram marketing strategies.",
            "What are LinkedIn marketing best practices?",
            "How to build a brand community online?",
            "Tips for online reputation management.",
            "What is public relations for startups?",
            "How to write a press release?",
            "Explain media relations.",
            "What are crisis communication plans?",
            "How to manage negative online reviews?",
            "Tips for building brand loyalty.",
            "What is experiential marketing?",
            "How to create memorable brand experiences?",
            "Explain cause marketing.",
            "What are corporate partnerships?",
            "How to measure marketing campaign ROI?",
            "Tips for analytics and reporting in marketing.",
            "What is A/B testing?",
            "How to use Google Analytics?",
            "Explain data visualization for marketing insights.",
            "What are market research methods?",
            "How to conduct surveys effectively?",
            "Tips for competitor analysis.",
            "What is market segmentation?",
            "How to identify target audiences?",
            "Explain product development process.",
            "What are stages of the product lifecycle?",
            "How to launch a new product successfully?",
            "Tips for product pricing strategies.",
            "What is product management?",
            "How to work with engineering teams?",
            "Explain user stories and product backlogs.",
            "What are agile product development principles?",
            "How to conduct user acceptance testing (UAT)?",
            "Tips for managing product roadmaps.",
            "What is product market fit?",
            "How to scale a product?",
            "Explain product growth strategies.",
            "What are strategies for product iteration?",
            "How to sunset a product?",
            "Tips for building minimum viable products (MVPs).",
            "What is design thinking in product development?",
            "How to conduct user interviews?",
            "Explain prototyping tools.",
            "What are usability heuristics?",
            "How to perform heuristic evaluation?",
            "Tips for accessibility in design.",
            "What is inclusive design?",
            "How to design for diverse users?",
            "Explain ethical design principles.",
            "What are dark patterns in UX?",
            "How to design for privacy?",
            "Tips for creating user-centered designs.",
            "What is information architecture?",
            "How to organize content for usability?",
            "Explain navigation design.",
            "What are interaction design principles?",
            "How to design intuitive interfaces?",
            "Tips for creating delightful user experiences.",
            "What is animation in UI design?",
            "How to use microinteractions effectively?",
            "Explain haptic feedback in UI.",
            "What are responsive web design principles?",
            "How to design for mobile first?",
            "Tips for cross-browser compatibility.",
            "What is progressive web app (PWA) development?",
            "How to optimize website performance?",
            "Explain critical rendering path.",
            "What are web accessibility standards?",
            "How to make websites accessible for all users?",
            "Tips for search engine optimization (SEO) for designers.",
            "What is Google's Core Web Vitals?",
            "How to improve website SEO?",
            "Explain schema markup.",
            "What are backlinks and link building?",
            "How to conduct keyword research?",
            "Tips for on-page SEO optimization.",
            "What is technical SEO?",
            "How to audit website SEO?",
            "Explain SEO tools.",
            "What are content delivery networks (CDNs)?",
            "How to secure a website?",
            "Tips for preventing cyber attacks.",
            "What is a firewall?",
            "How to use SSL certificates?",
            "Explain data encryption in web security.",
            "What are common web vulnerabilities?",
            "How to prevent SQL injection?",
            "Tips for preventing cross-site scripting (XSS).",
            "What is authentication and authorization?",
            "How to implement secure user logins?",
            "Explain password hashing.",
            "What are API security best practices?",
            "How to secure cloud applications?",
            "Tips for secure coding practices.",
            "What is penetration testing?",
            "How to conduct a security audit?",
            "Explain incident response plans.",
            "What are disaster recovery strategies?",
            "How to perform data backups and recovery?",
            "Tips for business continuity planning.",
            "What is IT governance?",
            "How to manage IT risks?",
            "Explain IT service management (ITSM).",
            "What are ITIL frameworks?",
            "How to manage IT projects?",
            "Tips for IT budgeting.",
            "What is cloud cost management?",
            "How to optimize cloud resources?",
            "Explain serverless computing.",
            "What are containerization technologies like Docker?",
            "How to use Kubernetes for orchestration?",
            "Tips for DevOps practices.",
            "What is continuous integration/continuous delivery (CI/CD)?",
            "How to automate software deployments?",
            "Explain infrastructure as code (IaC).",
            "What are security automation tools?",
            "How to implement DevSecOps?",
            "Tips for site reliability engineering (SRE).",
            "What is observability in software systems?",
            "How to monitor application performance?",
            "Explain logging and tracing.",
            "What are alert management systems?",
            "How to troubleshoot complex systems?",
            "Tips for incident post-mortems.",
            "What is chaos engineering?",
            "How to build resilient systems?",
            "Explain fault tolerance.",
            "What are distributed systems challenges?",
            "How to design scalable architectures?",
            "Tips for microservices architecture.",
            "What is event-driven architecture?",
            "How to use message queues?",
            "Explain data streaming technologies.",
            "What are database design principles?",
            "How to choose the right database?",
            "Tips for NoSQL databases.",
            "What is graph database?",
            "How to optimize database performance?",
            "Explain database security.",
            "What are data warehousing concepts?",
            "How to build a data lake?",
            "Tips for ETL processes.",
            "What is business intelligence dashboards?",
            "How to create interactive reports?",
            "Explain data storytelling.",
            "What are benefits of data governance?",
            "How to ensure data quality?",
            "Tips for data privacy regulations (e.g., CCPA, GDPR).",
            "What is ethical data use?",
            "How to prevent algorithmic bias?",
            "Explain responsible AI development.",
            "What are fairness metrics in machine learning?",
            "How to ensure AI transparency and explainability?",
            "Tips for AI auditing.",
            "What is federated learning?",
            "How to train AI models with privacy preservation?",
            "Explain differential privacy.",
            "What are synthetic data generation methods?",
            "How to secure machine learning models?",
            "Tips for adversarial machine learning.",
            "What is model interpretability?",
            "How to debug machine learning models?",
            "Explain model monitoring and maintenance.",
            "What is MLOps?",
            "How to deploy machine learning models in production?",
            "Tips for versioning machine learning models.",
            "What are machine learning platforms?",
            "How to use cloud AI services?",
            "Explain custom machine learning models.",
            "What are deep neural networks?",
            "How to train convolutional neural networks (CNNs)?",
            "Tips for recurrent neural networks (RNNs).",
            "What are transformers in NLP?",
            "How to fine-tune pre-trained models?",
            "Explain generative adversarial networks (GANs).",
            "What are reinforcement learning applications?",
            "How to build intelligent agents?",
            "Tips for natural language understanding (NLU).",
            "What is natural language generation (NLG)?",
            "How to perform sentiment analysis?",
            "Explain named entity recognition (NER).",
            "What are text summarization techniques?",
            "How to build a chatbot?",
            "Tips for voice assistants development.",
            "What is computer vision in robotics?",
            "How to use object detection models?",
            "Explain image segmentation.",
            "What are facial recognition technologies?",
            "How to apply computer vision in security?",
            "Tips for developing augmented reality (AR) applications.",
            "What is virtual reality (VR) for training?",
            "How to create immersive experiences?",
            "Explain mixed reality (MR).",
            "What are applications of VR/AR in healthcare?",
            "How to use AR for remote assistance?",
            "Tips for developing games with AR/VR.",
            "What is game design theory?",
            "How to create game mechanics?",
            "Explain level design.",
            "What are types of video game genres?",
            "How to monetize games?",
            "Tips for indie game development.",
            "What is game engine development?",
            "How to use Unity for game creation?",
            "Explain Unreal Engine.",
            "What are tools for 3D modeling?",
            "How to animate 3D characters?",
            "Tips for character rigging.",
            "What is texture mapping?",
            "How to optimize game assets?",
            "Explain game physics engines.",
            "What are artificial intelligence in games?",
            "How to design game AI?",
            "Tips for pathfinding algorithms.",
            "What is procedural content generation?",
            "How to implement networking in games?",
            "Explain multiplayer game architectures.",
            "What are security considerations for online games?",
            "How to prevent cheating in games?",
            "Tips for game testing and quality assurance.",
            "What is game localization?",
            "How to market a video game?",
            "Explain esports and competitive gaming.",
            "What are streaming platforms for games?",
            "How to become a professional gamer?",
            "Tips for content creation as a streamer.",
            "What is game development boot camp?",
            "How to learn game programming?",
            "Explain game art and animation courses.",
            "What are sound design principles for games?",
            "How to compose game music?",
            "Tips for writing game narratives.",
            "What is world-building in games?",
            "How to create compelling game characters?",
            "Explain branching narratives in games.",
            "What are interactive storytelling techniques?",
            "How to design puzzle games?",
            "Tips for educational game design.",
            "What is serious games development?",
            "How to use games for training and simulation?",
            "Explain gamification in business.",
            "What are elements of gamification?",
            "How to apply gamification to education?",
            "Tips for designing reward systems.",
            "What is behavioral economics?",
            "How to influence user behavior ethically?",
            "Explain nudges in design.",
            "What are ethical considerations in persuasive design?",
            "How to design for positive habits?",
            "Tips for breaking bad habits.",
            "What is habit formation theory?",
            "How to use triggers, routines, and rewards?",
            "Explain the Fogg Behavior Model.",
            "What is the power of small wins?",
            "How to build self-efficacy?",
            "Tips for setting challenging but achievable goals.",
            "What is deliberate practice?",
            "How to learn from failures?",
            "Explain resilience and grit.",
            "What are characteristics of successful people?",
            "How to develop a growth mindset?",
            "Tips for cultivating emotional intelligence.",
            "What is positive psychology in practice?",
            "How to find your purpose in life?",
            "Explain meaning-making.",
            "What are values-based living principles?",
            "How to align actions with values?",
            "Tips for cultivating gratitude.",
            "What is forgiveness and its benefits?",
            "How to practice self-compassion?",
            "Explain the power of mindfulness.",
            "What are meditation techniques for stress relief?",
            "How to cultivate inner peace?",
            "Tips for managing anxiety and worry.",
            "What is cognitive restructuring?",
            "How to challenge negative thoughts?",
            "Explain behavioral activation.",
            "What are coping skills for depression?",
            "How to build a support system?",
            "Tips for effective communication in relationships.",
            "What is active listening?",
            "How to resolve conflicts constructively?",
            "Explain empathetic responding.",
            "What are healthy boundaries in relationships?",
            "How to build trust and intimacy?",
            "Tips for navigating difficult conversations.",
            "What is nonviolent communication?",
            "How to express needs clearly?",
            "Explain the impact of body language.",
            "What are signs of healthy attachment?",
            "How to heal from relationship trauma?",
            "Tips for self-love and self-respect.",
            "What is emotional regulation?",
            "How to manage strong emotions?",
            "Explain distress tolerance skills.",
            "What are mindfulness-based stress reduction techniques?",
            "How to practice radical acceptance?",
            "Tips for building resilience after trauma.",
            "What is post-traumatic growth?",
            "How to seek professional help for mental health?",
            "Explain different types of therapy.",
            "What are benefits of counseling?",
            "How to find a good therapist?",
            "Tips for medication management for mental health.",
            "What is crisis intervention?",
            "How to support someone in crisis?",
            "Explain suicide prevention strategies.",
            "What are signs of addiction?",
            "How to seek help for substance use disorder?",
            "Tips for recovery and relapse prevention.",
            "What is harm reduction?",
            "How to support a loved one with addiction?",
            "Explain codependency.",
            "What are boundaries for healthy relationships?",
            "How to practice self-care to prevent burnout?",
            "Tips for managing work-life balance.",
            "What is digital detox?",
            "How to create a healthy relationship with technology?",
            "Explain conscious consumption.",
            "What are sustainable living practices?",
            "How to reduce your environmental footprint?",
            "Tips for mindful eating.",
            "What is intuitive eating?",
            "How to foster positive body image?",
            "Explain healthy lifestyle choices.",
            "What are benefits of physical activity?",
            "How to incorporate exercise into your routine?",
            "Tips for improving sleep hygiene.",
            "What is stress management?",
            "How to practice relaxation techniques?",
            "Explain the importance of hydration.",
            "What are superfoods?",
            "How to boost your immune system naturally?",
            "Tips for maintaining gut health.",
            "What is the microbiome?",
            "How to reduce inflammation through diet?",
            "Explain chronic disease prevention.",
            "What are benefits of preventative care?",
            "How to manage chronic conditions?",
            "Tips for healthy aging.",
            "What is brain health?",
            "How to prevent cognitive decline?",
            "Explain neuroplasticity and learning.",
            "What are memory-boosting techniques?",
            "How to improve focus and concentration?",
            "Tips for lifelong learning.",
            "What is intellectual curiosity?",
            "How to stay mentally active?",
            "Explain the power of reading.",
            "What are benefits of learning a new language?",
            "How to play brain games?",
            "Tips for creative problem-solving.",
            "What is divergent thinking?",
            "How to foster innovation?",
            "Explain design thinking process.",
            "What are ideation techniques?",
            "How to brainstorm effectively?",
            "Tips for overcoming creative blocks.",
            "What is artistic expression?",
            "How to find your creative outlet?",
            "Explain the benefits of hobbies.",
            "What are ways to relax and de-stress?",
            "How to enjoy leisure time fully?",
            "Tips for finding joy in everyday life.",
            "What is the pursuit of happiness?",
            "How to cultivate optimism?",
            "Explain resilience in challenging times.",
            "What is post-traumatic growth?",
            "How to build meaningful relationships?",
            "Tips for fostering connection.",
            "What is the importance of community?",
            "How to give back to society?",
            "Explain philanthropy and altruism.",
            "What are different forms of volunteering?",
            "How to make a positive impact?",
            "Tips for advocacy and activism.",
            "What is social justice?",
            "How to promote equality and equity?",
            "Explain human rights.",
            "What are ethical dilemmas?",
            "How to make ethical decisions?",
            "Tips for moral reasoning.",
            "What is critical thinking in daily life?",
            "How to analyze information effectively?",
            "Explain logical fallacies.",
            "What are biases in thinking?",
            "How to avoid misinformation?",
            "Tips for media literacy.",
            "What is responsible digital citizenship?",
            "How to manage your online presence?",
            "Explain cyber security for individuals.",
            "What are common online scams?",
            "How to protect your privacy online?",
            "Tips for strong password creation.",
            "What is two-factor authentication (2FA)?",
            "How to recognize phishing emails?",
            "Explain identity theft prevention.",
            "What are VPNs and why use them?",
            "How to secure your smart home devices?",
            "Tips for safe online shopping.",
            "What is data breach notification?",
            "How to respond to a data breach?",
            "Explain ransomware attacks.",
            "What are computer viruses and malware?",
            "How to keep your software updated?",
            "Tips for secure Wi-Fi usage.",
            "What is public Wi-Fi safety?",
            "How to use a password manager?",
            "Explain digital footprint.",
            "What are privacy settings on social media?",
            "How to delete personal data online?",
            "Tips for managing online reputation.",
            "What is cancel culture?",
            "How to navigate online discourse responsibly?",
            "Explain digital well-being.",
            "What is screen time management?",
            "How to reduce digital distractions?",
            "Tips for a healthy relationship with social media.",
            "What is social media addiction?",
            "How to do a digital detox?",
            "Explain tech-life balance.",
            "What are benefits of unplugging?",
            "How to foster real-world connections?",
            "Tips for intentional technology use.",
            "What is slow living?",
            "How to embrace simplicity?",
            "Explain mindful consumption.",
            "What are benefits of decluttering?",
            "How to organize your home effectively?",
            "Tips for minimalist living.",
            "What is zero-waste lifestyle?",
            "How to reduce plastic waste?",
            "Explain composting at home.",
            "What are sustainable fashion choices?",
            "How to reduce your carbon footprint?",
            "Tips for energy conservation.",
            "What is renewable energy at home?",
            "How to grow your own food?",
            "Explain urban gardening.",
            "What are permaculture principles?",
            "How to build a food forest?",
            "Tips for zero-waste cooking.",
            "What is food waste reduction?",
            "How to compost food scraps?",
            "Explain circular economy models for food.",
            "What are sustainable agriculture practices?",
            "How to support regenerative farming?",
            "Tips for ethical eating choices."
        ];

        // --- DOM Elements (Declared here, assigned in load event) ---
        let chatbotContainer;
        let chatHistoryDiv;
        let userInput;
        let sendButton;
        let themeSelect;
        let copyMessage;
        let chatAttachmentsPreviewContainer;
        let chatImageUpload;
        let voiceInputBtn;
        let suggestionsContainer;
        let suggestionsList;
        let desktopToggleSidebarBtn;
        
        // Sidebar Elements
        let chatSidebar; 
        let newChatBtnSidebar; 
        let toggleSidebarBtn; 
        let mobileToggleSidebarBtn; 
        let chatMainContent;
        // Sidebar Export Buttons
        let exportTxtBtn;
        let exportPdfBtn;
        let exportMdBtn; 
        let exportJsonBtn; // New: JSON export button

        // Theme Constants (matching Code 2's theme definitions)
        const THEMES = [
            'cosmic-purple',
            'starlight-lavender',
            'emerald-galaxy',
            'crimson-nebula',
            'golden-aurora',
            'cosmic-gold',
            'neon-glitch',
            'ancient-papyrus'
        ];
        const DEFAULT_THEME = 'cosmic-purple';

        // --- Lucide Icon Helper ---
        const createIcons = () => {
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        };

        function updateButtonIcon(buttonElement, newIconName, classList = 'w-4 h-4') {
            let currentIconSvg = buttonElement.querySelector('.lucide');
            if (currentIconSvg) {
                currentIconSvg.remove();
            }

            const newIconSpan = document.createElement('span');
            newIconSpan.setAttribute('data-lucide', newIconName);
            newIconSpan.className = classList; 

            buttonElement.appendChild(newIconSpan);
           
            createIcons(); 
        }

        // Function to manage the send/stop button's appearance and enabled/disabled state
        function updateSendButtonState() {
            const hasInput = userInput.value.trim().length > 0 || chatAttachments.length > 0;

            if (isGeneratingResponse) {
                // AI is generating, button should be 'stop'
                updateButtonIcon(sendButton, 'square', 'w-5 h-5');
                sendButton.disabled = false; // Always enabled to stop
                sendButton.style.backgroundColor = 'var(--accent-error)'; // Red for stop
                sendButton.style.color = 'white'; // White icon for stop
            } else {
                // AI is idle, button should be 'send'
                updateButtonIcon(sendButton, 'send', 'w-5 h-5');
                sendButton.style.backgroundColor = 'var(--accent-color)'; // Default accent color for send
                sendButton.style.color = 'white'; // White icon for send
                if (hasInput) {
                    sendButton.disabled = false; // Enable if there's text or attachments
                } else {
                    sendButton.disabled = true; // Disable if no text and no attachments
                }
            }
        }

        // --- File Handling Helpers ---
        const fileToBase64 = (file) => {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve({
                    mimeType: file.type || 'application/octet-stream', 
                    data: reader.result.split(',')[1]
                });
                reader.onerror = error => reject(error);
                reader.readAsDataURL(file);
            });
        };

        function getFileIcon(mimeType) {
            if (mimeType.startsWith('image/')) return 'image';
            if (mimeType === 'application/pdf') return 'file-text';
            if (mimeType.includes('text/')) return 'file-text';
            if (mimeType.includes('csv') || mimeType.includes('excel')) return 'file-spreadsheet';
            if (mimeType.includes('json') || mimeType.includes('xml') || mimeType.includes('code') || mimeType.includes('markdown')) return 'file-code';
            return 'file';
        }

        // --- Markdown.js Custom Renderer for Code Blocks ---
        const renderer = {
            code(token) { 
                const actualCodeContent = token.text; 
                const lang = token.lang;             

                const languageDisplay = lang ? `<span class="text-xs font-semibold uppercase text-gray-400">${lang}</span>` : '';
                const uniqueId = `code-block-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                
                // Prism.js expects the raw (unescaped) code string and will handle escaping and highlighting.
                const escapedCode = actualCodeContent
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#39;'); 

                return `
                    <div class="code-block-container">
                        <div class="code-block-header">
                            ${languageDisplay}
                            <button class="code-block-copy-button" data-copy-target="${uniqueId}">
                                <span data-lucide="clipboard" class="w-4 h-4"></span>
                                Copy code
                            </button>
                        </div>
                        <pre><code id="${uniqueId}" class="language-${lang || 'plaintext'}">${escapedCode}</code></pre>
                    </div>
                `;
            }
        };
        marked.use({ renderer });

        // --- Chat UI & Logic ---
        /**
         * Appends a chat message to the UI.
         * @param {string} role - 'user' or 'model'
         * @param {string} text - The raw text content of the message.
         * @param {Array} attachments - Array of attachment objects (for user messages).
         * @param {string} messageId - Optional ID for the message div.
         * @returns {object} An object containing references to the messageContentDiv and the full messageDiv.
         */
        function appendChatMessage(role, text, attachments = [], messageId = null) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('chat-message', role);
            
            messageId = messageId || `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
            messageDiv.dataset.messageId = messageId;
            
            // Store the raw text for copy/dictate before any display formatting
            messageTextCache.set(messageId, text); 

            // Create avatar element (img for AI, lucide icon for User)
            let avatarElement;
            if (role === 'user') {
                avatarElement = document.createElement('div');
                avatarElement.classList.add('lucide-avatar-icon');
                const userIconSpan = document.createElement('span');
                userIconSpan.setAttribute('data-lucide', USER_AVATAR_ICON);
                avatarElement.appendChild(userIconSpan);
                avatarElement.title = "You"; 
            } else {
                avatarElement = document.createElement('img');
                avatarElement.src = AI_AVATAR_URL;
                avatarElement.alt = 'Mystic Vision AI Lite Avatar'; // Renamed alt text
                avatarElement.classList.add('chat-avatar');
                avatarElement.title = "Mystic Vision AI Lite"; // Renamed title
            }

            // Create the content bubble wrapper
            const messageBubbleContent = document.createElement('div');
            messageBubbleContent.classList.add('message-bubble-content');

            // Create the actual message content area *inside* the bubble
            const messageContentDiv = document.createElement('div');
            messageContentDiv.classList.add('message-content');

            if (role === 'user') {
                messageContentDiv.innerHTML = `<span>${text}</span>`; // User text is plain HTML

                if (attachments.length > 0) {
                    const attachmentsContainer = document.createElement('div');
                    attachmentsContainer.classList.add('mt-2', 'flex', 'flex-wrap', 'gap-2');
                    attachments.forEach(attachment => {
                        if (attachment.mimeType.startsWith('image/')) {
                            attachmentsContainer.innerHTML += `<img src="data:${attachment.mimeType};base64,${attachment.data}" alt="${attachment.name || 'User attachment'}" class="chat-image w-24 h-24 object-cover">`;
                        } else {
                            attachmentsContainer.innerHTML += `
                                <div class="chat-message-attachment-item">
                                    <span data-lucide="${getFileIcon(attachment.mimeType)}" class="w-4 h-4 flex-shrink-0"></span>
                                    <span class="truncate max-w-[120px]">${attachment.name || 'File'}</span>
                                </div>
                            `;
                        }
                    });
                    messageContentDiv.appendChild(attachmentsContainer);
                }
                
                messageBubbleContent.appendChild(messageContentDiv); // Append user content to bubble
                messageDiv.appendChild(messageBubbleContent);
                messageDiv.appendChild(avatarElement); 
            } else { // AI message: content is parsed and rendered immediately in Lite version
                messageContentDiv.innerHTML = marked.parse(text);
                messageBubbleContent.appendChild(messageContentDiv);
                messageDiv.appendChild(avatarElement); 
                messageDiv.appendChild(messageBubbleContent);
            }
            
            // Add common actions to the messageBubbleContent (as a separate child)
            const actionsDiv = document.createElement('div');
            actionsDiv.classList.add('message-actions');
            actionsDiv.innerHTML = `
                <button class="copy-message-btn" title="Copy message" data-message-id="${messageId}">
                    <span data-lucide="clipboard" class="w-4 h-4"></span>
                </button>
                <button class="dictate-message-btn" title="Dictate message" data-message-id="${messageId}">
                    <span data-lucide="volume-2" class="w-4 h-4"></span>
                </button>
                ${role === 'user' ? `
                <button class="edit-message-btn" title="Edit message" data-message-id="${messageId}">
                    <span data-lucide="pencil" class="w-4 h-4"></span>
                </button>` : `
                <button class="regenerate-message-btn" title="Regenerate response" data-message-id="${messageId}">
                    <span data-lucide="rotate-ccw" class="w-4 h-4"></span>
                </button>`
                }
            `;
            messageBubbleContent.appendChild(actionsDiv); // Append actions as a *new child* of the bubble

            chatHistoryDiv.appendChild(messageDiv);
            
            setTimeout(() => {
                messageDiv.style.transform = 'scale(1)';
            }, 10);
            
            chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
            createIcons(); 

            // Return the specific message content div where text will eventually go
            // and the full messageDiv for Prism.highlightAllUnder(element.closest(...))
            return { messageContentDiv, messageDiv }; 
        }

        function toggleLoading(show) {
            let loadingIndicator = document.getElementById('loadingIndicator');
            if (show) {
                isGeneratingResponse = true;
                if (!loadingIndicator) {
                    loadingIndicator = document.createElement('div');
                    loadingIndicator.id = 'loadingIndicator';
                    loadingIndicator.classList.add('p-4', 'text-center', 'text-gray-500', 'text-sm', 'ai-message'); 
                    loadingIndicator.innerHTML = `
                        <div class="loader-container h-8">
                            <div class="loader-dot"></div>
                            <div class="loader-dot"></div>
                            <div class="loader-dot"></div>
                        </div>
                        <span class="mt-2 block">Mystic Vision AI Lite is thinking...</span> <!-- Renamed thinking message -->
                    `;
                    chatHistoryDiv.appendChild(loadingIndicator);
                }
                loadingIndicator.style.display = 'flex';
                loadingIndicator.style.flexDirection = 'column'; 
                chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
                updateSendButtonState(); // Update button to 'stop' icon and enabled
                userInput.disabled = true; 
            } else {
                isGeneratingResponse = false;
                if (loadingIndicator) {
                    loadingIndicator.remove(); 
                }
                updateSendButtonState(); // Update button to 'send' icon and disabled/enabled based on input
                userInput.disabled = false; 
                userInput.focus();
            }
        }

        function displayChatAttachments() {
            chatAttachmentsPreviewContainer.innerHTML = '';
            if (chatAttachments.length > 0) {
                chatAttachmentsPreviewContainer.classList.remove('hidden');
                chatAttachments.forEach((attachment, index) => {
                    const attachmentDiv = document.createElement('div');
                    attachmentDiv.classList.add('chat-attachment-preview-item');
                    attachmentDiv.dataset.index = index;

                    let previewContent = '';
                    if (attachment.mimeType.startsWith('image/')) {
                        previewContent = `<img src="data:${attachment.mimeType};base64,${attachment.data}" alt="${attachment.name}" class="w-8 h-8 object-cover rounded-md">`;
                    } else {
                        previewContent = `<span data-lucide="${getFileIcon(attachment.mimeType)}" class="w-5 h-5 flex-shrink-0"></span>`;
                    }

                    attachmentDiv.innerHTML = `
                        ${previewContent}
                        <span class="truncate max-w-[100px]">${attachment.name}</span>
                        <button class="remove-attachment-btn">
                            <span data-lucide="x" class="w-4 h-4"></span>
                        </button>
                    `;
                    chatAttachmentsPreviewContainer.appendChild(attachmentDiv);
                });
                createIcons(); 
            } else {
                chatAttachmentsPreviewContainer.classList.add('hidden');
            }
        }

        function showCopyMessage() {
            copyMessage.classList.add('show');
            setTimeout(() => {
                copyMessage.classList.remove('show');
            }, 3000);
        }

        function copyToClipboard(text) { 
            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(text)
                    .then(() => {
                        showCopyMessage();
                    })
                    .catch(err => {
                        console.error('Failed to copy: ', err);
                        alert('Failed to copy text. Please copy manually.'); 
                    });
            } else {
                const tempTextArea = document.createElement('textarea');
                tempTextArea.value = text;
                document.body.appendChild(tempTextArea);
                tempTextArea.select();
                try {
                    document.execCommand('copy');
                    showCopyMessage();
                } catch (err) {
                    console.error('Failed to copy (fallback):', err);
                    alert('Failed to copy text. Please copy manually.'); 
                }
                document.body.removeChild(tempTextArea);
            }
        }

        function toggleSpeech(text, buttonElement) {
            if (!window.speechSynthesis) {
                alert('Speech synthesis not supported in this browser.');
                return;
            }

            if (isSpeaking && currentUtterance && currentUtterance.text === text) {
                if (window.speechSynthesis.paused) {
                    window.speechSynthesis.resume();
                    updateButtonIcon(buttonElement, 'pause');
                } else {
                    window.speechSynthesis.pause();
                    updateButtonIcon(buttonElement, 'volume-2');
                }
            } else {
                startSpeech(text, buttonElement);
            }
        }

        function startSpeech(text, buttonElement) {
            if (window.speechSynthesis.speaking || window.speechSynthesis.paused) {
                window.speechSynthesis.cancel();
            }

            document.querySelectorAll('.dictate-message-btn').forEach(btn => {
                if (btn !== buttonElement) { 
                    updateButtonIcon(btn, 'volume-2'); 
                }
            });

            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'en-US'; 

            utterance.onstart = () => {
                isSpeaking = true;
                currentUtterance = utterance;
                updateButtonIcon(buttonElement, 'pause');
            };
            utterance.onend = () => {
                isSpeaking = false;
                currentUtterance = null;
                updateButtonIcon(buttonElement, 'volume-2');
            };
            utterance.onerror = (event) => {
                console.error('Speech synthesis error:', event.error);
                alert('Failed to dictate message. Check console for details.');
                isSpeaking = false;
                currentUtterance = null;
                updateButtonIcon(buttonElement, 'volume-2');
            };

            window.speechSynthesis.speak(utterance);
        }

        // --- API Call Function ---
        async function callGeminiAPI(payload) {
            if (GEMINI_API_KEY === "" || !GEMINI_API_KEY || GEMINI_API_KEY === "") { 
                throw new Error("API Key is not set or is the default placeholder. Please replace 'AIzaSyCzx6ReMk8ohPJcCjGwHHzu7SvFccJqAbA' in the script with your actual Gemini API key.");
            }
            
            const dynamicApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${DEFAULT_GEMINI_MODEL}:generateContent?key=${GEMINI_API_KEY}`;

            // Filter out the 'id' property from messages before sending to Gemini API
            const cleanContents = payload.contents.map(message => {
                const newMessage = {
                    role: message.role,
                    parts: message.parts
                };
                // Ensure no unexpected properties are passed to the API
                return newMessage;
            });
            
            const requestBody = {
                contents: cleanContents,
            };
            
            let response;
            let result;
            let success = false;
            let retryCount = 0;
            const maxRetries = 3;
            let delay = 1000; 

            while (retryCount < maxRetries && !success) {
                try {
                    response = await fetch(dynamicApiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(requestBody) 
                    });

                    if (response.status === 429) { 
                        if (retryCount < maxRetries - 1) {
                            console.warn(`API rate limit exceeded. Retrying in ${delay / 1000}s...`);
                            await new Promise(res => setTimeout(res, delay));
                            delay *= 2; 
                            retryCount++;
                        } else {
                            throw new Error('API rate limit exceeded. Please try again later.');
                        }
                    } else if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(`API error: ${response.status} ${response.statusText} - ${errorData.error?.message || 'Unknown error'}`);
                    } else {
                        result = await response.json();
                        success = true;
                    }
                } catch (err) {
                    if (retryCount < maxRetries - 1) {
                        console.warn(`Fetch error: ${err.message}. Retrying in ${delay / 1000}s...`);
                        await new Promise(res => setTimeout(res, delay));
                        delay *= 2;
                        retryCount++;
                    } else {
                        throw err; 
                    }
                }
            }
            
            if (result && result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                return result.candidates[0].content.parts[0].text;
            } else {
                throw new Error('Failed to get a valid response from the AI. No candidates found or content is empty.');
            }
        }

        // --- Autocomplete Functions ---
        function filterSuggestions(query) {
            if (!query) return [];
            const lowerQuery = query.toLowerCase();
            return autocompleteSuggestions.filter(s => s.toLowerCase().includes(query));
        }

        function displaySuggestions(suggestions) {
            suggestionsList.innerHTML = '';
            suggestionsContainer.classList.add('hidden');
            selectedSuggestionIndex = -1;

            if (suggestions.length === 0) {
                return;
            }

            suggestions.forEach((suggestion, index) => {
                const li = document.createElement('li');
                li.textContent = suggestion;
                li.dataset.index = index;
                li.addEventListener('click', () => {
                    userInput.value = suggestion;
                    userInput.focus();
                    suggestionsContainer.classList.add('hidden');
                    userInput.style.height = 'auto'; 
                    userInput.style.height = userInput.scrollHeight + 'px';
                    updateSendButtonState();
                });
                suggestionsList.appendChild(li);
            });
            suggestionsContainer.classList.remove('hidden');
        }

        function navigateSuggestions(direction) {
            const items = Array.from(suggestionsList.children);
            if (items.length === 0) return;

            if (selectedSuggestionIndex !== -1) {
                items[selectedSuggestionIndex].classList.remove('selected');
            }

            if (direction === 'down') {
                selectedSuggestionIndex = (selectedSuggestionIndex + 1) % items.length;
            } else if (direction === 'up') {
                selectedSuggestionIndex = (selectedSuggestionIndex - 1 + items.length) % items.length;
            }

            items[selectedSuggestionIndex].classList.add('selected');
            items[selectedSuggestionIndex].scrollIntoView({ block: 'nearest' });
            userInput.value = items[selectedSuggestionIndex].textContent; 
            userInput.style.height = 'auto'; 
            userInput.style.height = userInput.scrollHeight + 'px';
            updateSendButtonState();
        }

        function selectCurrentSuggestion() {
            if (selectedSuggestionIndex !== -1) {
                const selectedText = suggestionsList.children[selectedSuggestionIndex].textContent;
                userInput.value = selectedText;
            }
            suggestionsContainer.classList.add('hidden');
            selectedSuggestionIndex = -1;
            updateSendButtonState();
        }

        // --- Chat History Management ---
        function saveCurrentChat() {
            if (conversationHistory.length > 0) {
                localStorage.setItem(CURRENT_CHAT_STORAGE_KEY, JSON.stringify(conversationHistory));
            } else {
                localStorage.removeItem(CURRENT_CHAT_STORAGE_KEY);
            }
        }

        // --- New Chat Function ---
        function startNewChat() {
            localStorage.removeItem(CURRENT_CHAT_STORAGE_KEY);

            // Stop any ongoing speech or AI generation
            if (window.speechSynthesis.speaking) {
                window.speechSynthesis.cancel();
                isSpeaking = false;
                currentUtterance = null;
                document.querySelectorAll('.dictate-message-btn').forEach(btn => updateButtonIcon(btn, 'volume-2'));
            }
            if (isGeneratingResponse) {
                isGeneratingResponse = false;
                toggleLoading(false);
            }

            // Reset UI and in-memory history for a new chat
            chatHistoryDiv.innerHTML = '';
            conversationHistory = []; // Reset history to empty
            chatAttachments = [];
            chatImageUpload.value = '';
            displayChatAttachments();
            userInput.value = '';
            userInput.style.height = 'auto';
            messageTextCache.clear();
            suggestionsContainer.classList.add('hidden');
            selectedSuggestionIndex = -1;
            userInput.dataset.editingMessageId = '';
            updateSendButtonState();

            // Append the initial AI message for the new chat
            const initialAiMessageId = `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
            const { messageContentDiv: initialAiContentDiv, messageDiv: initialAiMessageDiv } = appendChatMessage('ai', initialAIMessage.parts[0].text, [], initialAiMessageId);
            conversationHistory.push({ ...initialAIMessage, id: initialAiMessageId }); // Add to the *new* history

            // For the initial message, it always renders instantly
            initialAiContentDiv.innerHTML = marked.parse(initialAIMessage.parts[0].text);
            if (typeof Prism !== 'undefined') {
                requestAnimationFrame(() => {
                    Prism.highlightAllUnder(initialAiMessageDiv);
                });
            }

            // Hide sidebar on mobile if new chat is initiated from it
            if (window.innerWidth <= 768) {
                chatSidebar.classList.remove('active-mobile-sidebar');
                mobileToggleSidebarBtn.style.display = 'flex';
            }

            userInput.focus();
        }

        // --- Export Functions ---
        function getFormattedChatHistoryTextForExport() {
            let text = '';
            conversationHistory.forEach(msg => {
                let msgText = '';
                msg.parts.forEach(part => {
                    if (part.text) {
                        msgText += part.text;
                    }
                    // For attachments, just indicate their presence. Full content not included in text export.
                    if (part.inlineData) {
                        msgText += ` [Attachment: ${part.inlineData.name || part.inlineData.mimeType}]`;
                    }
                });
                text += `${msg.role.toUpperCase()}:\n${msgText}\n\n`;
            });
            return text;
        }

        function exportAsMd() {
            if (conversationHistory.length === 0) {
                alert("No chat history to export.");
                return;
            }
            let markdownContent = `# Mystic Vision AI Chat History (Lite)\n\n`; // Renamed export title
            markdownContent += `*Export Date: ${new Date().toLocaleString()}*\n\n---\n\n`;

            conversationHistory.forEach(msg => {
                markdownContent += `## ${msg.role === 'user' ? 'You' : 'Mystic Vision AI Lite'}\n\n`; // Renamed AI in export
                msg.parts.forEach(part => {
                    if (part.text) {
                        markdownContent += `${part.text}\n\n`;
                    }
                    if (part.inlineData) {
                        // For image attachments, provide a placeholder markdown syntax
                        if (part.inlineData.mimeType.startsWith('image/')) {
                            markdownContent += `![Attachment: ${part.inlineData.name || 'Image'}](${part.inlineData.mimeType};base64,${part.inlineData.data})\n\n`;
                        } else {
                            // For other file types, just list them
                            markdownContent += `[File Attachment: ${part.inlineData.name || part.inlineData.mimeType}]\n\n`;
                        }
                    }
                });
                markdownContent += `---\n\n`; // Separator between messages
            });

            const blob = new Blob([markdownContent], { type: 'text/markdown;charset=utf-8' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `MysticVision_Chat_Lite_${new Date().toISOString().slice(0, 10)}.md`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);
            alert('Chat exported as Markdown (.md)!');
        }

        function exportAsTxt() {
            if (conversationHistory.length === 0) {
                alert("No chat history to export.");
                return;
            }
            const textContent = getFormattedChatHistoryTextForExport();
            const blob = new Blob([textContent], { type: 'text/plain;charset=utf-8' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `MysticVision_Chat_Lite_${new Date().toISOString().slice(0, 10)}.txt`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);
            alert('Chat exported as TXT!');
        }

        async function exportAsPdf() {
            if (conversationHistory.length === 0) {
                alert("No chat history to export.");
                return;
            }
            if (typeof jspdf === 'undefined') {
                alert('PDF export library (jsPDF) not loaded. Please ensure internet connection or check CDN.');
                console.error("jsPDF not loaded. Add <script src='https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js'><script> to your HTML header.");
                return;
            }
            const { jsPDF } = jspdf;
            const doc = new jsPDF();

            const title = `Mystic Vision AI Chat History (Lite) - ${new Date().toLocaleString()}`; // Renamed export title
            const textContent = getFormattedChatHistoryTextForExport();
            const lines = doc.splitTextToSize(textContent, 180); // Max width of 180mm for text

            let y = 15; // Starting Y position, leave some margin
            const lineHeight = 7; // Approx line height for 12pt font
            const pageHeight = doc.internal.pageSize.height;
            const pageWidth = doc.internal.pageSize.width;

            doc.setFontSize(14);
            doc.text(title, pageWidth / 2, y, { align: 'center' }); // Centered title
            y += lineHeight * 2;

            doc.setFontSize(10); // Smaller font for chat content
            lines.forEach(line => {
                if (y + lineHeight > pageHeight - 15) { // Check if new page is needed, leave bottom margin
                    doc.addPage();
                    y = 15; // Reset Y for new page
                    doc.setFontSize(12);
                    doc.text(`Chat History (continued)`, pageWidth / 2, y, { align: 'center' });
                    y += lineHeight * 2;
                    doc.setFontSize(10);
                }
                doc.text(line, 10, y); // Left aligned text
                y += lineHeight;
            });

            doc.save(`MysticVision_Chat_Lite_${new Date().toISOString().slice(0, 10)}.pdf`);
            alert('Chat exported as PDF!');
        }

        // New: Export as JSON
        function exportAsJson() {
            if (conversationHistory.length === 0) {
                alert("No chat history to export.");
                return;
            }
            // Create a copy of conversationHistory to remove cyclical references (if any) or extra properties like 'file' object in attachments
            const exportableHistory = conversationHistory.map(message => {
                const parts = message.parts.map(part => {
                    if (part.inlineData) {
                        // Only include mimeType and data for inlineData, optionally name
                        return { inlineData: { mimeType: part.inlineData.mimeType, data: part.inlineData.data, name: part.inlineData.name || undefined } };
                    }
                    return part;
                });
                return { role: message.role, parts: parts, id: message.id };
            });

            const jsonContent = JSON.stringify(exportableHistory, null, 2); // Pretty print JSON
            const blob = new Blob([jsonContent], { type: 'application/json;charset=utf-8' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `MysticVision_Chat_Lite_${new Date().toISOString().slice(0, 10)}.json`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(link.href);
            alert('Chat exported as JSON!');
        }

        // --- Paste Functionality ---
        async function processPastedFile(file) {
            const allowedTypes = [
                'image/', 'text/', 'application/pdf',
                'application/json', 'text/csv', 'application/xml', 'text/markdown'
            ];
            const isAllowed = allowedTypes.some(type => file.type.startsWith(type)) || file.name.endsWith('.md');

            if (isAllowed) {
                if (file.size > 10 * 1024 * 1024) { 
                    alert(`File "${file.name}" is too large (>10MB). Max 10MB per file.`);
                    return;
                }
                try {
                    const { mimeType, data } = await fileToBase64(file);
                    chatAttachments.push({ file, mimeType, data, name: file.name });
                } catch (error) {
                    alert(`Failed to read pasted file ${file.name}.`);
                    console.error('Pasted file read error:', error);
                }
            } else {
                alert(`Pasted file type not supported: "${file.name}" (${file.type}).`);
            }
        }

        // Function to apply theme
        function applyTheme(themeName) {
            // Remove all known theme classes from the body
            THEMES.forEach(theme => {
                document.body.classList.remove(theme);
            });
            // Add the new selected theme class
            let themeToApply = themeName;
            if (!THEMES.includes(themeName)) {
                // Fallback to default if somehow an invalid theme is passed
                themeToApply = DEFAULT_THEME;
            }
            document.body.classList.add(themeToApply);
            localStorage.setItem('selected-lite-theme', themeToApply); // Save user preference (unique key for Lite)

            // Update the select dropdown to show the current theme
            if (themeSelect) {
                themeSelect.value = themeToApply;
                // Update SVG arrow color dynamically based on new theme's --text-color
                // This converts the CSS variable value (e.g., "#E6E6FA") to a hex string without '#'
                const computedStyle = getComputedStyle(document.documentElement);
                const textColorValue = computedStyle.getPropertyValue('--text-color').trim();
                let arrowColor = '000000'; // Default to black
                if (textColorValue.startsWith('#') && textColorValue.length === 7) {
                    arrowColor = textColorValue.substring(1);
                } else if (textColorValue.startsWith('rgb')) {
                    // Convert rgb(r, g, b) to hex
                    const rgb = textColorValue.match(/\d+/g);
                    if (rgb && rgb.length >= 3) {
                        arrowColor = ((1 << 24) + (parseInt(rgb[0]) << 16) + (parseInt(rgb[1]) << 8) + parseInt(rgb[2])).toString(16).slice(1);
                    }
                }
                themeSelect.style.setProperty('--select-arrow-svg', `url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="%23${arrowColor}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-down"><path d="m6 9 6 6 6-6"/></svg>')`);
            }
        }

        // --- Initialization on Load ---
        window.addEventListener('load', () => {
            // --- Assign DOM Elements after the page is fully loaded ---
            chatbotContainer = document.querySelector('.chatbot-container');
            chatHistoryDiv = document.getElementById('chatHistory');
            userInput = document.getElementById('userInput');
            sendButton = document.getElementById('sendButton');
            themeSelect = document.getElementById('theme-select');
            copyMessage = document.getElementById('copy-message');
            chatAttachmentsPreviewContainer = document.getElementById('chat-attachments-preview-container');
            chatImageUpload = document.getElementById('chat-image-upload');
            voiceInputBtn = document.getElementById('voice-input-btn');
            suggestionsContainer = document.getElementById('suggestions-container');
            suggestionsList = document.getElementById('suggestions-list');
            
            // Sidebar Elements
            chatSidebar = document.getElementById('chatSidebar'); 
            newChatBtnSidebar = document.getElementById('newChatBtn'); 
            toggleSidebarBtn = document.getElementById('toggleSidebarBtn'); 
            mobileToggleSidebarBtn = document.getElementById('mobileToggleSidebarBtn'); 
            chatMainContent = document.getElementById('chatMainContent');
            // Sidebar Export Buttons
            exportTxtBtn = document.getElementById('exportTxtBtn');
            exportPdfBtn = document.getElementById('exportPdfBtn');
            exportMdBtn = document.getElementById('exportMdBtn'); 
            exportJsonBtn = document.getElementById('exportJsonBtn'); // New: JSON export button
            desktopToggleSidebarBtn = document.getElementById('desktopToggleSidebarBtn');

            createIcons();
            userInput.style.height = userInput.scrollHeight + 'px';

            let isSidebarOpenDesktop = true; // Sidebar starts open by default on desktop

            // Initialize Theme based on localStorage or default
            const savedTheme = localStorage.getItem('selected-lite-theme'); // Unique key
            applyTheme(savedTheme || DEFAULT_THEME);

            // Event listener for Theme Selector
            themeSelect.addEventListener('change', (event) => {
                const selectedTheme = event.target.value;
                applyTheme(selectedTheme);
            });

            // NEW: Function to apply desktop sidebar state
            function applyDesktopSidebarState() {
                if (isSidebarOpenDesktop) {
                    chatSidebar.style.width = '280px';
                    chatSidebar.style.padding = '20px 15px';
                    chatSidebar.style.overflowY = 'auto'; // Re-enable scroll
                    chatMainContent.classList.remove('sidebar-hidden'); // No left radius
                    updateButtonIcon(desktopToggleSidebarBtn, 'chevron-left', 'w-5 h-5');
                } else {
                    chatSidebar.style.width = '0px';
                    chatSidebar.style.padding = '0'; // Remove padding when collapsed
                    chatSidebar.style.overflowY = 'hidden'; // Hide scroll when collapsed
                    chatMainContent.classList.add('sidebar-hidden'); // Add left radius
                    updateButtonIcon(desktopToggleSidebarBtn, 'chevron-right', 'w-5 h-5');
                }
            }

            // NEW: Event listener for desktop toggle button
            desktopToggleSidebarBtn.addEventListener('click', () => {
                isSidebarOpenDesktop = !isSidebarOpenDesktop;
                applyDesktopSidebarState();
            });

            // Load the current session's chat history on startup
            const storedHistory = localStorage.getItem(CURRENT_CHAT_STORAGE_KEY); // Unique key
            if (storedHistory) {
                conversationHistory = JSON.parse(storedHistory);
                const aiMessageDivsToHighlight = []; // For Prism.js highlighting
                chatHistoryDiv.innerHTML = ''; // Clear existing UI

                conversationHistory.forEach(msg => {
                    let textContent = '';
                    let attachments = [];
                    msg.parts.forEach(part => {
                        if (part.text) {
                            textContent = part.text;
                        } else if (part.inlineData) {
                            attachments.push({
                                mimeType: part.inlineData.mimeType,
                                data: part.inlineData.data,
                                name: part.inlineData.name || 'Attachment'
                            });
                        }
                    });
                    // Ensure message has an ID for action buttons even if loaded from older saves
                    const msgId = msg.id || `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                    const { messageContentDiv, messageDiv } = appendChatMessage(msg.role, textContent, attachments, msgId);
                    if (!msg.id) msg.id = msgId; // Update history with new ID if missing

                    if (msg.role === 'model') {
                        // For AI in Lite version, content is already marked.parsed in appendChatMessage
                        if (typeof Prism !== 'undefined') {
                            aiMessageDivsToHighlight.push(messageDiv);
                        }
                    }
                });

                if (typeof Prism !== 'undefined') {
                    requestAnimationFrame(() => {
                        aiMessageDivsToHighlight.forEach(div => {
                            Prism.highlightAllUnder(div);
                        });
                    });
                }
                chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
            } else {
                // If no stored history, start a truly new chat with the AI's first message
                startNewChat();
            }

            updateSendButtonState(); // Initial state update for the send button

            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.register('/service-worker.js')
                .then(registration => {
                    console.log('ServiceWorker registered: ', registration);
                })
                .catch(registrationError => {
                    console.log('ServiceWorker registration failed: ', registrationError);
                });
            }

            // --- Speech Recognition Setup ---
            // IMPORTANT: Browser's SpeechRecognition API is used. Its "intelligence"
            // (accuracy, noise handling, punctuation) is determined by the browser
            // and underlying OS capabilities, not directly by this application code.
            // A truly "ChatGPT-like" voice input experience (e.g., highly robust VAD,
            // advanced contextual understanding, real-time punctuation beyond basic)
            // typically requires integration with powerful cloud-based Speech-to-Text
            // and Natural Language Understanding (NLU) services (like OpenAI's Whisper,
            // Google Cloud Speech-to-Text, Azure Speech Services), which involve
            // server-side processing and are beyond the scope of a pure client-side
            // HTML/JavaScript application. This implementation provides the best
            // possible experience using standard browser APIs.
            if (SpeechRecognition) {
                recognition = new SpeechRecognition();
                recognition.continuous = true; 
                recognition.interimResults = true; 
                recognition.lang = 'en-US';

                recognition.onstart = () => {
                    isVoiceInputActive = true;
                    voiceInputBtn.classList.add('voice-input-active');
                    updateButtonIcon(voiceInputBtn, 'mic-off', 'w-5 h-5'); 
                    userInput.placeholder = 'Listening... Speak now.';
                    finalTranscript = ''; 
                    userInput.value = ''; 
                    updateSendButtonState();
                };

                recognition.onresult = (event) => {
                    let interimTranscript = '';
                    for (let i = event.resultIndex; i < event.results.length; ++i) {
                        if (event.results[i].isFinal) {
                            finalTranscript += event.results[i][0].transcript + ' '; 
                        } else {
                            interimTranscript += event.results[i][0].transcript;
                        }
                    }
                    userInput.value = finalTranscript + interimTranscript; 
                    userInput.scrollLeft = userInput.scrollWidth; 
                    userInput.style.height = 'auto'; 
                    userInput.style.height = userInput.scrollHeight + 'px';
                    updateSendButtonState();
                };

                recognition.onend = () => {
                    isVoiceInputActive = false;
                    voiceInputBtn.classList.remove('voice-input-active');
                    updateButtonIcon(voiceInputBtn, 'mic', 'w-5 h-5'); 
                    userInput.placeholder = 'Type your message...';

                    if (finalTranscript.trim() !== '') {
                        userInput.value = finalTranscript.trim(); 
                    } else if (userInput.value.trim() === '') {
                        userInput.value = ''; 
                    }
                    userInput.style.height = 'auto'; 
                    userInput.style.height = userInput.scrollHeight + 'px';
                    updateSendButtonState();
                };

                recognition.onerror = (event) => {
                    isVoiceInputActive = false; 
                    voiceInputBtn.classList.remove('voice-input-active');
                    updateButtonIcon(voiceInputBtn, 'mic', 'w-5 h-5'); 
                    userInput.placeholder = 'Type your message...';

                    console.error('Speech recognition error:', event.error);
                    let errorMessage = `Speech recognition error: ${event.error}`;
                    if (event.error === 'not-allowed') {
                        errorMessage = 'Microphone access denied. Please allow microphone access in your browser settings.';
                    } else if (event.error === 'no-speech') {
                        console.log('No speech detected, recognition ended.');
                        if (finalTranscript.trim() === '') { userInput.value = ''; }
                        updateSendButtonState();
                        return; 
                    } else if (event.error === 'network') {
                        errorMessage = 'Speech recognition network error. This often means a firewall, proxy, or browser extension is blocking access to Google\'s speech services. Please try disabling extensions or testing in incognito mode.';
                    }
                    alert(errorMessage); 
                    updateSendButtonState();
                };
            } else {
                console.warn('Web Speech API (SpeechRecognition) not supported in this browser. Voice input button will be hidden.');
                voiceInputBtn.style.display = 'none'; 
            }

            userInput.addEventListener('input', () => {
                userInput.style.height = 'auto'; 
                userInput.style.height = userInput.scrollHeight + 'px';

                const query = userInput.value;
                if (query.length > 0) {
                    const suggestions = filterSuggestions(query);
                    displaySuggestions(suggestions);
                } else {
                    suggestionsContainer.classList.add('hidden');
                }
                updateSendButtonState();
            });

            userInput.addEventListener('keydown', (e) => {
                if (suggestionsContainer.classList.contains('hidden')) {
                    if (e.key === 'Enter' && !e.shiftKey) { 
                        e.preventDefault(); 
                        sendButton.click(); 
                    }
                    return;
                }

                if (e.key === 'ArrowDown') {
                    e.preventDefault(); 
                    navigateSuggestions('down');
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault(); 
                    navigateSuggestions('up');
                } else if (e.key === 'Enter') { 
                    e.preventDefault(); 
                    selectCurrentSuggestion();
                } else if (e.key === 'Escape') {
                    suggestionsContainer.classList.add('hidden');
                    selectedSuggestionIndex = -1;
                }
            });

            userInput.addEventListener('blur', () => {
                setTimeout(() => {
                    suggestionsContainer.classList.add('hidden');
                    selectedSuggestionIndex = -1;
                }, 100); 
            });

            userInput.addEventListener('paste', async (e) => {
                const items = e.clipboardData.items;
                let filePasted = false;

                for (let i = 0; i < items.length; i++) {
                    const item = items[i];
                    if (item.kind === 'file') {
                        e.preventDefault(); 
                        const file = item.getAsFile();
                        if (file) {
                            filePasted = true;
                            await processPastedFile(file);
                        }
                    }
                }

                if (filePasted) {
                    displayChatAttachments();
                    userInput.focus();
                    updateSendButtonState();
                }
            });

            sendButton.addEventListener('click', async () => {
                // If AI is currently generating, this click means STOP
                if (isGeneratingResponse) {
                    isGeneratingResponse = false;
                    if (window.speechSynthesis.speaking || window.speechSynthesis.paused) {
                        window.speechSynthesis.cancel();
                        isSpeaking = false;
                        currentUtterance = null;
                        document.querySelectorAll('.dictate-message-btn').forEach(btn => updateButtonIcon(btn, 'volume-2'));
                    }
                    toggleLoading(false); // This will update the button state to 'send'
                    console.log("AI generation stopped by user.");
                    saveCurrentChat(); 
                    return; // Exit the function after handling stop
                }

                // If not generating, proceed with sending (original send logic)
                const userMessage = userInput.value.trim();
                const editingMessageId = userInput.dataset.editingMessageId;
                const hasInput = userMessage.length > 0 || chatAttachments.length > 0;

                if (!hasInput) {
                    console.warn("No input or attachments to send.");
                    userInput.classList.add('border-accent-error', 'animate-pulse');
                    setTimeout(() => {
                        userInput.classList.remove('border-accent-error', 'animate-pulse');
                    }, 500);
                    return;
                }

                // Stop any ongoing speech or voice input
                if (isVoiceInputActive && recognition) {
                    recognition.stop();
                }
                if (window.speechSynthesis.speaking) {
                    window.speechSynthesis.cancel();
                    isSpeaking = false;
                    currentUtterance = null;
                    document.querySelectorAll('.dictate-message-btn').forEach(btn => updateButtonIcon(btn, 'volume-2'));
                }

                if (editingMessageId) {
                    const editedText = userMessage;
                    const messageDivToEdit = document.querySelector(`.chat-message[data-message-id="${editingMessageId}"]`);
                    
                    if (messageDivToEdit) {
                        const originalIndex = Array.from(chatHistoryDiv.children).indexOf(messageDivToEdit);
                        if (originalIndex !== -1) {
                            const originalMessage = conversationHistory[originalIndex];
                            
                            originalMessage.parts = [];
                            if (editedText) {
                                originalMessage.parts.push({ text: editedText });
                            }
                            if (chatAttachments.length > 0) {
                                for(const attachment of chatAttachments) {
                                    originalMessage.parts.push({
                                        inlineData: { mimeType: attachment.mimeType, data: attachment.data }
                                    });
                                }
                            }

                            // Remove all messages from history and UI after the edited message
                            while (chatHistoryDiv.children.length > originalIndex + 1) {
                                chatHistoryDiv.lastChild.remove();
                                conversationHistory.pop();
                            }

                            // Update the UI for the edited message
                            const messageBubbleContent = messageDivToEdit.querySelector('.message-bubble-content');
                            if (messageBubbleContent) {
                                const messageContentDiv = messageBubbleContent.querySelector('.message-content');
                                if (messageContentDiv) messageContentDiv.remove();

                                const newMessageContentDiv = document.createElement('div');
                                newMessageContentDiv.classList.add('message-content');
                                newMessageContentDiv.innerHTML = `<span>${editedText}</span>`;

                                if (chatAttachments.length > 0) {
                                    const attachmentsContainer = document.createElement('div');
                                    attachmentsContainer.classList.add('mt-2', 'flex', 'flex-wrap', 'gap-2');
                                    chatAttachments.forEach(attachment => {
                                        if (attachment.mimeType.startsWith('image/')) {
                                            attachmentsContainer.innerHTML += `<img src="data:${attachment.mimeType};base64,${attachment.data}" alt="${attachment.name || 'User attachment'}" class="chat-image w-24 h-24 object-cover">`;
                                        } else {
                                            attachmentsContainer.innerHTML += `
                                                <div class="chat-message-attachment-item">
                                                    <span data-lucide="${getFileIcon(attachment.mimeType)}" class="w-4 h-4 flex-shrink-0"></span>
                                                    <span class="truncate max-w-[120px]">${attachment.name || 'File'}</span>
                                                </div>
                                            `;
                                        }
                                    });
                                    newMessageContentDiv.appendChild(attachmentsContainer);
                                }
                                messageBubbleContent.prepend(newMessageContentDiv);
                                createIcons();
                            }
                            messageTextCache.set(editingMessageId, editedText);
                            messageDivToEdit.classList.remove('editing');
                        }
                    }
                } else {
                    const userParts = [];
                    if (userMessage) {
                        userParts.push({ text: userMessage });
                    }
                    for (const attachment of chatAttachments) {
                        userParts.push({
                            inlineData: {
                                mimeType: attachment.mimeType,
                                data: attachment.data
                            }
                        });
                    }
                    const newUserMessageId = `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                    appendChatMessage('user', userMessage, chatAttachments, newUserMessageId);
                    conversationHistory.push({ role: 'user', parts: userParts, id: newUserMessageId });
                }

                userInput.value = '';
                userInput.style.height = 'auto';
                chatAttachments = [];
                chatImageUpload.value = '';
                displayChatAttachments();
                suggestionsContainer.classList.add('hidden');
                selectedSuggestionIndex = -1;
                delete userInput.dataset.editingMessageId;
                
                toggleLoading(true); // This will set isGeneratingResponse and update button state

                try {
                    const payload = {
                        contents: conversationHistory,
                    };

                    const responseText = await callGeminiAPI(payload);

                    if (isGeneratingResponse) { // Still check if the user hasn't stopped it during API call
                        const newAiMessageId = `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                        const { messageContentDiv: aiContentDiv, messageDiv: aiMessageDiv } = appendChatMessage('ai', responseText, [], newAiMessageId);
                        conversationHistory.push({ role: 'model', parts: [{ text: responseText }], id: newAiMessageId });

                        // Since Lite version doesn't simulate typing, render and highlight instantly
                        aiContentDiv.innerHTML = marked.parse(responseText);
                        if (typeof Prism !== 'undefined') {
                            Prism.highlightAllUnder(aiMessageDiv);
                        }
                        chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
                        toggleLoading(false);
                        saveCurrentChat();
                    }
                } catch (error) {
                    console.error('Chat API call failed:', error);
                    appendChatMessage('ai', `Oops! Something went wrong. Please try again. (${error.message})`);
                    toggleLoading(false);
                } 
            });
            
            chatImageUpload.addEventListener('change', async (event) => {
                const files = Array.from(event.target.files);
                if (files.length > 0) {
                    for (const file of files) {
                        const allowedTypes = [
                            'image/', 'text/', 'application/pdf',
                            'application/json', 'text/csv', 'application/xml', 'text/markdown'
                        ];
                        const isAllowed = allowedTypes.some(type => file.type.startsWith(type)) || file.name.endsWith('.md');

                        if (isAllowed) {
                            if (file.size > 10 * 1024 * 1024) { 
                                alert(`File "${file.name}" is too large (>${10}MB). Max 10MB per file.`);
                                continue;
                            }
                            try {
                                const { mimeType, data } = await fileToBase64(file);
                                chatAttachments.push({ file, mimeType, data, name: file.name });
                            } catch (error) {
                                alert(`Failed to read chat file ${file.name}.`);
                                console.error('Chat file read error:', error);
                            }
                        } else {
                            alert(`File type not supported for chat: "${file.name}" (${file.type}).`);
                        }
                    }
                    displayChatAttachments();
                    userInput.focus();
                    updateSendButtonState();
                }
                chatImageUpload.value = ''; 
            });

            chatAttachmentsPreviewContainer.addEventListener('click', (event) => {
                const removeBtn = event.target.closest('.remove-attachment-btn');
                if (removeBtn) {
                    const attachmentDiv = removeBtn.closest('[data-index]');
                    if (attachmentDiv) {
                        const index = parseInt(attachmentDiv.dataset.index);
                        chatAttachments.splice(index, 1); 
                        displayChatAttachments(); 
                        userInput.focus();
                        updateSendButtonState();
                    }
                }
            });

            voiceInputBtn.addEventListener('click', () => {
                if (recognition) {
                    if (isVoiceInputActive) {
                        recognition.stop(); 
                    } else {
                        finalTranscript = ''; 
                        recognition.start();
                    }
                } else {
                    alert('Speech recognition is not supported in this browser.');
                }
            });

            chatbotContainer.addEventListener('dragover', (e) => {
                e.preventDefault();
                e.stopPropagation();
                chatbotContainer.classList.add('drag-over-active');
            });

            chatbotContainer.addEventListener('dragleave', (e) => {
                e.preventDefault();
                e.stopPropagation();
                chatbotContainer.classList.remove('drag-over-active');
            });

            chatbotContainer.addEventListener('drop', async (e) => {
                e.preventDefault();
                e.stopPropagation();
                chatbotContainer.classList.remove('drag-over-active');

                const files = Array.from(e.dataTransfer.files);
                if (files.length > 0) {
                    for (const file of files) {
                        const allowedTypes = [
                            'image/', 'text/', 'application/pdf',
                            'application/json', 'text/csv', 'application/xml', 'text/markdown'
                        ];
                        const isAllowed = allowedTypes.some(type => file.type.startsWith(type)) || file.name.endsWith('.md');

                        if (isAllowed) {
                            if (file.size > 10 * 1024 * 1024) { 
                                alert(`File "${file.name}" is too large (>${10}MB). Max 10MB per file.`);
                                continue;
                            }
                            try {
                                const { mimeType, data } = await fileToBase64(file);
                                chatAttachments.push({ file, mimeType, data, name: file.name });
                            } catch (error) {
                                alert(`Failed to read chat file ${file.name}.`);
                                console.error('Chat file read error:', error);
                            }
                        } else {
                            alert(`File type not supported for chat: "${file.name}" (${file.type}).`);
                        }
                    }
                    displayChatAttachments();
                    userInput.focus();
                    updateSendButtonState();
                }
            });
            
            chatHistoryDiv.addEventListener('click', async (event) => {
                const codeCopyButton = event.target.closest('.code-block-copy-button');
                if (codeCopyButton) {
                    const targetId = codeCopyButton.dataset.copyTarget;
                    const codeElement = document.getElementById(targetId);
                    if (codeElement) {
                        const codeToCopy = codeElement.textContent;
                        updateButtonIcon(codeCopyButton, 'check', 'w-4 h-4'); 
                        copyToClipboard(codeToCopy); 
                        setTimeout(() => { 
                            updateButtonIcon(codeCopyButton, 'clipboard', 'w-4 h-4'); 
                        }, 2000);
                        return; 
                    }
                }

                const chatCopyButton = event.target.closest('.copy-message-btn');
                if (chatCopyButton) {
                    const messageId = chatCopyButton.dataset.messageId;
                    const messageContent = messageTextCache.get(messageId); // Get raw text
                    if (messageContent) {
                        updateButtonIcon(chatCopyButton, 'check');
                        copyToClipboard(messageContent); 
                        setTimeout(() => { 
                            updateButtonIcon(chatCopyButton, 'clipboard');
                        }, 2000);
                    } else {
                        alert('Message content not found for copying.');
                    }
                    return; 
                }

                const dictateButton = event.target.closest('.dictate-message-btn');
                if (dictateButton) {
                    const messageId = dictateButton.dataset.messageId;
                    const messageContent = messageTextCache.get(messageId); // Get raw text
                    if (messageContent) {
                        toggleSpeech(messageContent, dictateButton);
                    } else {
                        alert('Message content not found for dictation.');
                    }
                    return; 
                }

                const editButton = event.target.closest('.edit-message-btn');
                if (editButton) {
                    const messageId = editButton.dataset.messageId;
                    const messageDivToEdit = document.querySelector(`.chat-message[data-message-id="${messageId}"]`);
                    
                    if (messageDivToEdit) {
                        const originalIndex = Array.from(chatHistoryDiv.children).indexOf(messageDivToEdit);
                        if (originalIndex !== -1) {
                            const originalMessage = conversationHistory[originalIndex];
                            
                            let originalText = '';
                            let originalAttachments = [];
                            originalMessage.parts.forEach(part => {
                                if (part.text) {
                                    originalText = part.text;
                                } else if (part.inlineData) {
                                    originalAttachments.push({
                                        file: null, 
                                        mimeType: part.inlineData.mimeType,
                                        data: part.inlineData.data,
                                        name: part.inlineData.name || 'Attachment' 
                                    });
                                }
                            });

                            userInput.value = originalText;
                            chatAttachments = originalAttachments; 
                            displayChatAttachments(); 

                            userInput.focus();
                            userInput.style.height = 'auto';
                            userInput.style.height = userInput.scrollHeight + 'px';

                            chatHistoryDiv.querySelectorAll('.chat-message').forEach(msg => msg.classList.remove('editing'));
                            messageDivToEdit.classList.add('editing');

                            userInput.dataset.editingMessageId = messageId;
                            updateButtonIcon(sendButton, 'save', 'w-5 h-5'); // Change icon to 'save' when editing
                            updateSendButtonState(); // Re-enable send button if there's input for saving
                        }
                    }
                    return;
                }

                const regenerateButton = event.target.closest('.regenerate-message-btn');
                if (regenerateButton) {
                    const messageId = regenerateButton.dataset.messageId;
                    const messageDiv = regenerateButton.closest('.chat-message');

                    const aiMessageIndex = Array.from(chatHistoryDiv.children).indexOf(messageDiv);

                    if (aiMessageIndex !== -1) {
                        const aiMsgInHistoryIndex = conversationHistory.findIndex(msg => msg.id === messageId);
                        if (aiMsgInHistoryIndex === -1) {
                            console.error("AI message not found in history for regeneration.");
                            alert("Could not regenerate: message not found in history.");
                            return;
                        }

                        // Slice history *before* this AI message
                        conversationHistory = conversationHistory.slice(0, aiMsgInHistoryIndex);
                        
                        // Remove messages from UI after this AI message (including itself)
                        while (chatHistoryDiv.children.length > aiMessageIndex) {
                            chatHistoryDiv.lastChild.remove();
                        }
                        
                        if (conversationHistory.length > 0) {
                            const lastUserMessage = conversationHistory[conversationHistory.length - 1];
                            if (lastUserMessage.role === 'user' && lastUserMessage.parts) {
                                let userTextForRegen = '';
                                let userAttachmentsForRegen = [];
                                lastUserMessage.parts.forEach(part => {
                                    if (part.text) userTextForRegen = part.text;
                                    if (part.inlineData) userAttachmentsForRegen.push({
                                        mimeType: part.inlineData.mimeType,
                                        data: part.inlineData.data,
                                        name: part.inlineData.name || 'Attachment' 
                                    });
                                });

                                userInput.value = userTextForRegen;
                                chatAttachments = userAttachmentsForRegen; 
                                displayChatAttachments(); 

                                toggleLoading(true);

                                try {
                                    const payload = {
                                        contents: conversationHistory,
                                    };
                                    const responseText = await callGeminiAPI(payload);

                                    if (isGeneratingResponse) { // Check if not stopped during API call
                                        const newAiMessageId = `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                                        const { messageContentDiv: aiContentDiv, messageDiv: aiMessageDiv } = appendChatMessage('ai', responseText, [], newAiMessageId);
                                        conversationHistory.push({ role: 'model', parts: [{ text: responseText }], id: newAiMessageId });

                                        aiContentDiv.innerHTML = marked.parse(responseText);
                                        if (typeof Prism !== 'undefined') {
                                            Prism.highlightAllUnder(aiMessageDiv);
                                        }
                                        chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
                                        toggleLoading(false);
                                        saveCurrentChat();
                                    }
                                } catch (error) {
                                    console.error('Chat API call failed during regeneration:', error);
                                    appendChatMessage('ai', `Oops! Something went wrong during regeneration. Please try again. (${error.message})`);
                                    toggleLoading(false);
                                }

                                // Clear input area after successful "resend" from regeneration
                                userInput.value = '';
                                userInput.style.height = 'auto';
                                chatAttachments = [];
                                chatImageUpload.value = '';
                                displayChatAttachments();
                                suggestionsContainer.classList.add('hidden');
                                selectedSuggestionIndex = -1;
                                delete userInput.dataset.editingMessageId;
                                updateSendButtonState();
                            } else {
                                console.error("Cannot regenerate: Last message in history is not a user message or is malformed.");
                                alert("Could not regenerate. The previous user message was not found or was empty. Starting a new chat.");
                                startNewChat();
                            }
                        } else {
                            alert("Cannot regenerate. No previous user message to base regeneration on. Starting a new chat.");
                            startNewChat();
                        }
                    }
                    return;
                }
            });

            newChatBtnSidebar.addEventListener('click', startNewChat);

            // Add event listeners for the export buttons
            exportTxtBtn.addEventListener('click', exportAsTxt);
            exportPdfBtn.addEventListener('click', exportAsPdf);
            exportMdBtn.addEventListener('click', exportAsMd);
            exportJsonBtn.addEventListener('click', exportAsJson); // New: JSON export listener

            mobileToggleSidebarBtn.addEventListener('click', () => {
                chatSidebar.classList.add('active-mobile-sidebar');
                chatMainContent.classList.remove('sidebar-hidden'); // Ensure main content loses its left radius
                mobileToggleSidebarBtn.style.display = 'none'; 
            });

            toggleSidebarBtn.addEventListener('click', () => {
                chatSidebar.classList.remove('active-mobile-sidebar');
                chatMainContent.classList.add('sidebar-hidden'); // Add back radius to main content
                mobileToggleSidebarBtn.style.display = 'flex'; 
            });

            window.addEventListener('resize', () => {
                const isMobile = window.innerWidth <= 768;
                if (isMobile) {
                    // Mobile view
                    // Hide desktop toggle
                    desktopToggleSidebarBtn.style.display = 'none';

                    // Ensure mobile sidebar rules are applied
                    chatSidebar.classList.remove('hidden-sidebar'); // If you use a 'hidden-sidebar' class for mobile, keep this.
                    if (chatSidebar.classList.contains('active-mobile-sidebar')) {
                        mobileToggleSidebarBtn.style.display = 'none';
                        chatMainContent.classList.remove('sidebar-hidden');
                    } else {
                        mobileToggleSidebarBtn.style.display = 'flex';
                        chatMainContent.classList.add('sidebar-hidden'); // Apply radius if sidebar closed on mobile
                    }
                    toggleSidebarBtn.style.display = 'flex'; // 'X' button inside mobile sidebar

                    // Reset any inline styles from desktop mode
                    chatSidebar.style.width = '';
                    chatSidebar.style.padding = '';
                    chatSidebar.style.overflowY = 'auto'; // Ensure scrollbar for mobile
                } else {
                    // Desktop view
                    // Show desktop toggle, hide mobile toggles
                    desktopToggleSidebarBtn.style.display = 'flex';
                    mobileToggleSidebarBtn.style.display = 'none';
                    toggleSidebarBtn.style.display = 'none';

                    // Ensure mobile sidebar classes are removed
                    chatSidebar.classList.remove('active-mobile-sidebar');

                    // Apply desktop sidebar state based on `isSidebarOpenDesktop`
                    applyDesktopSidebarState();
                }
                createIcons();
            });

            // Initial call on load to set desktop/mobile layout correctly
            if (window.innerWidth > 768) {
                desktopToggleSidebarBtn.style.display = 'flex'; // Show desktop toggle
                applyDesktopSidebarState(); // Apply initial desktop state (sidebar open)
            } else {
                mobileToggleSidebarBtn.style.display = 'flex'; // Show mobile toggle
                chatMainContent.classList.add('sidebar-hidden'); // Sidebar starts closed on mobile, apply radius
            }
        });
    </script>
</body>
</html>

--------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mystic Vision AI Chat</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&family=Montserrat:wght@400;600&display=swap" rel="stylesheet">
    <!-- Tailwind CSS CDN for utility classes -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Marked.js CDN for Markdown parsing -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <!-- Lucide Icons for a modern, futuristic feel -->
    <script src="https://cdn.jsdelivr.net/npm/lucide-dynamic@latest/dist/lucide.min.js"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <!-- PWA Manifest -->
    <link rel="manifest" href="/manifest.json">
    <style>
        /* General Styles - Mystic Vision Theme */
        :root {
            /* Dark Mode Palette (Default) */
            --primary-bg: #0A0A28; /* Even deeper dark blue-purple, almost black */
            --secondary-bg: #15153A; /* Darker purple-blue - container background */
            --tertiary-bg: #22224F; /* Medium dark purple-blue - header/input area/button base */
            --text-color: #E6E6FA; /* Light lavender text for ethereal feel */
            --accent-color: #C070FF; /* Vibrant mystical purple */
            --border-color: #2F2F6A; /* Slightly clearer border */
            --user-bubble: #353570; /* Deeper purple for user */
            --ai-bubble: #1A1A40; /* Slightly different dark purple for AI */
            --input-bg: #0C0C2F; /* Keeps the input field very dark */
            --button-hover-bg: #A040FF; /* Slightly darker accent for hover */
            --shadow-color: rgba(0, 0, 0, 0.6); /* Stronger shadow */
            --code-bg: #0D0D32; /* Code block background */
            --code-text: #F8F8F8; /* Code text color */
            --code-border: #2F2F6A; /* Code border */
            --code-header-bg: #22224F; /* Code header background */
            --code-header-border: #353570; /* Code header border */
            --inline-code-bg: rgba(192, 112, 255, 0.25); /* Inline code background */
            --inline-code-color: var(--accent-color); /* Inline code color */
            --message-action-bg: rgba(10, 10, 26, 0.7); /* Message action background */
            --message-action-user-bg: rgba(53, 53, 112, 0.7); /* Message action background for user messages */
            --message-action-icon: #BEC2D5; /* Lighter icon color */
            --message-action-icon-hover: var(--text-color); /* Message action icon hover color */

            /* Common Accent Colors (for alerts/status) */         
            --accent-error: #ef4444; /* Red for errors */         
            --accent-success: #22c55e; /* Green for success */          

            /* Font Families */         
            --font-family-primary: 'Poppins', sans-serif;         
            --font-family-secondary: 'Montserrat', sans-serif;          

            /* Autocomplete */
            --autocomplete-bg: var(--secondary-bg);
            --autocomplete-border: var(--border-color);
            --autocomplete-text: var(--text-color);
            --autocomplete-hover-bg: var(--tertiary-bg);
            --autocomplete-selected-bg: var(--accent-color);
            --autocomplete-selected-text: white;
        }

        /* Light Mode Palette (Overrides default variables when body has 'light' class) */
        body.light {
            --primary-bg: #F0F4FF; /* Very pale blue-lavender */
            --secondary-bg: #FFFFFF; /* Pure white for container/card background */
            --tertiary-bg: #E0E8FF; /* Pale light blue-purple for header/input area/button base */
            --text-color: #1A0033; /* Very dark purple/black for main text */
            --accent-color: #8C2BFF; /* Slightly richer/darker purple for light mode accent */
            --border-color: #C0C8D8; /* Soft light border */
            --user-bubble: #D8E2FF; /* Light blue-purple, user bubble */
            --ai-bubble: #F0F4FF; /* Even paler lavender, AI bubble */
            --input-bg: #F8F8FD; /* Slightly off-white for input field */
            --button-hover-bg: #B050FF; /* Slightly darker accent for hover in light mode */
            --shadow-color: rgba(0, 0, 0, 0.15); /* Lighter shadow */
            --code-bg: #F5F7FA; /* Lighter background for code in light mode */
            --code-text: #333; /* Code text color */
            --code-border: #D8DCE5; /* Code border */
            --code-header-bg: #E8ECF5; /* Code header background */
            --code-header-border: #D0D4DF; /* Code header border */
            --inline-code-bg: rgba(130, 0, 200, 0.12); /* Inline code background (LM accent with transparency) */
            --inline-code-color: var(--accent-color); /* Inline code color */
            --message-action-bg: rgba(255, 255, 255, 0.8); /* Message action background */
            --message-action-user-bg: rgba(220, 230, 255, 0.8); /* Message action background for user messages */
            --message-action-icon: #666; /* Message action icon color */
            --message-action-icon-hover: var(--text-color); /* Message action icon hover color */

            /* Autocomplete */
            --autocomplete-bg: var(--secondary-bg);
            --autocomplete-border: var(--border-color);
            --autocomplete-text: var(--text-color);
            --autocomplete-hover-bg: var(--tertiary-bg);
            --autocomplete-selected-bg: var(--accent-color);
            --autocomplete-selected-text: white;
        }

        /* Base Body Styles - MODIFIED for full screen */
        body {
            font-family: var(--font-family-primary);
            background: linear-gradient(135deg, var(--primary-bg), var(--secondary-bg));
            color: var(--text-color);
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh; /* Use height for full viewport height */
            width: 100vw; /* Use width for full viewport width */
            overflow: hidden; /* Hide overflow to prevent scrollbars on body */
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            transition: background 0.6s ease, color 0.6s ease;
        }

        /* Chatbot Container (Main Application) - MODIFIED for full screen */
        .chatbot-container {
            background-color: var(--secondary-bg);
            border-radius: 0; /* Remove border-radius for full screen */
            box-shadow: none; /* Remove shadow for full screen */
            width: 100%; /* Occupy full parent width */
            height: 100%; /* Occupy full parent height */
            display: flex;
            flex-direction: column;
            overflow: hidden;
            border: none; /* Remove border for full screen */
            animation: fadeIn 0.8s ease-out;
            position: relative; 
            transition: background-color 0.6s ease, border-color 0.6s ease, box-shadow 0.6s ease;
        }
        /* Keep fadeIn animation */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        /* Header - Adjusted for full screen */
        .chatbot-header {
            background-color: var(--tertiary-bg);
            padding: 20px;
            border-bottom: 2px solid var(--border-color);
            text-align: center;
            border-top-left-radius: 0; /* Adjust for full screen */
            border-top-right-radius: 0; /* Adjust for full screen */
            position: relative;
            overflow: hidden;
            z-index: 10; 
            transition: background-color 0.6s ease, border-color 0.6s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }
        
        .chatbot-header .header-content {
            position: relative;
            z-index: 2;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
        }

        .chatbot-header h1 {
            margin: 0;
            font-size: 2em; 
            color: var(--accent-color);
            font-family: var(--font-family-secondary);
            font-weight: 600;
            letter-spacing: 1px;
            text-shadow: 0 0 10px rgba(192, 112, 255, 0.6);
            transition: color 0.6s ease, text-shadow 0.6s ease;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .chatbot-header .logo {
            height: 2.5em; 
            width: auto;
            object-fit: contain;
            filter: drop-shadow(0 0 5px rgba(192, 112, 255, 0.5));
            transition: filter 0.6s ease;
        }

        .chatbot-header .tagline {
            font-family: var(--font-family-secondary);
            font-size: 0.9em;
            color: var(--text-color);
            opacity: 0.7;
            margin: 0;
            font-style: italic;
            transition: color 0.6s ease;
        }

        .chatbot-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle at center, rgba(192, 112, 255, 0.15) 0%, transparent 70%);
            transform: rotate(45deg);
            animation: headerGlow 8s infinite alternate ease-in-out;
            z-index: 1;
            transition: background 0.6s ease;
        }

        @keyframes headerGlow {
            0% { transform: scale(0.8) rotate(0deg); opacity: 0.6; }
            50% { transform: scale(1.1) rotate(180deg); opacity: 0.8; }
            100% { transform: scale(0.8) rotate(360deg); opacity: 0.6; }
        }

        /* Dark Mode Toggle Switch */
        .dark-mode-container {
            position: absolute;
            top: 20px;
            right: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
            z-index: 3;
            font-family: var(--font-family-primary);
        }
        .dark-mode-container span {
            color: var(--text-color); 
            transition: color 0.6s ease;
        }

        .switch { 
            position: relative;
            display: inline-block;
            width: 56px; 
            height: 30px; 
            border-radius: 15px;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.2);
            border: 1px solid rgba(255,255,255,0.1); 
            transition: background-color 0.6s ease, border-color 0.6s ease;
        }
        .switch input { 
            opacity: 0;
            width: 0;
            height: 0;
        }
        .slider { 
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #4b5563; 
            border-radius: 15px; 
            transition: .4s;
        }
        .slider:before {
            position: absolute;
            content: "";
            height: 22px; 
            width: 22px; 
            left: 4px;
            bottom: 4px;
            background-color: white; 
            border-radius: 50%;
            transition: .4s;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        input:checked + .slider {
            background-color: var(--accent-color); 
        }
        input:checked + .slider:before {
            transform: translateX(26px); 
        }

        /* New Chat Button */
        #newChatBtn {
            position: absolute;
            top: 20px;
            left: 20px;
            background-color: var(--accent-color);
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 0.85em;
            font-family: var(--font-family-primary);
            font-weight: 600;
            cursor: pointer;
            border: none;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: background-color 0.3s ease, transform 0.2s ease;
            z-index: 3;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        #newChatBtn:hover {
            background-color: var(--button-hover-bg);
            transform: translateY(-1px);
        }
        #newChatBtn:active {
            transform: translateY(0);
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        }
        #newChatBtn .lucide {
            width: 1em;
            height: 1em;
        }

        /* Chat History */
        .chat-history {
            flex-grow: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 15px;
            scroll-behavior: smooth;
            padding-bottom: 30px; /* Increased padding to give more space from input */
        }

        .chat-history::-webkit-scrollbar {
            width: 8px;
        }

        .chat-history::-webkit-scrollbar-track {
            background: var(--primary-bg); 
            border-radius: 10px;
            transition: background 0.6s ease;
        }

        .chat-history::-webkit-scrollbar-thumb {
            background-color: var(--accent-color); 
            border-radius: 10px;
            border: 2px solid var(--primary-bg); 
            transition: background-color 0.6s ease, border-color 0.6s ease;
        }

        /* Message Bubbles */
        .chat-message {
            max-width: 80%;
            padding: 12px 18px;
            border-radius: 20px;
            line-height: 1.5;
            word-wrap: break-word;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            animation: slideIn 0.3s ease-out;
            position: relative; 
            padding-bottom: 2.5rem; 
            font-size: 0.95rem; 
            transition: background-color 0.6s ease, color 0.6s ease, background-image 0.6s ease, box-shadow 0.6s ease;
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .chat-message.user {
            background-color: var(--user-bubble);
            color: var(--text-color);
            margin-left: auto; /* Pushes user message to the right */
            border-bottom-right-radius: 5px; 
            background-image: linear-gradient(to bottom right, var(--user-bubble), color-mix(in srgb, var(--user-bubble) 90%, black 10%)); /* Dynamic darker shade */
        }

        .chat-message.ai {
            background-color: var(--ai-bubble);
            color: var(--text-color);
            margin-right: auto; /* Pushes AI message to the left */
            border-bottom-left-radius: 5px; 
            background-image: linear-gradient(to bottom left, var(--ai-bubble), color-mix(in srgb, var(--ai-bubble) 90%, black 10%)); /* Dynamic darker shade */
        }

        /* Markdown Styling within AI messages */
        .chat-message .message-content {
            padding: 0; 
            margin: 0;
        }
        .chat-message.ai .message-content p,
        .chat-message.ai .message-content ul,
        .chat-message.ai .message-content ol,
        .chat-message.ai .message-content h1,
        .chat-message.ai .message-content h2,
        .chat-message.ai .message-content h3,
        .chat-message.ai .message-content blockquote {
            margin-bottom: 1em;
            transition: color 0.6s ease; /* For changing heading colors */
        }
        .chat-message.ai .message-content h1,
        .chat-message.ai .message-content h2,
        .chat-message.ai .message-content h3 {
            color: var(--accent-color); /* Headings use accent color */
        }

        .chat-message.ai .message-content p:last-child,
        .chat-message.ai .message-content ul:last-child,
        .chat-message.ai .message-content ol:last-child,
        .chat-message.ai .message-content blockquote:last-child {
            margin-bottom: 0;
        }
        .chat-message.ai .message-content ul,
        .chat-message.ai .message-content ol {
            padding-left: 1.5em; 
        }
        .chat-message.ai .message-content li {
            margin-bottom: 0.5em;
        }
        .chat-message.ai .message-content strong {
            font-weight: bold;
            color: var(--accent-color); 
            transition: color 0.6s ease;
        }
        .chat-message.ai .message-content em {
            font-style: italic;
        }
        .chat-message.ai .message-content blockquote {
            border-left: 4px solid var(--accent-color); /* Blockquotes use accent color */
            color: var(--text-color); /* Main text color for readability */
            padding-left: 1em;
            margin-left: 0;
            transition: border-color 0.6s ease, color 0.6s ease;
        }

        /* Code block specific styling */
        .code-block-container {
            background-color: var(--code-bg); 
            color: var(--code-text); 
            border-radius: 0.75rem; 
            margin-top: 1rem;
            margin-bottom: 1rem;
            overflow: hidden; 
            border: 1px solid var(--code-border); 
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
            transition: background-color 0.6s ease, color 0.6s ease, border-color 0.6s ease;
        }
        .code-block-container pre {
            margin: 0; 
            padding: 1rem;
            overflow-x: auto; 
            font-family: 'Consolas', 'Fira Code', 'Cascadia Code', monospace; 
            font-size: 0.9em;
            line-height: 1.4;
        }
        .code-block-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: var(--code-header-bg); 
            color: var(--text-color); 
            padding: 0.5rem 1rem;
            border-bottom: 1px solid var(--code-header-border);
            font-size: 0.85em;
            border-top-left-radius: 0.75rem;
            border-top-right-radius: 0.75rem;
            transition: background-color 0.6s ease, color 0.6s ease, border-color 0.6s ease;
        }
        .code-block-copy-button {
            background-color: transparent;
            border: none;
            color: var(--text-color); /* Code header text color */
            cursor: pointer;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            transition: background-color 0.2s ease, color 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.25rem;
            font-size: 0.85em;
        }
        .code-block-copy-button:hover {
            background-color: color-mix(in srgb, var(--code-header-bg) 80%, white 20%); /* Lighter hover based on header */
            color: var(--text-color); 
        }
        /* Inline code */
        .chat-message.ai .message-content code:not(pre > code) {
            background-color: var(--inline-code-bg); 
            border-radius: 0.25rem;
            padding: 0.2em 0.4em;
            font-family: 'Consolas', monospace;
            font-size: 0.9em;
            color: var(--inline-code-color); 
            transition: background-color 0.6s ease, color 0.6s ease;
        }
        /* Links */
        .chat-message.ai .message-content a {
            color: var(--accent-color);
            text-decoration: underline;
            transition: color 0.6s ease;
        }
        .chat-message.ai .message-content a:hover {
            color: var(--button-hover-bg); 
        }

        /* Message Action Buttons (Copy/Dictate) */
        .message-actions {
            position: absolute;
            bottom: 0.5rem;
            right: 1rem;
            display: flex;
            gap: 0.5rem;
            padding: 0.25rem 0.5rem;
            border-radius: 0.75rem;
            backdrop-filter: blur(5px);
            transition: opacity 0.3s ease;
            opacity: 0; 
            z-index: 10;
            background-color: var(--message-action-bg);
        }
        .chat-message:hover .message-actions {
            opacity: 1; 
        }
        .message-actions button {
            background: none;
            border: none;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 0.375rem;
            transition: background-color 0.2s ease, color 0.2s ease;
            display: flex; 
            align-items: center;
            justify-content: center;
        }
        .message-actions button .lucide { 
            color: var(--message-action-icon); 
            width: 1rem;
            height: 1rem;
            transition: color 0.6s ease;
        }
        .message-actions button:hover .lucide {
            color: var(--message-action-icon-hover); 
        }
        .message-actions button:hover {
            background-color: rgba(255, 255, 255, 0.1); 
        }
        .chat-message.user .message-actions {
            background-color: var(--message-action-user-bg);
        }
        /* Specific attachment preview styling within messages (not the input area ones) */
        .chat-message-attachment-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 0.75rem;
            border-radius: 1rem;
            background-color: var(--tertiary-bg); 
            color: var(--text-color); 
            font-size: 0.875rem;
            box-shadow: 0 1px 2px rgba(0,0,0,0.2);
            transition: background-color 0.6s ease, color 0.6s ease, box-shadow 0.6s ease;
        }

        /* Input Area - Adjusted for full screen */
        .chat-input {
            padding: 20px;
            border-top: 2px solid var(--border-color);
            display: flex;
            gap: 10px; 
            align-items: end; 
            background-color: var(--tertiary-bg);
            border-bottom-left-radius: 0; /* Adjust for full screen */
            border-bottom-right-radius: 0; /* Adjust for full screen */
            position: relative; 
            transition: background-color 0.6s ease, border-color 0.6s ease;
            flex-shrink: 0; 
        }

        .chat-input textarea {
            flex-grow: 1;
            padding: 10px 15px; 
            border: 1px solid var(--border-color);
            border-radius: 25px;
            background-color: var(--input-bg);
            color: var(--text-color);
            font-family: var(--font-family-primary);
            font-size: 1em;
            resize: none;
            outline: none;
            box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.3);
            transition: border-color 0.3s ease, background-color 0.3s ease, color 0.6s ease;
            min-height: 40px; 
            height: auto; 
            overflow-y: hidden; 
        }

        .chat-input textarea:focus {
            border-color: var(--accent-color);
            background-color: color-mix(in srgb, var(--primary-bg) 90%, var(--tertiary-bg) 10%); 
        }

        /* Action buttons in input area (Send, Mic, Paperclip) */
        .chat-input .icon-button { 
            background-color: var(--tertiary-bg); 
            color: var(--text-color);
            border: none;
            border-radius: 50%; 
            width: 48px; 
            height: 48px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease, color 0.6s ease;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2); 
            display: flex; 
            align-items: center;
            justify-content: center;
            flex-shrink: 0; 
        }

        .chat-input .icon-button:hover {
            background-color: var(--secondary-bg); 
            transform: translateY(-1px);
        }
        .chat-input .icon-button:active {
            transform: translateY(0);
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        }
        .chat-input .icon-button .lucide {
            width: 1.25em; 
            height: 1.25em;
        }

        #sendButton {
            background-color: var(--accent-color); 
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3); 
            transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
        }
        #sendButton:hover {
            background-color: var(--button-hover-bg);
            transform: translateY(-2px);
        }
        #sendButton:active {
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        }

        /* Loading Indicator */
        .loader-container {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            height: 100%;
        }
        .loader-dot {
            width: 12px;
            height: 12px;
            margin: 0 4px;
            background-color: var(--accent-color);
            border-radius: 50%;
            display: inline-block;
            animation: bounce 1.4s infinite ease-in-out both;
            transition: background-color 0.6s ease;
        }
        .loader-dot:nth-child(1) { animation-delay: -0.32s; }
        .loader-dot:nth-child(2) { animation-delay: -0.16s; }
        .loader-dot:nth-child(3) { animation-delay: 0s; }
        
        @keyframes bounce {
            0%, 80%, 100% {
                transform: scale(0);
                opacity: 0.5;
            }
            40% {
                transform: scale(1.0);
                opacity: 1;
            }
        }
        /* Voice input active state */
        .voice-input-active {
            background-color: var(--accent-error) !important; 
            animation: pulse-red 1s infinite cubic-bezier(0.4, 0, 0.6, 1);
        }
        @keyframes pulse-red {
            0%, 100% { box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7); }
            50% { box-shadow: 0 0 0 10px rgba(239, 68, 68, 0); }
        }

        /* Attachment Preview (in input area) */
        .chat-image {
            max-width: 100%;
            height: auto;
            border-radius: 0.75rem;
            margin-top: 0.5rem;
            display: block;
        }
        #chat-attachments-preview-container {
            background-color: var(--tertiary-bg);
            border-radius: 10px;
            padding: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
            border: 1px solid var(--border-color);
            transition: background-color 0.6s ease, border-color 0.6s ease, box-shadow 0.6s ease;
        }
        .chat-attachment-preview-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 0.75rem;
            border-radius: 1rem;
            background-color: var(--secondary-bg); /* Use secondary for inner items */
            color: var(--text-color); 
            font-size: 0.875rem;
            box-shadow: 0 1px 2px rgba(0,0,0,0.2);
            transition: background-color 0.6s ease, color 0.6s ease, box-shadow 0.6s ease;
        }
        .chat-attachment-preview-item .remove-attachment-btn {
            background: none;
            border: none;
            color: var(--accent-color); 
            cursor: pointer;
            padding: 0.1rem;
            border-radius: 50%;
            transition: background-color 0.2s ease, color 0.6s ease;
        }
        .chat-attachment-preview-item .remove-attachment-btn:hover {
            background-color: rgba(192, 112, 255, 0.2);
        }

        /* Drag and Drop visual feedback for chat window */
        .chatbot-container.drag-over-active {
            border: 2px dashed var(--accent-color);
            box-shadow: 0 0 20px var(--accent-color), 0 0 30px var(--accent-color) inset;
            transition: border-color 0.6s ease, box-shadow 0.6s ease;
        }

        /* Copy Message Toast */
        #copy-message {
            position: fixed;
            bottom: 3rem; 
            left: 50%;
            transform: translateX(-50%);
            padding: 0.75rem 1.5rem;
            background-color: var(--accent-success);
            color: white;
            border-radius: 9999px;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            opacity: 0;
            visibility: hidden;
            transition: all 0.5s ease-in-out;
            z-index: 100;
        }

        #copy-message.show {
            opacity: 1;
            visibility: visible;
        }

        /* Autocomplete Suggestions */
        #suggestions-container {
            position: absolute;
            bottom: 100%; /* Position above the input field */
            left: 0;
            right: 0;
            margin-bottom: 10px; /* Space between input and suggestions */
            background-color: var(--autocomplete-bg);
            border: 1px solid var(--autocomplete-border);
            border-radius: 10px;
            box-shadow: 0 -5px 15px rgba(0,0,0,0.2);
            max-height: 200px;
            overflow-y: auto;
            z-index: 20; /* Ensure it's above other input elements */
            transition: background-color 0.6s ease, border-color 0.6s ease, box-shadow 0.6s ease;
        }
        #suggestions-container ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        #suggestions-container li {
            padding: 10px 15px;
            cursor: pointer;
            color: var(--autocomplete-text);
            transition: background-color 0.2s ease, color 0.6s ease;
        }
        #suggestions-container li:hover,
        #suggestions-container li.selected {
            background-color: var(--autocomplete-hover-bg);
        }
        #suggestions-container li.selected {
            background-color: var(--autocomplete-selected-bg);
            color: var(--autocomplete-selected-text);
        }


        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .chatbot-container {
                width: 100vw; 
                height: 100vh; 
                border-radius: 0;
                margin: 0;
            }

            .chatbot-header {
                padding: 12px; 
                border-top-left-radius: 0;
                border-top-right-radius: 0;
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 5px;
            }
            .chatbot-header h1 {
                font-size: 1.6em;
                margin-top: 10px;
            }
            .chatbot-header .logo {
                height: 1.8em;
            }
            .chatbot-header .tagline {
                font-size: 0.75em;
                margin-bottom: 5px;
            }

            .dark-mode-container {
                position: absolute;
                top: 10px;
                right: 10px;
                gap: 5px;
                font-size: 0.7em;
            }
            .switch {
                width: 40px;
                height: 22px;
                border-radius: 11px;
            }
            .switch .slider:before {
                height: 16px;
                width: 16px;
                left: 3px;
                bottom: 3px;
            }
            input:checked + .slider:before {
                transform: translateX(18px);
            }

            #newChatBtn {
                position: absolute;
                top: 10px;
                left: 10px;
                padding: 6px 10px;
                font-size: 0.7em;
                gap: 3px;
            }
            #newChatBtn .lucide {
                width: 0.7em;
                height: 0.7em;
            }

            .chat-history {
                padding: 10px;
                gap: 8px;
            }

            .chat-message {
                max-width: 95%; /* Wider bubbles for smaller screens */
                padding: 10px 14px;
                border-radius: 16px;
                padding-bottom: 2rem;
                font-size: 0.9rem; /* Slightly larger for readability */
            }

            .message-actions {
                bottom: 0.3rem; 
                right: 0.6rem;
                gap: 0.3rem;
                padding: 0.15rem 0.3rem;
                border-radius: 0.5rem;
            }
            .message-actions button {
                padding: 0.1rem;
            }
            .message-actions button .lucide {
                width: 0.8rem;
                height: 0.8rem;
            }

            .chat-input {
                padding: 10px;
                gap: 6px;
                align-items: center;
                border-bottom-left-radius: 0;
                border-bottom-right-radius: 0;
                flex-wrap: wrap;
            }

            .chat-input textarea {
                padding: 8px 12px; 
                font-size: 0.9em;
                min-height: 38px;
                max-height: 120px;
            }

            .chat-input .icon-button {
                width: 42px;
                height: 42px;
            }
            .chat-input .icon-button .lucide {
                width: 1em;
                height: 1em;
            }

            #chat-attachments-preview-container {
                padding: 6px;
                margin-bottom: 8px;
            }
            .chat-attachment-preview-item {
                font-size: 0.75em;
                padding: 0.3rem 0.5rem;
                border-radius: 0.75rem;
            }
            .chat-attachment-preview-item .remove-attachment-btn .lucide {
                width: 0.7rem;
                height: 0.7rem;
            }

            #copy-message {
                bottom: 1.5rem;
                padding: 0.5rem 1rem;
                font-size: 0.85rem;
            }

            #suggestions-container {
                margin-bottom: 8px;
            }
            #suggestions-container li {
                padding: 8px 12px;
                font-size: 0.85em;
            }
        }
    </style>
</head>
<body class="antialiased dark">
    <div class="chatbot-container">
        <header class="chatbot-header">
            <button id="newChatBtn" title="Start a New Chat">
                <span data-lucide="sparkles" class="w-4 h-4"></span>
                New Chat
            </button>
            <div class="dark-mode-container">
                <span>Light</span>
                <label class="switch">
                    <input type="checkbox" id="dark-mode-toggle">
                    <span class="slider"></span>
                </label>
                <span>Dark</span>
            </div>
            <div class="header-content">
                <h1>
                    <img src="logo.png" alt="Mystic Vision AI Logo" class="logo">
                    Mystic Vision AI
                </h1>
                <p class="tagline">Experience the beyond</p>
            </div>
        </header>
        <div class="chat-history" id="chatHistory">
            <!-- Initial AI message will be added by JS -->
        </div>
        <div class="chat-input" id="chatInputArea">
            <!-- Autocomplete Suggestions Container -->
            <div id="suggestions-container" class="hidden">
                <ul id="suggestions-list"></ul>
            </div>

            <!-- Attachment preview -->
            <!-- Adjusted positioning to be absolute relative to chat-input with a calculated bottom -->
            <div id="chat-attachments-preview-container" class="mb-2 flex flex-wrap items-center gap-2 hidden absolute left-4 right-4" style="bottom: 100%; transform: translateY(-10px);">
                <!-- Attachments previews will be dynamically added here -->
            </div>

            <!-- Voice Input Button -->
            <button id="voice-input-btn" class="icon-button" aria-label="Voice Input">
                <span data-lucide="mic" class="w-5 h-5"></span>
            </button>

            <!-- Attach File Button (uses a label to link to the hidden file input) -->
            <label for="chat-image-upload" id="attach-file-btn" class="icon-button cursor-pointer" aria-label="Attach File">
                <span data-lucide="paperclip" class="w-5 h-5"></span>
            </label>
            <input type="file" id="chat-image-upload" accept="image/*, .txt, .pdf, .csv, .json, .xml, .md" class="hidden" multiple>

            <textarea id="userInput" placeholder="Type your message..." rows="1"></textarea>
            
            <!-- Send Button -->
            <button id="sendButton" class="icon-button">
                <span data-lucide="send" class="w-5 h-5"></span>
            </button>
        </div>
    </div>

    <!-- Temporary message for clipboard copy -->
    <div id="copy-message">Text copied to clipboard!</div>

    <script>
        // !! IMPORTANT: REPLACE WITH YOUR ACTUAL GEMINI API KEY !!
        // !! DO NOT USE THIS METHOD IN PRODUCTION. USE A SERVER-SIDE PROXY. !!
        // The key below is a placeholder and WILL NOT WORK.
        const GEMINI_API_KEY = 'AIzaSyCzx6ReMk8ohPJcCjGwHHzu7SvFccJqAbA'; // <--- REPLACE THIS WITH YOUR ACTUAL KEY
        const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${GEMINI_API_KEY}`;

        // --- Global State Variables and Constants ---
        let conversationHistory = []; // Will be initialized with the first AI message
        let chatAttachments = []; 
        const messageTextCache = new Map(); 
        let currentUtterance = null;
        let isSpeaking = false;
        let SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        let recognition = null;
        let isVoiceInputActive = false;
        let finalTranscript = ''; 
        let selectedSuggestionIndex = -1;

        const initialAIMessage = {
            role: 'model',
            parts: [{ text: 'Greetings, seeker! I am Mystic Vision, an AI designed to help you glimpse the beyond. What wisdom do you seek?' }],
        };

        const autocompleteSuggestions = [
            // General/Utility
            "What is the capital of France?",
            "Explain quantum physics simply.",
            "How does a combustion engine work?",
            "Summarize the plot of Hamlet.",
            "What are the benefits of exercise?",
            "Calculate the square root of 144.",
            "Convert 50 miles to kilometers.",
            "Define artificial intelligence.",
            "What is blockchain technology?",
            "Explain the internet.",
            "Tell me about renewable energy.",
            "What are the phases of the moon?",
            "How do volcanoes erupt?",
            "What causes tides?",
            "What is the speed of light?",
            "How does photosynthesis work?",
            "What are the main types of clouds?",
            "Explain the concept of infinity.",
            "What is the difference between AI and machine learning?",
            "How does GPS work?",

            // Creative Writing/Ideas
            "Write a short story about a talking animal.",
            "Compose a poem about the ocean.",
            "Give me five ideas for a fantasy novel.",
            "Write a dialogue between a robot and a human.",
            "Generate a catchy slogan for a coffee shop.",
            "Describe a futuristic city.",
            "Create a character profile for a wizard.",
            "Write a fairy tale with a modern twist.",
            "Brainstorm names for a new tech startup.",
            "Suggest topics for a blog about travel.",
            "Write an exciting opening paragraph for an adventure story.",
            "Compose a haiku about autumn.",
            "Develop a plot for a sci-fi film.",
            "Write a humorous obituary.",
            "Describe a unique alien species.",

            // Programming/Tech Help
            "How to write a 'Hello, World!' program in Python?",
            "Explain asynchronous JavaScript.",
            "What is the best framework for web development?",
            "How to debug a Java application?",
            "Write a SQL query to select all users.",
            "Explain REST APIs.",
            "What is version control?",
            "How do I install Node.js?",
            "Explain recursion in programming.",
            "What are data structures?",
            "How to optimize a website for speed?",
            "Explain object-oriented programming.",
            "Write a simple HTML structure.",
            "What is cloud computing?",
            "How to secure a web application?",

            // Education/Learning
            "How to study effectively for exams?",
            "Tips for learning a new language.",
            "What are good resources for learning history?",
            "How to improve my public speaking skills?",
            "Suggest a good book for beginners in astrophysics.",
            "What are the benefits of lifelong learning?",
            "How to choose a university major?",
            "Explain critical thinking.",
            "What is metacognition?",
            "How to set SMART goals?",

            // Health/Wellness
            "What are the benefits of a balanced diet?",
            "Suggest a simple home workout routine.",
            "How to reduce stress naturally?",
            "What are common symptoms of flu?",
            "Explain the importance of sleep.",
            "Tips for maintaining mental health.",
            "What foods boost immunity?",
            "How to stay hydrated?",
            "What is mindfulness meditation?",
            "How to improve posture?",

            // Food/Cooking
            "Suggest a quick and healthy dinner recipe.",
            "How to bake a perfect chocolate chip cookie?",
            "What are common cooking herbs?",
            "Explain sous-vide cooking.",
            "Recipe for a vegan lasagna.",
            "How to make sourdough bread?",
            "Best way to store fresh produce.",

            // Travel/Culture
            "What are the top 5 tourist attractions in Rome?",
            "Suggest a budget-friendly travel destination.",
            "How to pack efficiently for a trip?",
            "Tell me about Japanese culture.",
            "What are some famous landmarks in India?",
            "Tips for solo travel.",
            "Explain local customs in Thailand.",

            // Self-Improvement/Productivity
            "How to build good habits?",
            "Tips for time management.",
            "How to overcome procrastination?",
            "Suggest ways to boost creativity.",
            "How to practice active listening?",
            "What are methods for conflict resolution?",
            "How to give constructive feedback?",

            // Environment/Sustainability
            "What is climate change?",
            "How to reduce my carbon footprint?",
            "Explain recycling processes.",
            "What is sustainable living?",
            "Tips for conserving water at home.",

            // Philosophical/Existential (keeping some of the original theme)
            "What is the meaning of life?",
            "How can I find inner peace?",
            "What is intuition?",
            "Explain the concept of enlightenment.",
            "What is the purpose of suffering?",
            "How can I connect with my higher self?",
            "What does synchronicity mean?",
            "Tell me about the law of attraction.",
            "How to cultivate compassion?",
            "What is the significance of dreams?",

            // And more... (Extensive additions)
            "Tell me a fun fact.",
            "What's the origin of the phrase 'break a leg'?",
            "Who invented the telephone?",
            "Explain the stock market.",
            "How to manage personal finances?",
            "What are common cybersecurity threats?",
            "Explain the concept of net neutrality.",
            "What is artificial general intelligence?",
            "How does facial recognition work?",
            "Tell me about virtual reality.",
            "What is augmented reality?",
            "Explain ethical AI.",
            "How to start a podcast?",
            "Tips for public speaking.",
            "What is imposter syndrome?",
            "How to build resilience?",
            "Explain the gig economy.",
            "What is CRISPR technology?",
            "How to make compost?",
            "What are the benefits of gardening?",
            "Tell me about Roman history.",
            "Explain the Cold War.",
            "What were the causes of World War II?",
            "Tell me about ancient Egypt.",
            "What is democracy?",
            "Explain socialism.",
            "What are human rights?",
            "How does voting work?",
            "What is diplomacy?",
            "Tell me about different types of governments.",
            "How does inflation affect the economy?",
            "What is GDP?",
            "Explain interest rates.",
            "What is a recession?",
            "How to save for retirement?",
            "What is compound interest?",
            "Tell me about different investment strategies.",
            "How to create a budget?",
            "What is credit score?",
            "Explain mortgages.",
            "What is insurance?",
            "How to write a resume?",
            "Tips for a job interview.",
            "How to negotiate salary?",
            "What are common career paths in tech?",
            "Explain emotional intelligence.",
            "How to build strong relationships?",
            "Tips for effective communication.",
            "How to handle difficult conversations?",
            "What is empathy?",
            "How to resolve conflict in relationships?",
            "Tell me about different personality types.",
            "What is positive psychology?",
            "How to practice self-care?",
            "What are the signs of burnout?",
            "How to improve focus and concentration?",
            "What is the Pomodoro Technique?",
            "Explain the Eisenhower Matrix.",
            "How to prioritize tasks?",
            "Tips for remote work productivity.",
            "What is digital minimalism?",
            "How to manage screen time?",
            "What are the benefits of digital detox?",
            "Explain the concept of 'flow state'.",
            "How to overcome creative blocks?",
            "What are different learning styles?",
            "Tips for active reading.",
            "How to write an essay?",
            "Explain plagiarism.",
            "What is citation?",
            "How to do research effectively?",
            "What are open educational resources?",
            "Explain the peer review process.",
            "What is gamification in education?",
            "How to teach children about money?",
            "Tips for teaching a new skill.",
            "What is the Socratic method?",
            "Explain experiential learning.",
            "How to foster curiosity?",
            "What is problem-based learning?",
            "Tell me about different teaching philosophies.",
            "How to create engaging presentations?",
            "What are Bloom's Taxonomy levels?",
            "Explain formative assessment.",
            "What is summative assessment?",
            "How to provide effective feedback to students?",
            "Tips for classroom management.",
            "What is differentiated instruction?",
            "How to support students with learning disabilities?",
            "Explain inclusive education.",
            "What is homeschooling?",
            "How to choose the right school?",
            "What are extracurricular activities?",
            "Explain project-based learning.",
            "What is inquiry-based learning?",
            "How to promote critical thinking in students?",
            "What are the benefits of collaborative learning?",
            "How to use technology effectively in education?",
            "Explain blended learning.",
            "What is flipped classroom?",
            "How to assess student performance fairly?",
            "Tips for parent-teacher communication.",
            "What is social-emotional learning?",
            "How to build self-esteem in children?",
            "Explain the growth mindset.",
            "How to encourage creativity in children?",
            "What are different parenting styles?",
            "Tips for dealing with teenage rebellion.",
            "How to foster independence in children?",
            "What is positive reinforcement?",
            "Explain attachment theory.",
            "How to handle sibling rivalry?",
            "Tips for raising resilient children.",
            "What is childhood development?",
            "How to support children's emotional well-being?",
            "Explain the concept of play-based learning.",
            "What are the benefits of outdoor play?",
            "How to choose age-appropriate toys?",
            "What is early childhood education?",
            "Tips for preparing children for kindergarten.",
            "How to teach children to read?",
            "Explain phonics.",
            "What is whole language approach?",
            "How to help children with math?",
            "Tips for science experiments at home.",
            "How to introduce art to children?",
            "What is music education for kids?",
            "How to teach children about nature?",
            "Explain environmental education for kids.",
            "What are the benefits of storytelling for children?",
            "How to encourage imagination in children?",
            "Tips for screen time limits for kids.",
            "What are healthy eating habits for children?",
            "How to deal with picky eaters?",
            "Explain food allergies in children.",
            "How to encourage physical activity in children?",
            "What are developmental milestones?",
            "Tips for potty training.",
            "How to handle temper tantrums?",
            "What is positive discipline?",
            "Explain logical consequences.",
            "How to teach empathy to children?",
            "Tips for teaching generosity.",
            "How to foster gratitude in children?",
            "What is emotional regulation for kids?",
            "How to help children cope with big emotions?",
            "Explain resilience in children.",
            "What are coping mechanisms for kids?",
            "How to build a child's confidence?",
            "Tips for managing sibling relationships.",
            "How to prepare for a new baby?",
            "What is postpartum depression?",
            "How to support a partner after childbirth?",
            "Tips for new parents.",
            "What are common newborn challenges?",
            "How to breastfeed successfully?",
            "Explain bottle feeding.",
            "What is safe sleep for infants?",
            "How to manage infant crying?",
            "Tips for baby soothing techniques.",
            "What is colic?",
            "How to introduce solid foods to babies?",
            "Explain baby-led weaning.",
            "What are common baby illnesses?",
            "How to take a baby's temperature?",
            "Tips for infant first aid.",
            "What is toddler development?",
            "How to handle toddler tantrums?",
            "Explain the 'terrible twos'.",
            "How to encourage speech development in toddlers?",
            "Tips for toilet training toddlers.",
            "What are good toddler activities?",
            "How to promote social skills in toddlers?",
            "Explain parallel play.",
            "What is imaginative play?",
            "How to manage bedtime routines for toddlers?",
            "Tips for dealing with toddler sleep regressions.",
            "What are common toddler fears?",
            "How to ease separation anxiety in toddlers?",
            "Explain positive parenting.",
            "What is gentle parenting?",
            "How to set boundaries with toddlers?",
            "Tips for dealing with toddler biting or hitting.",
            "What is preschool development?",
            "How to prepare a child for preschool?",
            "Explain social skills for preschoolers.",
            "What are good preschool activities?",
            "How to teach preschoolers letters and numbers?",
            "Tips for improving fine motor skills in preschoolers.",
            "What are gross motor skills?",
            "How to encourage independent play in preschoolers?",
            "Explain cooperative play.",
            "What is dramatic play?",
            "How to foster problem-solving skills in preschoolers?",
            "Tips for managing preschooler behavior challenges.",
            "What is kindergarten readiness?",
            "How to support children's transition to school?",
            "Explain school-age development.",
            "What are academic skills for school-age children?",
            "How to help with homework?",
            "Tips for building good study habits.",
            "What are common learning challenges in school-age children?",
            "How to support children with ADHD?",
            "Explain dyslexia.",
            "What are autism spectrum disorders?",
            "How to encourage reading in school-age children?",
            "Tips for developing writing skills.",
            "How to make math fun?",
            "What are benefits of extracurricular activities for school-age children?",
            "How to deal with bullying?",
            "Explain peer pressure.",
            "What is healthy self-esteem in school-age children?",
            "How to teach responsibility to school-age children?",
            "Tips for managing screen time for school-age children?",
            "What is adolescent development?",
            "How to communicate with teenagers?",
            "Explain puberty.",
            "What are common teenage challenges?",
            "How to support teenagers' mental health?",
            "Tips for discussing difficult topics with teenagers.",
            "What is identity formation in adolescence?",
            "How to navigate peer relationships in adolescence?",
            "Explain romantic relationships in adolescence.",
            "What are common teenage stressors?",
            "How to build resilience in teenagers?",
            "Tips for college application process.",
            "What is career exploration for teenagers?",
            "How to teach financial literacy to teenagers?",
            "Explain civic engagement for teenagers.",
            "What are global issues teenagers should know?",
            "How to encourage critical thinking in teenagers?",
            "Tips for managing stress as a teenager.",
            "What are healthy coping mechanisms for teenagers?",
            "How to promote self-advocacy in teenagers?",
            "Explain the concept of consent to teenagers.",
            "What is responsible social media use for teenagers?",
            "How to address cyberbullying?",
            "Tips for safe online interactions for teenagers.",
            "What are warning signs of substance abuse in teenagers?",
            "How to talk to teenagers about sex education?",
            "Explain reproductive health for teenagers.",
            "What are sexually transmitted infections (STIs)?",
            "How to teach healthy relationships to teenagers?",
            "Tips for managing emotions in adolescence.",
            "What is emotional regulation in teenagers?",
            "How to help teenagers develop empathy?",
            "Explain moral development in adolescence.",
            "What is character education for teenagers?",
            "How to encourage volunteering in teenagers?",
            "Tips for building leadership skills in teenagers.",
            "What is entrepreneurship for teenagers?",
            "How to foster innovation in teenagers?",
            "Explain design thinking for teenagers.",
            "What are future job skills?",
            "How to prepare teenagers for the future of work?",
            "Tips for developing a growth mindset in teenagers.",
            "What is neuroplasticity?",
            "How to improve memory?",
            "Explain cognitive biases.",
            "What is decision-making theory?",
            "How to improve problem-solving skills?",
            "Tips for creative thinking techniques.",
            "What is lateral thinking?",
            "How to brainstorm effectively?",
            "Explain mind mapping.",
            "What are logical fallacies?",
            "How to analyze arguments?",
            "Tips for persuasive writing.",
            "What is rhetoric?",
            "How to give a compelling presentation?",
            "Explain nonverbal communication.",
            "What is body language?",
            "How to read facial expressions?",
            "Tips for improving listening skills.",
            "What is active listening?",
            "How to build rapport?",
            "Explain emotional intelligence in leadership.",
            "What is servant leadership?",
            "How to motivate a team?",
            "Tips for conflict resolution in the workplace.",
            "What is negotiation strategy?",
            "How to conduct effective meetings?",
            "Explain project management methodologies.",
            "What is Agile development?",
            "How to manage risk in projects?",
            "Tips for effective delegation.",
            "What is time blocking?",
            "How to use productivity tools?",
            "Explain the 'Getting Things Done' (GTD) method.",
            "What is the 80/20 rule?",
            "How to overcome perfectionism?",
            "Tips for dealing with stress at work.",
            "What is work-life balance?",
            "How to prevent burnout?",
            "Explain mindfulness at work.",
            "What is imposter syndrome in the workplace?",
            "How to build a professional network?",
            "Tips for career advancement.",
            "What is personal branding?",
            "How to write a professional email?",
            "Explain business ethics.",
            "What is corporate social responsibility?",
            "How to build a diverse and inclusive workplace?",
            "Tips for managing remote teams.",
            "What is cybersecurity best practices?",
            "How to protect personal data online?",
            "Explain phishing scams.",
            "What is ransomware?",
            "How to create strong passwords?",
            "Tips for secure browsing.",
            "What is two-factor authentication?",
            "How to use a VPN?",
            "Explain data encryption.",
            "What is cloud security?",
            "How to backup data effectively?",
            "Tips for managing digital privacy.",
            "What is GDPR?",
            "Explain CCPA.",
            "How to identify fake news?",
            "Tips for media literacy.",
            "What is critical thinking about news?",
            "How to verify information online?",
            "Explain logical fallacies in arguments.",
            "What is cognitive bias in decision making?",
            "How to overcome confirmation bias?",
            "Tips for effective communication in a crisis.",
            "What is crisis management?",
            "How to prepare for natural disasters?",
            "Explain first aid basics.",
            "What to do in a fire emergency?",
            "How to perform CPR?",
            "Tips for staying safe online.",
            "What is online etiquette?",
            "How to be a good digital citizen?",
            "Explain responsible AI development.",
            "What are the ethical implications of AI?",
            "How to ensure AI fairness?",
            "Tips for developing trustworthy AI.",
            "What is human-centered AI design?",
            "Explain AI explainability (XAI).",
            "What is value alignment in AI?",
            "How to regulate AI?",
            "Tips for AI policy making.",
            "What is AI governance?",
            "How to promote responsible innovation?",
            "Explain technological singularity.",
            "What is transhumanism?",
            "How to live a minimalist lifestyle?",
            "Tips for decluttering your home.",
            "What are the benefits of minimalism?",
            "How to reduce waste?",
            "Explain composting.",
            "What is upcycling?",
            "How to save energy at home?",
            "Tips for sustainable fashion.",
            "What is ethical consumption?",
            "How to support local businesses?",
            "Explain fair trade.",
            "What is conscious consumerism?",
            "How to reduce plastic use?",
            "Tips for growing your own food.",
            "What are organic farming practices?",
            "Explain permaculture.",
            "What is vertical farming?",
            "How to conserve water in gardening?",
            "Tips for attracting pollinators to your garden.",
            "What are native plants?",
            "How to create a rain garden?",
            "Explain ecological footprint.",
            "What is carbon neutrality?",
            "How to offset carbon emissions?",
            "Tips for renewable energy adoption.",
            "What is solar power?",
            "Explain wind energy.",
            "What are geothermal energy benefits?",
            "How to promote sustainable transportation?",
            "Tips for electric vehicle adoption.",
            "What is public transportation?",
            "How to encourage walking and cycling?",
            "Explain urban planning for sustainability.",
            "What is green building?",
            "How to design energy-efficient homes?",
            "Tips for sustainable waste management.",
            "What is zero-waste living?",
            "How to reduce food waste?",
            "Explain circular economy.",
            "What are challenges of sustainable development?",
            "How to achieve the UN Sustainable Development Goals?",
            "Tips for environmental activism.",
            "What is citizen science?",
            "How to get involved in conservation?",
            "Explain biodiversity loss.",
            "What are endangered species?",
            "How to protect wildlife?",
            "Tips for marine conservation.",
            "What is plastic pollution?",
            "How to clean up oceans?",
            "Explain reforestation efforts.",
            "What are benefits of planting trees?",
            "How to restore wetlands?",
            "Tips for protecting freshwater resources.",
            "What is water scarcity?",
            "How to manage water resources sustainably?",
            "Explain desertification.",
            "What are impacts of deforestation?",
            "How to prevent soil erosion?",
            "Tips for sustainable agriculture.",
            "What is agroforestry?",
            "How to promote regenerative farming?",
            "Explain food security.",
            "What are global hunger issues?",
            "How to ensure equitable food access?",
            "Tips for reducing global poverty.",
            "What is microfinance?",
            "How to support economic development?",
            "Explain social justice.",
            "What are human rights abuses?",
            "How to promote peace and conflict resolution?",
            "Tips for humanitarian aid.",
            "What is disaster relief?",
            "How to support refugees?",
            "Explain global health challenges.",
            "What are pandemics?",
            "How to improve public health?",
            "Tips for disease prevention.",
            "What is universal healthcare?",
            "How to address health disparities?",
            "Explain mental health awareness.",
            "What are common mental health conditions?",
            "How to seek mental health support?",
            "Tips for reducing mental health stigma.",
            "What is cognitive behavioral therapy (CBT)?",
            "Explain dialectical behavior therapy (DBT).",
            "What is psychotherapy?",
            "How to find a good therapist?",
            "Tips for managing anxiety.",
            "What are symptoms of depression?",
            "How to cope with grief?",
            "Explain trauma-informed care.",
            "What is PTSD?",
            "How to support someone with a mental illness?",
            "Tips for self-compassion.",
            "What is positive self-talk?",
            "How to build emotional resilience?",
            "Explain the power of forgiveness.",
            "What is gratitude journaling?",
            "How to practice daily affirmations?",
            "Tips for building a meditation habit.",
            "What are different types of meditation?",
            "How to start a yoga practice?",
            "Explain the benefits of stretching.",
            "What is strength training?",
            "How to improve cardiovascular health?",
            "Tips for a healthy diet.",
            "What are macronutrients?",
            "Explain micronutrients.",
            "What is intermittent fasting?",
            "How to meal prep effectively?",
            "Tips for weight management.",
            "What are signs of healthy eating?",
            "How to overcome emotional eating?",
            "Explain intuitive eating.",
            "What are common food myths?",
            "How to read nutrition labels?",
            "Tips for cooking healthy meals.",
            "What is food safety?",
            "How to prevent foodborne illnesses?",
            "Explain organic vs. conventional food.",
            "What are genetically modified organisms (GMOs)?",
            "How to reduce sugar intake?",
            "Tips for reducing processed foods.",
            "What are healthy snack ideas?",
            "How to stay motivated to exercise?",
            "Explain the benefits of walking.",
            "What is high-intensity interval training (HIIT)?",
            "How to build muscle?",
            "Tips for improving flexibility.",
            "What is functional fitness?",
            "How to prevent sports injuries?",
            "Explain warm-up and cool-down exercises.",
            "What is foam rolling?",
            "How to relieve muscle soreness?",
            "Tips for managing chronic pain.",
            "What are benefits of massage therapy?",
            "Explain acupuncture.",
            "What is chiropractic care?",
            "How to improve sleep hygiene?",
            "Tips for overcoming insomnia.",
            "What are different sleep stages?",
            "How to deal with jet lag?",
            "Explain sleep apnea.",
            "What are benefits of napping?",
            "How to manage shift work sleep disorder?",
            "Tips for creating a relaxing bedtime routine.",
            "What are natural sleep aids?",
            "How to reduce screen time before bed?",
            "Explain the impact of caffeine on sleep.",
            "What are benefits of sunlight exposure?",
            "How to boost vitamin D levels?",
            "Tips for eye health.",
            "What are signs of digital eye strain?",
            "How to protect hearing?",
            "Explain tinnitus.",
            "What are common skin conditions?",
            "How to maintain healthy skin?",
            "Tips for sun protection.",
            "What are signs of skin cancer?",
            "How to manage acne?",
            "Explain eczema.",
            "What is psoriasis?",
            "How to care for hair?",
            "Tips for nail health.",
            "What are signs of dehydration?",
            "How to stay hydrated effectively?",
            "Explain electrolytes.",
            "What are benefits of drinking water?",
            "How to track water intake?",
            "Tips for incorporating more fruits and vegetables.",
            "What are benefits of fiber?",
            "Explain probiotics.",
            "What are prebiotics?",
            "How to improve gut health?",
            "Tips for managing digestive issues.",
            "What is IBS?",
            "Explain Crohn's disease.",
            "What is ulcerative colitis?",
            "How to manage acid reflux?",
            "Tips for a healthy colon.",
            "What are benefits of meditation for digestion?",
            "How to reduce inflammation through diet?",
            "Explain autoimmune diseases.",
            "What is chronic fatigue syndrome?",
            "How to manage fibromyalgia?",
            "Tips for living with diabetes.",
            "What are symptoms of high blood sugar?",
            "How to manage blood pressure?",
            "Explain cholesterol levels.",
            "What are signs of heart attack?",
            "How to prevent stroke?",
            "Tips for bone health.",
            "What is osteoporosis?",
            "How to maintain joint health?",
            "Explain arthritis.",
            "What are benefits of Omega-3 fatty acids?",
            "How to boost brain health?",
            "Tips for preventing cognitive decline.",
            "What are signs of dementia?",
            "How to support brain aging?",
            "Explain neurodegenerative diseases.",
            "What is Parkinson's disease?",
            "How to manage Alzheimer's disease?",
            "Tips for improving memory and focus.",
            "What are brain training exercises?",
            "How to learn new skills to boost brain health?",
            "Explain the benefits of reading for the brain.",
            "What is neurodiversity?",
            "How to support neurodivergent individuals?",
            "Tips for understanding autism spectrum.",
            "What is ADHD management?",
            "How to help someone with dyslexia?",
            "Explain the concept of neurotypical.",
            "What are sensory processing issues?",
            "How to create sensory-friendly environments?",
            "Tips for effective communication with neurodivergent people.",
            "What is social communication disorder?",
            "How to foster inclusivity for all abilities?",
            "Explain universal design.",
            "What are assistive technologies?",
            "How to advocate for disability rights?",
            "Tips for being an ally to marginalized groups.",
            "What is intersectionality?",
            "How to understand privilege?",
            "Explain systemic racism.",
            "What is unconscious bias?",
            "How to challenge discrimination?",
            "Tips for promoting equality.",
            "What is diversity and inclusion (D&I)?",
            "How to build an equitable society?",
            "Explain the role of education in social change.",
            "What are civil rights movements?",
            "How to engage in peaceful protests?",
            "Tips for community organizing.",
            "What is grassroots activism?",
            "How to create social impact?",
            "Explain philanthropy.",
            "What are non-profit organizations?",
            "How to volunteer effectively?",
            "Tips for ethical consumerism.",
            "What is impact investing?",
            "How to support fair trade initiatives?",
            "Explain corporate social responsibility.",
            "What are sustainable business practices?",
            "How to measure social impact?",
            "Tips for ethical leadership.",
            "What is servant leadership?",
            "How to build a purpose-driven organization?",
            "Explain stakeholder capitalism.",
            "What are B Corps?",
            "How to balance profit and purpose?",
            "Tips for social entrepreneurship.",
            "What is disruptive innovation?",
            "How to foster creativity in business?",
            "Explain design thinking for problem-solving.",
            "What are lean startup principles?",
            "How to conduct market research?",
            "Tips for developing a business plan.",
            "What is intellectual property?",
            "How to protect your brand?",
            "Explain trademark and copyright.",
            "What are patents?",
            "How to raise capital for a startup?",
            "Tips for pitching to investors.",
            "What is venture capital?",
            "Explain angel investors.",
            "What are crowdfunding platforms?",
            "How to manage business finances?",
            "Tips for financial forecasting.",
            "What is break-even analysis?",
            "How to optimize cash flow?",
            "Explain profit and loss statements.",
            "What is a balance sheet?",
            "How to interpret financial ratios?",
            "Tips for effective budgeting.",
            "What is risk management in business?",
            "How to create a crisis management plan?",
            "Explain business continuity planning.",
            "What are cybersecurity risks for businesses?",
            "How to protect business data?",
            "Tips for data privacy compliance.",
            "What is GDPR for businesses?",
            "How to build a strong company culture?",
            "Explain employee engagement.",
            "What are performance management strategies?",
            "How to provide constructive feedback to employees?",
            "Tips for conflict resolution in teams.",
            "What is diversity and inclusion in HR?",
            "How to recruit top talent?",
            "Explain onboarding processes.",
            "What are employee benefits?",
            "How to manage employee compensation?",
            "Tips for leadership development.",
            "What is succession planning?",
            "How to foster innovation in the workplace?",
            "Explain change management.",
            "What is organizational development?",
            "How to build a learning organization?",
            "Tips for continuous improvement.",
            "What is Six Sigma?",
            "Explain Lean methodology.",
            "What is Total Quality Management (TQM)?",
            "How to conduct a SWOT analysis?",
            "Tips for strategic planning.",
            "What is competitive analysis?",
            "How to identify market trends?",
            "Explain customer relationship management (CRM).",
            "What are sales strategies?",
            "How to develop a marketing plan?",
            "Tips for digital marketing.",
            "What is content marketing?",
            "Explain SEO best practices.",
            "What is social media marketing?",
            "How to run effective ad campaigns?",
            "Tips for email marketing.",
            "What is influencer marketing?",
            "How to measure marketing ROI?",
            "Explain brand building.",
            "What is brand identity?",
            "How to create a strong brand message?",
            "Tips for public relations.",
            "What is crisis communication?",
            "How to manage a brand's reputation?",
            "Explain customer service excellence.",
            "What are key performance indicators (KPIs)?",
            "How to use data analytics in business?",
            "Tips for business intelligence.",
            "What is big data?",
            "Explain cloud computing for business.",
            "What are enterprise resource planning (ERP) systems?",
            "How to use AI in business operations?",
            "Tips for automation in business.",
            "What is robotic process automation (RPA)?",
            "How to implement machine learning in business?",
            "Explain the Internet of Things (IoT) in industry.",
            "What is Industry 4.0?",
            "How to leverage augmented reality in business?",
            "Tips for virtual reality applications in enterprise.",
            "What is quantum computing?",
            "Explain the future of work.",
            "What are trends in remote work?",
            "How to design hybrid work models?",
            "Tips for fostering collaboration in distributed teams.",
            "What is employee well-being in the workplace?",
            "How to support mental health at work?",
            "Explain stress management for employees.",
            "What is resilience in the workplace?",
            "How to promote a positive work environment?",
            "Tips for building psychological safety at work.",
            "What is inclusive leadership?",
            "How to address unconscious bias in hiring?",
            "Explain diversity recruitment strategies.",
            "What is equity in the workplace?",
            "How to create belonging at work?",
            "Tips for culturally competent leadership.",
            "What is global citizenship?",
            "How to understand different cultures?",
            "Explain cross-cultural communication.",
            "What are global etiquette rules?",
            "How to manage international teams?",
            "Tips for working abroad.",
            "What is expat life?",
            "How to adjust to a new country?",
            "Explain cultural shock.",
            "What are common travel scams?",
            "How to stay safe while traveling?",
            "Tips for responsible tourism.",
            "What is ecotourism?",
            "How to minimize environmental impact while traveling?",
            "Explain sustainable tourism practices.",
            "What are voluntourism opportunities?",
            "How to choose an ethical volunteer program?",
            "Tips for learning about local traditions.",
            "What are intangible cultural heritage?",
            "How to protect historical sites?",
            "Explain heritage tourism.",
            "What is pilgrimage tourism?",
            "How to respect sacred places?",
            "Tips for adventure travel.",
            "What are extreme sports?",
            "How to prepare for a hiking trip?",
            "Explain backpacking essentials.",
            "What is glamping?",
            "How to choose camping gear?",
            "Tips for wildlife viewing.",
            "What are safari ethics?",
            "How to photograph nature responsibly?",
            "Explain astrophotography.",
            "What is urban exploration?",
            "How to practice street photography?",
            "Tips for portrait photography.",
            "What are landscape photography techniques?",
            "How to use natural light in photography?",
            "Explain composition rules in photography.",
            "What is post-processing in photography?",
            "How to edit photos in Lightroom?",
            "Tips for using Photoshop.",
            "What are video editing software options?",
            "How to create a short film?",
            "Explain documentary filmmaking.",
            "What is animation?",
            "How to draw cartoons?",
            "Tips for digital art creation.",
            "What are graphic design principles?",
            "How to create a logo?",
            "Explain typography basics.",
            "What are color theory principles?",
            "How to design a website?",
            "Tips for UX/UI design.",
            "What is user research?",
            "How to conduct usability testing?",
            "Explain wireframing and prototyping.",
            "What are front-end development technologies?",
            "How to learn React.js?",
            "Tips for back-end development.",
            "What is Python for data science?",
            "How to use R for statistical analysis?",
            "Explain machine learning algorithms.",
            "What is deep learning?",
            "How to build a neural network?",
            "Tips for natural language processing (NLP).",
            "What is computer vision?",
            "How to apply AI in healthcare?",
            "Explain AI in finance.",
            "What are applications of AI in education?",
            "How to use AI in marketing?",
            "Tips for AI-powered customer service.",
            "What is AI ethics?",
            "How to ensure AI transparency?",
            "Explain AI bias.",
            "What are ethical guidelines for AI?",
            "How to develop responsible AI systems?",
            "Tips for AI governance frameworks.",
            "What is the future of AI?",
            "How will AI change society?",
            "Explain the concept of superintelligence.",
            "What are risks of advanced AI?",
            "How to prepare for an AI-driven future?",
            "Tips for human-AI collaboration.",
            "What is the singularity?",
            "How to balance technological progress with human values?",
            "Explain the role of philosophy in AI.",
            "What is consciousness?",
            "How does the brain work?",
            "Tips for understanding neuroscience.",
            "What are mental models?",
            "How to improve cognitive function?",
            "Explain neurofeedback.",
            "What are brainwave states?",
            "How to enhance creativity through brain training?",
            "Tips for improving memory recall.",
            "What is mnemonics?",
            "How to learn faster?",
            "Explain spaced repetition.",
            "What are active recall techniques?",
            "Tips for note-taking strategies.",
            "What is Cornell Notes system?",
            "How to use mind maps for learning?",
            "Explain Feynman technique.",
            "What are different learning theories?",
            "How to apply constructivism in education?",
            "Tips for project-based learning.",
            "What is inquiry-based science?",
            "How to teach coding to kids?",
            "Explain robotics for education.",
            "What are benefits of AI in education?",
            "How to use virtual reality for learning?",
            "Tips for augmented reality in classrooms.",
            "What is gamified learning?",
            "How to design educational games?",
            "Explain serious games for training.",
            "What are simulations in education?",
            "How to use digital storytelling in the classroom?",
            "Tips for creating educational videos.",
            "What are podcasts for learning?",
            "How to use social media for educational purposes responsibly?",
            "Explain online collaboration tools for students.",
            "What are virtual field trips?",
            "How to leverage open educational resources (OER)?",
            "Tips for copyright and fair use in education.",
            "What is academic integrity?",
            "How to prevent plagiarism among students?",
            "Explain ethical research practices.",
            "What are student data privacy concerns?",
            "How to protect student information?",
            "Tips for responsible use of AI by students.",
            "What is AI literacy?",
            "How to teach students about AI?",
            "Explain the societal impact of AI for young learners.",
            "What are career opportunities in AI?",
            "How to prepare students for an AI-driven workforce?",
            "Tips for developing future-ready skills.",
            "What is emotional intelligence for students?",
            "How to teach empathy and compassion?",
            "Explain conflict resolution skills for children.",
            "What are positive communication techniques for students?",
            "How to build resilience in young learners?",
            "Tips for fostering a growth mindset in the classroom.",
            "What is self-regulation for students?",
            "How to manage stress in school?",
            "Explain mindfulness practices for students.",
            "What are positive psychology principles in education?",
            "How to promote happiness and well-being in schools?",
            "Tips for character education.",
            "What are values education approaches?",
            "How to teach ethics to children?",
            "Explain civic responsibility for students.",
            "What is global awareness in education?",
            "How to foster intercultural understanding?",
            "Tips for promoting human rights education.",
            "What are peace education strategies?",
            "How to teach about sustainable development goals?",
            "Explain environmental stewardship for kids.",
            "What is climate literacy?",
            "How to engage students in environmental action?",
            "Tips for community service learning projects.",
            "What are benefits of volunteering for students?",
            "How to promote leadership skills in school?",
            "Explain entrepreneurship education for youth.",
            "What are financial literacy programs for students?",
            "How to teach personal finance skills?",
            "Tips for career counseling for teenagers.",
            "What are vocational education pathways?",
            "How to prepare for higher education?",
            "Explain college application essays.",
            "What are scholarship opportunities?",
            "How to choose the right college major?",
            "Tips for career planning.",
            "What is lifelong learning?",
            "How to continuously develop new skills?",
            "Explain reskilling and upskilling.",
            "What are future skills for the workplace?",
            "How to adapt to changing job markets?",
            "Tips for career transitions.",
            "What is personal development?",
            "How to set personal goals?",
            "Explain habits and routines for success.",
            "What are productivity hacks?",
            "How to manage time effectively?",
            "Tips for overcoming procrastination.",
            "What is self-discipline?",
            "How to build motivation?",
            "Explain the power of positive thinking.",
            "What are visualization techniques?",
            "How to use affirmations for personal growth?",
            "Tips for gratitude practice.",
            "What is mindfulness in daily life?",
            "How to reduce stress and anxiety?",
            "Explain relaxation techniques.",
            "What are breathing exercises?",
            "How to practice meditation for beginners?",
            "Tips for improving sleep quality.",
            "What are healthy eating habits?",
            "How to maintain a balanced diet?",
            "Explain the benefits of regular exercise.",
            "What is a holistic approach to health?",
            "How to boost your immune system?",
            "Tips for managing chronic conditions.",
            "What is preventive healthcare?",
            "How to find a good doctor?",
            "Explain patient advocacy.",
            "What are health insurance options?",
            "How to understand medical billing?",
            "Tips for navigating the healthcare system.",
            "What is mental well-being?",
            "How to identify signs of mental health issues?",
            "Explain therapy options.",
            "What are support groups?",
            "How to help someone with depression?",
            "Tips for suicide prevention.",
            "What is substance abuse awareness?",
            "How to seek help for addiction?",
            "Explain recovery process.",
            "What are signs of an unhealthy relationship?",
            "How to set healthy boundaries?",
            "Tips for effective communication in relationships.",
            "What is conflict resolution in personal relationships?",
            "How to build trust in relationships?",
            "Explain healthy dating practices.",
            "What are signs of domestic violence?",
            "How to seek help for abuse?",
            "Tips for building self-esteem.",
            "What is self-love?",
            "How to practice self-compassion?",
            "Explain body positivity.",
            "What is imposter syndrome?",
            "How to overcome self-doubt?",
            "Tips for building confidence.",
            "What is resilience in adults?",
            "How to cope with stress and adversity?",
            "Explain post-traumatic growth.",
            "What are different types of intelligence?",
            "How to improve emotional intelligence?",
            "Tips for developing social skills.",
            "What is empathy vs. sympathy?",
            "How to be a better listener?",
            "Explain assertive communication.",
            "What is non-violent communication?",
            "How to give and receive feedback effectively?",
            "Tips for public speaking anxiety.",
            "What is charisma?",
            "How to build rapport quickly?",
            "Explain negotiation skills.",
            "What are conflict management styles?",
            "How to mediate a dispute?",
            "Tips for teamwork and collaboration.",
            "What is effective leadership?",
            "How to motivate others?",
            "Explain delegation strategies.",
            "What is coaching and mentoring?",
            "How to inspire creativity in a team?",
            "Tips for managing diverse teams.",
            "What is cross-cultural competence?",
            "How to resolve cultural misunderstandings?",
            "Explain global awareness for professionals.",
            "What are international business etiquette rules?",
            "How to adapt to new work environments?",
            "Tips for career planning and development.",
            "What is a personal mission statement?",
            "How to identify your strengths and weaknesses?",
            "Explain career mapping.",
            "What are job search strategies?",
            "How to write a compelling resume?",
            "Tips for successful job interviews.",
            "What is networking for career advancement?",
            "How to use LinkedIn effectively?",
            "Explain personal branding for professionals.",
            "What is salary negotiation?",
            "How to manage career transitions?",
            "Tips for entrepreneurship for beginners.",
            "What is a business model canvas?",
            "How to validate a business idea?",
            "Explain lean startup methodology.",
            "What are minimum viable products (MVPs)?",
            "How to secure startup funding?",
            "Tips for pitching to investors.",
            "What is venture capital funding?",
            "How to build a startup team?",
            "Explain intellectual property protection.",
            "What are legal considerations for startups?",
            "How to create a marketing strategy for a small business?",
            "Tips for social media marketing for businesses.",
            "What is content marketing for startups?",
            "How to measure marketing campaign effectiveness?",
            "Explain customer acquisition strategies.",
            "What is customer retention?",
            "How to provide excellent customer service?",
            "Tips for building customer loyalty.",
            "What is public relations for businesses?",
            "How to manage negative publicity?",
            "Explain crisis communication for companies.",
            "What are ethical business practices?",
            "How to implement corporate social responsibility?",
            "Tips for sustainable business models.",
            "What is green business?",
            "How to reduce environmental impact in business?",
            "Explain circular economy principles for companies.",
            "What are certifications for sustainable businesses?",
            "How to measure environmental performance?",
            "Tips for supply chain sustainability.",
            "What is ethical sourcing?",
            "How to ensure fair labor practices?",
            "Explain responsible consumption and production.",
            "What are UN Sustainable Development Goals for business?",
            "How to report on sustainability efforts?",
            "Tips for engaging employees in sustainability.",
            "What is corporate governance?",
            "How to ensure board diversity?",
            "Explain shareholder activism.",
            "What are regulations for publicly traded companies?",
            "How to manage mergers and acquisitions?",
            "Tips for business expansion strategies.",
            "What is international trade?",
            "How to export goods and services?",
            "Explain import regulations.",
            "What are global supply chain challenges?",
            "How to mitigate geopolitical risks for businesses?",
            "Tips for navigating international markets.",
            "What is foreign exchange risk?",
            "How to manage currency fluctuations?",
            "Explain international financial reporting standards.",
            "What are global tax considerations?",
            "How to comply with international business laws?",
            "Tips for cross-border investments.",
            "What is the World Trade Organization (WTO)?",
            "How do trade agreements work?",
            "Explain economic sanctions.",
            "What are trade wars?",
            "How to assess country risk?",
            "Tips for political risk analysis.",
            "What is the role of diplomacy in international business?",
            "How to negotiate with international partners?",
            "Explain cultural intelligence for business leaders.",
            "What are communication styles across cultures?",
            "How to build trust in global teams?",
            "Tips for managing cultural differences in the workplace.",
            "What is virtual team management?",
            "How to foster collaboration in remote global teams?",
            "Explain digital nomad lifestyle.",
            "What are remote work trends?",
            "How to build a successful distributed company?",
            "Tips for managing time zones effectively.",
            "What is the future of work post-pandemic?",
            "How will automation affect jobs?",
            "Explain the gig economy's impact on employment.",
            "What are new job roles in emerging technologies?",
            "How to prepare for job displacement?",
            "Tips for reskilling and upskilling for automation.",
            "What is continuous learning in the workplace?",
            "How to develop adaptability in your career?",
            "Explain the importance of soft skills.",
            "What are critical thinking skills for the future?",
            "How to improve problem-solving abilities?",
            "Tips for fostering creativity in your career.",
            "What is emotional intelligence in the professional world?",
            "How to build strong professional networks?",
            "Explain mentorship and sponsorship in career growth.",
            "What are leadership development programs?",
            "How to become an effective leader?",
            "Tips for strategic thinking in leadership.",
            "What is change leadership?",
            "How to navigate organizational change?",
            "Explain innovation management.",
            "What are trends in organizational culture?",
            "How to build a positive and inclusive workplace culture?",
            "Tips for employee well-being initiatives.",
            "What is mental health support in the workplace?",
            "How to prevent burnout in high-stress jobs?",
            "Explain work-life integration.",
            "What are flexible work arrangements?",
            "How to manage stress and anxiety at work?",
            "Tips for promoting psychological safety.",
            "What is diversity, equity, and inclusion (DEI) in organizations?",
            "How to implement DEI strategies effectively?",
            "Explain unconscious bias training.",
            "What are microaggressions in the workplace?",
            "How to create a sense of belonging for all employees?",
            "Tips for allyship in the workplace.",
            "What is inclusive hiring?",
            "How to reduce bias in recruitment?",
            "Explain fair compensation practices.",
            "What are performance reviews best practices?",
            "How to give constructive feedback effectively?",
            "Tips for managing difficult conversations at work.",
            "What is conflict resolution in teams?",
            "How to build high-performing teams?",
            "Explain team dynamics.",
            "What are leadership styles?",
            "How to choose the right leadership approach?",
            "Tips for motivating diverse teams.",
            "What is servant leadership in practice?",
            "How to empower employees?",
            "Explain delegation techniques.",
            "What are effective meeting strategies?",
            "How to run productive brainstorming sessions?",
            "Tips for decision-making in teams.",
            "What is agile project management?",
            "How to implement Scrum methodology?",
            "Explain Kanban boards.",
            "What are project management software tools?",
            "How to manage project risks?",
            "Tips for stakeholder management.",
            "What is resource allocation in projects?",
            "How to track project progress?",
            "Explain project closure best practices.",
            "What is quality management in projects?",
            "How to conduct post-mortems for projects?",
            "Tips for continuous improvement in operations.",
            "What is Lean Six Sigma?",
            "How to optimize business processes?",
            "Explain supply chain management strategies.",
            "What are logistics and transportation trends?",
            "How to manage inventory effectively?",
            "Tips for warehouse optimization.",
            "What is e-commerce fulfillment?",
            "How to handle returns and reverse logistics?",
            "Explain retail operations management.",
            "What are customer experience (CX) strategies?",
            "How to map the customer journey?",
            "Tips for enhancing customer satisfaction.",
            "What is net promoter score (NPS)?",
            "How to collect customer feedback?",
            "Explain customer service best practices.",
            "What are chatbots for customer support?",
            "How to use AI in customer service?",
            "Tips for personalizing customer interactions.",
            "What is customer relationship management (CRM) software?",
            "How to implement a CRM system?",
            "Explain sales process optimization.",
            "What are B2B sales strategies?",
            "How to cold call effectively?",
            "Tips for lead generation.",
            "What is conversion rate optimization?",
            "How to build a sales funnel?",
            "Explain marketing automation.",
            "What are email marketing best practices?",
            "How to design effective landing pages?",
            "Tips for search engine marketing (SEM).",
            "What is Google Ads?",
            "How to optimize for local SEO?",
            "Explain content strategy for websites.",
            "What are types of blog content?",
            "How to write engaging headlines?",
            "Tips for social media content creation.",
            "What is video marketing?",
            "How to use TikTok for business?",
            "Explain Instagram marketing strategies.",
            "What are LinkedIn marketing best practices?",
            "How to build a brand community online?",
            "Tips for online reputation management.",
            "What is public relations for startups?",
            "How to write a press release?",
            "Explain media relations.",
            "What are crisis communication plans?",
            "How to manage negative online reviews?",
            "Tips for building brand loyalty.",
            "What is experiential marketing?",
            "How to create memorable brand experiences?",
            "Explain cause marketing.",
            "What are corporate partnerships?",
            "How to measure marketing campaign ROI?",
            "Tips for analytics and reporting in marketing.",
            "What is A/B testing?",
            "How to use Google Analytics?",
            "Explain data visualization for marketing insights.",
            "What are market research methods?",
            "How to conduct surveys effectively?",
            "Tips for competitor analysis.",
            "What is market segmentation?",
            "How to identify target audiences?",
            "Explain product development process.",
            "What are stages of the product lifecycle?",
            "How to launch a new product successfully?",
            "Tips for product pricing strategies.",
            "What is product management?",
            "How to work with engineering teams?",
            "Explain user stories and product backlogs.",
            "What are agile product development principles?",
            "How to conduct user acceptance testing (UAT)?",
            "Tips for managing product roadmaps.",
            "What is product market fit?",
            "How to scale a product?",
            "Explain product growth strategies.",
            "What are strategies for product iteration?",
            "How to sunset a product?",
            "Tips for building minimum viable products (MVPs).",
            "What is design thinking in product development?",
            "How to conduct user interviews?",
            "Explain prototyping tools.",
            "What are usability heuristics?",
            "How to perform heuristic evaluation?",
            "Tips for accessibility in design.",
            "What is inclusive design?",
            "How to design for diverse users?",
            "Explain ethical design principles.",
            "What are dark patterns in UX?",
            "How to design for privacy?",
            "Tips for creating user-centered designs.",
            "What is information architecture?",
            "How to organize content for usability?",
            "Explain navigation design.",
            "What are interaction design principles?",
            "How to design intuitive interfaces?",
            "Tips for creating delightful user experiences.",
            "What is animation in UI design?",
            "How to use microinteractions effectively?",
            "Explain haptic feedback in UI.",
            "What are responsive web design principles?",
            "How to design for mobile first?",
            "Tips for cross-browser compatibility.",
            "What is progressive web app (PWA) development?",
            "How to optimize website performance?",
            "Explain critical rendering path.",
            "What are web accessibility standards?",
            "How to make websites accessible for all users?",
            "Tips for search engine optimization (SEO) for designers.",
            "What is Google's Core Web Vitals?",
            "How to improve website SEO?",
            "Explain schema markup.",
            "What are backlinks and link building?",
            "How to conduct keyword research?",
            "Tips for on-page SEO optimization.",
            "What is technical SEO?",
            "How to audit website SEO?",
            "Explain SEO tools.",
            "What are content delivery networks (CDNs)?",
            "How to secure a website?",
            "Tips for preventing cyber attacks.",
            "What is a firewall?",
            "How to use SSL certificates?",
            "Explain data encryption in web security.",
            "What are common web vulnerabilities?",
            "How to prevent SQL injection?",
            "Tips for preventing cross-site scripting (XSS).",
            "What is authentication and authorization?",
            "How to implement secure user logins?",
            "Explain password hashing.",
            "What are API security best practices?",
            "How to secure cloud applications?",
            "Tips for secure coding practices.",
            "What is penetration testing?",
            "How to conduct a security audit?",
            "Explain incident response plans.",
            "What are disaster recovery strategies?",
            "How to perform data backups and recovery?",
            "Tips for business continuity planning.",
            "What is IT governance?",
            "How to manage IT risks?",
            "Explain IT service management (ITSM).",
            "What are ITIL frameworks?",
            "How to manage IT projects?",
            "Tips for IT budgeting.",
            "What is cloud cost management?",
            "How to optimize cloud resources?",
            "Explain serverless computing.",
            "What are containerization technologies like Docker?",
            "How to use Kubernetes for orchestration?",
            "Tips for DevOps practices.",
            "What is continuous integration/continuous delivery (CI/CD)?",
            "How to automate software deployments?",
            "Explain infrastructure as code (IaC).",
            "What are security automation tools?",
            "How to implement DevSecOps?",
            "Tips for site reliability engineering (SRE).",
            "What is observability in software systems?",
            "How to monitor application performance?",
            "Explain logging and tracing.",
            "What are alert management systems?",
            "How to troubleshoot complex systems?",
            "Tips for incident post-mortems.",
            "What is chaos engineering?",
            "How to build resilient systems?",
            "Explain fault tolerance.",
            "What are distributed systems challenges?",
            "How to design scalable architectures?",
            "Tips for microservices architecture.",
            "What is event-driven architecture?",
            "How to use message queues?",
            "Explain data streaming technologies.",
            "What are database design principles?",
            "How to choose the right database?",
            "Tips for NoSQL databases.",
            "What is graph database?",
            "How to optimize database performance?",
            "Explain database security.",
            "What are data warehousing concepts?",
            "How to build a data lake?",
            "Tips for ETL processes.",
            "What is business intelligence dashboards?",
            "How to create interactive reports?",
            "Explain data storytelling.",
            "What are benefits of data governance?",
            "How to ensure data quality?",
            "Tips for data privacy regulations (e.g., CCPA, GDPR).",
            "What is ethical data use?",
            "How to prevent algorithmic bias?",
            "Explain responsible AI development.",
            "What are fairness metrics in machine learning?",
            "How to ensure AI transparency and explainability?",
            "Tips for AI auditing.",
            "What is federated learning?",
            "How to train AI models with privacy preservation?",
            "Explain differential privacy.",
            "What are synthetic data generation methods?",
            "How to secure machine learning models?",
            "Tips for adversarial machine learning.",
            "What is model interpretability?",
            "How to debug machine learning models?",
            "Explain model monitoring and maintenance.",
            "What is MLOps?",
            "How to deploy machine learning models in production?",
            "Tips for versioning machine learning models.",
            "What are machine learning platforms?",
            "How to use cloud AI services?",
            "Explain custom machine learning models.",
            "What are deep neural networks?",
            "How to train convolutional neural networks (CNNs)?",
            "Tips for recurrent neural networks (RNNs).",
            "What are transformers in NLP?",
            "How to fine-tune pre-trained models?",
            "Explain generative adversarial networks (GANs).",
            "What are reinforcement learning applications?",
            "How to build intelligent agents?",
            "Tips for natural language understanding (NLU).",
            "What is natural language generation (NLG)?",
            "How to perform sentiment analysis?",
            "Explain named entity recognition (NER).",
            "What are text summarization techniques?",
            "How to build a chatbot?",
            "Tips for voice assistants development.",
            "What is computer vision in robotics?",
            "How to use object detection models?",
            "Explain image segmentation.",
            "What are facial recognition technologies?",
            "How to apply computer vision in security?",
            "Tips for developing augmented reality (AR) applications.",
            "What is virtual reality (VR) for training?",
            "How to create immersive experiences?",
            "Explain mixed reality (MR).",
            "What are applications of VR/AR in healthcare?",
            "How to use AR for remote assistance?",
            "Tips for developing games with AR/VR.",
            "What is game design theory?",
            "How to create game mechanics?",
            "Explain level design.",
            "What are types of video game genres?",
            "How to monetize games?",
            "Tips for indie game development.",
            "What is game engine development?",
            "How to use Unity for game creation?",
            "Explain Unreal Engine.",
            "What are tools for 3D modeling?",
            "How to animate 3D characters?",
            "Tips for character rigging.",
            "What is texture mapping?",
            "How to optimize game assets?",
            "Explain game physics engines.",
            "What are artificial intelligence in games?",
            "How to design game AI?",
            "Tips for pathfinding algorithms.",
            "What is procedural content generation?",
            "How to implement networking in games?",
            "Explain multiplayer game architectures.",
            "What are security considerations for online games?",
            "How to prevent cheating in games?",
            "Tips for game testing and quality assurance.",
            "What is game localization?",
            "How to market a video game?",
            "Explain esports and competitive gaming.",
            "What are streaming platforms for games?",
            "How to become a professional gamer?",
            "Tips for content creation as a streamer.",
            "What is game development boot camp?",
            "How to learn game programming?",
            "Explain game art and animation courses.",
            "What are sound design principles for games?",
            "How to compose game music?",
            "Tips for writing game narratives.",
            "What is world-building in games?",
            "How to create compelling game characters?",
            "Explain branching narratives in games.",
            "What are interactive storytelling techniques?",
            "How to design puzzle games?",
            "Tips for educational game design.",
            "What is serious games development?",
            "How to use games for training and simulation?",
            "Explain gamification in business.",
            "What are elements of gamification?",
            "How to apply gamification to education?",
            "Tips for designing reward systems.",
            "What is behavioral economics?",
            "How to influence user behavior ethically?",
            "Explain nudges in design.",
            "What are ethical considerations in persuasive design?",
            "How to design for positive habits?",
            "Tips for breaking bad habits.",
            "What is habit formation theory?",
            "How to use triggers, routines, and rewards?",
            "Explain the Fogg Behavior Model.",
            "What is the power of small wins?",
            "How to build self-efficacy?",
            "Tips for setting challenging but achievable goals.",
            "What is deliberate practice?",
            "How to learn from failures?",
            "Explain resilience and grit.",
            "What are characteristics of successful people?",
            "How to develop a growth mindset?",
            "Tips for cultivating emotional intelligence.",
            "What is positive psychology in practice?",
            "How to find your purpose in life?",
            "Explain meaning-making.",
            "What are values-based living principles?",
            "How to align actions with values?",
            "Tips for cultivating gratitude.",
            "What is forgiveness and its benefits?",
            "How to practice self-compassion?",
            "Explain the power of mindfulness.",
            "What are meditation techniques for stress relief?",
            "How to cultivate inner peace?",
            "Tips for managing anxiety and worry.",
            "What is cognitive restructuring?",
            "How to challenge negative thoughts?",
            "Explain behavioral activation.",
            "What are coping skills for depression?",
            "How to build a support system?",
            "Tips for effective communication in relationships.",
            "What is active listening?",
            "How to resolve conflicts constructively?",
            "Explain empathetic responding.",
            "What are healthy boundaries in relationships?",
            "How to build trust and intimacy?",
            "Tips for navigating difficult conversations.",
            "What is nonviolent communication?",
            "How to express needs clearly?",
            "Explain the impact of body language.",
            "What are signs of healthy attachment?",
            "How to heal from relationship trauma?",
            "Tips for self-love and self-respect.",
            "What is emotional regulation?",
            "How to manage strong emotions?",
            "Explain distress tolerance skills.",
            "What are mindfulness-based stress reduction techniques?",
            "How to practice radical acceptance?",
            "Tips for building resilience after trauma.",
            "What is post-traumatic growth?",
            "How to seek professional help for mental health?",
            "Explain different types of therapy.",
            "What are benefits of counseling?",
            "How to find a good therapist?",
            "Tips for medication management for mental health.",
            "What is crisis intervention?",
            "How to support someone in crisis?",
            "Explain suicide prevention strategies.",
            "What are signs of addiction?",
            "How to seek help for substance use disorder?",
            "Tips for recovery and relapse prevention.",
            "What is harm reduction?",
            "How to support a loved one with addiction?",
            "Explain codependency.",
            "What are boundaries for healthy relationships?",
            "How to practice self-care to prevent burnout?",
            "Tips for managing work-life balance.",
            "What is digital detox?",
            "How to create a healthy relationship with technology?",
            "Explain conscious consumption.",
            "What are sustainable living practices?",
            "How to reduce your environmental footprint?",
            "Tips for mindful eating.",
            "What is intuitive eating?",
            "How to foster positive body image?",
            "Explain healthy lifestyle choices.",
            "What are benefits of physical activity?",
            "How to incorporate exercise into your routine?",
            "Tips for improving sleep hygiene.",
            "What is stress management?",
            "How to practice relaxation techniques?",
            "Explain the importance of hydration.",
            "What are superfoods?",
            "How to boost your immune system naturally?",
            "Tips for maintaining gut health.",
            "What is the microbiome?",
            "How to reduce inflammation through diet?",
            "Explain chronic disease prevention.",
            "What are benefits of preventative care?",
            "How to manage chronic conditions?",
            "Tips for healthy aging.",
            "What is brain health?",
            "How to prevent cognitive decline?",
            "Explain neuroplasticity and learning.",
            "What are memory-boosting techniques?",
            "How to improve focus and concentration?",
            "Tips for lifelong learning.",
            "What is intellectual curiosity?",
            "How to stay mentally active?",
            "Explain the power of reading.",
            "What are benefits of learning a new language?",
            "How to play brain games?",
            "Tips for creative problem-solving.",
            "What is divergent thinking?",
            "How to foster innovation?",
            "Explain design thinking process.",
            "What are ideation techniques?",
            "How to brainstorm effectively?",
            "Tips for overcoming creative blocks.",
            "What is artistic expression?",
            "How to find your creative outlet?",
            "Explain the benefits of hobbies.",
            "What are ways to relax and de-stress?",
            "How to enjoy leisure time fully?",
            "Tips for finding joy in everyday life.",
            "What is the pursuit of happiness?",
            "How to cultivate optimism?",
            "Explain resilience in challenging times.",
            "What is post-traumatic growth?",
            "How to build meaningful relationships?",
            "Tips for fostering connection.",
            "What is the importance of community?",
            "How to give back to society?",
            "Explain philanthropy and altruism.",
            "What are different forms of volunteering?",
            "How to make a positive impact?",
            "Tips for advocacy and activism.",
            "What is social justice?",
            "How to promote equality and equity?",
            "Explain human rights.",
            "What are ethical dilemmas?",
            "How to make ethical decisions?",
            "Tips for moral reasoning.",
            "What is critical thinking in daily life?",
            "How to analyze information effectively?",
            "Explain logical fallacies.",
            "What are biases in thinking?",
            "How to avoid misinformation?",
            "Tips for media literacy.",
            "What is responsible digital citizenship?",
            "How to manage your online presence?",
            "Explain cyber security for individuals.",
            "What are common online scams?",
            "How to protect your privacy online?",
            "Tips for strong password creation.",
            "What is two-factor authentication (2FA)?",
            "How to recognize phishing emails?",
            "Explain identity theft prevention.",
            "What are VPNs and why use them?",
            "How to secure your smart home devices?",
            "Tips for safe online shopping.",
            "What is data breach notification?",
            "How to respond to a data breach?",
            "Explain ransomware attacks.",
            "What are computer viruses and malware?",
            "How to keep your software updated?",
            "Tips for secure Wi-Fi usage.",
            "What is public Wi-Fi safety?",
            "How to use a password manager?",
            "Explain digital footprint.",
            "What are privacy settings on social media?",
            "How to delete personal data online?",
            "Tips for managing online reputation.",
            "What is cancel culture?",
            "How to navigate online discourse responsibly?",
            "Explain digital well-being.",
            "What is screen time management?",
            "How to reduce digital distractions?",
            "Tips for a healthy relationship with social media.",
            "What is social media addiction?",
            "How to do a digital detox?",
            "Explain tech-life balance.",
            "What are benefits of unplugging?",
            "How to foster real-world connections?",
            "Tips for intentional technology use.",
            "What is slow living?",
            "How to embrace simplicity?",
            "Explain mindful consumption.",
            "What are benefits of decluttering?",
            "How to organize your home effectively?",
            "Tips for minimalist living.",
            "What is zero-waste lifestyle?",
            "How to reduce plastic waste?",
            "Explain composting at home.",
            "What are sustainable fashion choices?",
            "How to reduce your carbon footprint?",
            "Tips for energy conservation.",
            "What is renewable energy at home?",
            "How to grow your own food?",
            "Explain urban gardening.",
            "What are permaculture principles?",
            "How to support local food systems?",
            "Tips for ethical eating.",
            "What is plant-based diet?",
            "How to reduce meat consumption?",
            "Explain sustainable seafood choices.",
            "What are benefits of buying local?",
            "How to support fair trade products?",
            "Tips for eco-friendly transportation.",
            "What is active transportation?",
            "How to use public transit efficiently?",
            "Explain electric vehicles (EVs).",
            "What are benefits of biking?",
            "How to make your home more energy efficient?",
            "Tips for water conservation at home.",
            "What is rain harvesting?",
            "How to reduce water waste?",
            "Explain responsible waste management.",
            "What are recycling best practices?",
            "How to dispose of hazardous waste?",
            "Tips for preventing pollution.",
            "What is air quality monitoring?",
            "How to reduce indoor air pollution?",
            "Explain noise pollution effects.",
            "What are light pollution solutions?",
            "How to protect biodiversity?",
            "Tips for wildlife conservation.",
            "What is habitat restoration?",
            "How to support endangered species?",
            "Explain the impact of climate change on ecosystems.",
            "What are climate change mitigation strategies?",
            "How to adapt to climate change impacts?",
            "Tips for climate resilience.",
            "What is carbon sequestration?",
            "How to promote reforestation?",
            "Explain sustainable forestry.",
            "What are ocean conservation efforts?",
            "How to reduce plastic in oceans?",
            "Tips for marine life protection.",
            "What is coral reef conservation?",
            "How to prevent overfishing?",
            "Explain sustainable fisheries.",
            "What are wetlands restoration projects?",
            "How to protect freshwater sources?",
            "Tips for water quality improvement.",
            "What is environmental justice?",
            "How to address environmental racism?",
            "Explain indigenous environmental knowledge.",
            "What are traditional ecological practices?",
            "How to integrate indigenous perspectives in conservation?",
            "Tips for citizen advocacy for environmental issues.",
            "What is environmental policy?",
            "How to engage with local government on environmental issues?",
            "Explain international environmental agreements.",
            "What are green technologies?",
            "How to invest in renewable energy?",
            "Tips for sustainable finance.",
            "What is impact investing?",
            "How to measure environmental social governance (ESG) performance?",
            "Explain corporate sustainability reporting.",
            "What are green jobs?",
            "How to pursue a career in sustainability?",
            "Tips for environmental education.",
            "What is outdoor learning?",
            "How to connect children with nature?",
            "Explain nature-based solutions.",
            "What are urban green spaces?",
            "How to design sustainable cities?",
            "Tips for community gardening.",
            "What is food sovereignty?",
            "How to promote local food systems?",
            "Explain resilient food systems.",
            "What are permaculture design principles?",
            "How to build a food forest?",
            "Tips for zero-waste cooking.",
            "What is food waste reduction?",
            "How to compost food scraps?",
            "Explain circular economy models for food.",
            "What are sustainable agriculture practices?",
            "How to support regenerative farming?",
            "Tips for ethical eating choices."
        ];

        // --- DOM Elements (Declared here, assigned in load event) ---
        let chatbotContainer;
        let chatHistoryDiv;
        let userInput;
        let sendButton;
        let darkModeToggle;
        let copyMessage;
        let newChatBtn;
        let chatAttachmentsPreviewContainer;
        let chatImageUpload;
        let voiceInputBtn;
        let suggestionsContainer;
        let suggestionsList;

        // --- Lucide Icon Helper ---
        const createIcons = () => {
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        };

        function updateButtonIcon(buttonElement, newIconName, classList = 'w-4 h-4') {
            let currentIconSvg = buttonElement.querySelector('.lucide');
            if (currentIconSvg) {
                currentIconSvg.remove();
            }

            const newIconSpan = document.createElement('span');
            newIconSpan.setAttribute('data-lucide', newIconName);
            newIconSpan.className = classList; 

            buttonElement.appendChild(newIconSpan);
           
            createIcons(); 
        }

        // --- File Handling Helpers ---
        const fileToBase64 = (file) => {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve({
                    mimeType: file.type || 'application/octet-stream', 
                    data: reader.result.split(',')[1]
                });
                reader.onerror = error => reject(error);
                reader.readAsDataURL(file);
            });
        };

        function getFileIcon(mimeType) {
            if (mimeType.startsWith('image/')) return 'image';
            if (mimeType === 'application/pdf') return 'file-text';
            if (mimeType.includes('text/')) return 'file-text';
            if (mimeType.includes('csv') || mimeType.includes('excel')) return 'file-spreadsheet';
            if (mimeType.includes('json') || mimeType.includes('xml') || mimeType.includes('code') || mimeType.includes('markdown')) return 'file-code';
            return 'file';
        }

        // --- Markdown.js Custom Renderer for Code Blocks ---
        const renderer = {
            code(token) { 
                const actualCodeContent = token.text; 
                const lang = token.lang;             

                const languageDisplay = lang ? `<span class="text-xs font-semibold uppercase text-gray-400">${lang}</span>` : '';
                const uniqueId = `code-block-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                
                const escapedCode = actualCodeContent.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');

                return `
                    <div class="code-block-container">
                        <div class="code-block-header">
                            ${languageDisplay}
                            <button class="code-block-copy-button" data-copy-target="${uniqueId}">
                                <span data-lucide="clipboard" class="w-4 h-4"></span>
                                Copy code
                            </button>
                        </div>
                        <pre><code id="${uniqueId}">${escapedCode}</code></pre>
                    </div>
                `;
            }
        };
        marked.use({ renderer });

        // --- Chat UI & Logic ---
        function appendChatMessage(role, text, attachments = []) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('chat-message', role);
            
            const messageId = `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
            messageDiv.dataset.messageId = messageId;
            
            let contentHTML = '';
            let rawMessageContentForCache = ''; 

            if (role === 'user') {
                rawMessageContentForCache = `You: ${text}`;
                contentHTML += `<span class="font-bold">You:</span> ${text}`;
                if (attachments.length > 0) {
                    contentHTML += `<div class="mt-2 flex flex-wrap gap-2">`;
                    attachments.forEach(attachment => {
                        if (attachment.mimeType.startsWith('image/')) {
                            contentHTML += `<img src="data:${attachment.mimeType};base64,${attachment.data}" alt="${attachment.name || 'User attachment'}" class="chat-image w-24 h-24 object-cover">`;
                        } else {
                            contentHTML += `
                                <div class="chat-message-attachment-item">
                                    <span data-lucide="${getFileIcon(attachment.mimeType)}" class="w-4 h-4 flex-shrink-0"></span>
                                    <span class="truncate max-w-[120px]">${attachment.name || 'File'}</span>
                                </div>
                            `;
                        }
                    });
                    contentHTML += `</div>`;
                    rawMessageContentForCache += `\n[Attachments: ${attachments.map(a => a.name).join(', ')}]`;
                }
            } else { 
                rawMessageContentForCache = `AI: ${text}`;
                contentHTML = `<div class="message-content">${marked.parse(text)}</div>`;
            }
            
            messageTextCache.set(messageId, rawMessageContentForCache); 

            const actionsHTML = `
                <div class="message-actions">
                    <button class="copy-message-btn" title="Copy message" data-message-id="${messageId}">
                        <span data-lucide="clipboard" class="w-4 h-4"></span>
                    </button>
                    <button class="dictate-message-btn" title="Dictate message" data-message-id="${messageId}">
                        <span data-lucide="volume-2" class="w-4 h-4"></span>
                    </button>
                </div>
            `;
            
            messageDiv.innerHTML = contentHTML + actionsHTML;
            chatHistoryDiv.appendChild(messageDiv);
            
            setTimeout(() => {
                messageDiv.style.transform = 'scale(1)';
            }, 10);
            
            chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
            
            createIcons(); 
        }

        function toggleLoading(show) {
            let loadingIndicator = document.getElementById('loadingIndicator');
            if (show) {
                if (!loadingIndicator) {
                    loadingIndicator = document.createElement('div');
                    loadingIndicator.id = 'loadingIndicator';
                    loadingIndicator.classList.add('p-4', 'text-center', 'text-gray-500', 'text-sm', 'ai-message'); 
                    loadingIndicator.innerHTML = `
                        <div class="loader-container h-8">
                            <div class="loader-dot"></div>
                            <div class="loader-dot"></div>
                            <div class="loader-dot"></div>
                        </div>
                        <span class="mt-2 block">AI is typing...</span>
                    `;
                    chatHistoryDiv.appendChild(loadingIndicator);
                }
                loadingIndicator.style.display = 'flex';
                loadingIndicator.style.flexDirection = 'column'; 
                chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
            } else {
                if (loadingIndicator) {
                    loadingIndicator.remove(); 
                }
            }
        }

        function displayChatAttachments() {
            chatAttachmentsPreviewContainer.innerHTML = '';
            if (chatAttachments.length > 0) {
                chatAttachmentsPreviewContainer.classList.remove('hidden');
                chatAttachments.forEach((attachment, index) => {
                    const attachmentDiv = document.createElement('div');
                    attachmentDiv.classList.add('chat-attachment-preview-item');
                    attachmentDiv.dataset.index = index;

                    let previewContent = '';
                    if (attachment.mimeType.startsWith('image/')) {
                        previewContent = `<img src="data:${attachment.mimeType};base64,${attachment.data}" alt="${attachment.name}" class="w-8 h-8 object-cover rounded-md">`;
                    } else {
                        previewContent = `<span data-lucide="${getFileIcon(attachment.mimeType)}" class="w-5 h-5 flex-shrink-0"></span>`;
                    }

                    attachmentDiv.innerHTML = `
                        ${previewContent}
                        <span class="truncate max-w-[100px]">${attachment.name}</span>
                        <button class="remove-attachment-btn">
                            <span data-lucide="x" class="w-4 h-4"></span>
                        </button>
                    `;
                    chatAttachmentsPreviewContainer.appendChild(attachmentDiv);
                });
                createIcons(); 
            } else {
                chatAttachmentsPreviewContainer.classList.add('hidden');
            }
        }

        function showCopyMessage() {
            copyMessage.classList.add('show');
            setTimeout(() => {
                copyMessage.classList.remove('show');
            }, 3000);
        }

        function copyToClipboard(text) { 
            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(text)
                    .then(() => {
                        showCopyMessage();
                    })
                    .catch(err => {
                        console.error('Failed to copy: ', err);
                        alert('Failed to copy text. Please copy manually.'); 
                    });
            } else {
                const tempTextArea = document.createElement('textarea');
                tempTextArea.value = text;
                document.body.appendChild(tempTextArea);
                tempTextArea.select();
                try {
                    document.execCommand('copy');
                    showCopyMessage();
                } catch (err) {
                    console.error('Failed to copy (fallback):', err);
                    alert('Failed to copy text. Please copy manually.'); 
                }
                document.body.removeChild(tempTextArea);
            }
        }

        function toggleSpeech(text, buttonElement) {
            if (!window.speechSynthesis) {
                alert('Speech synthesis not supported in this browser.');
                return;
            }

            if (isSpeaking && currentUtterance && currentUtterance.text === text) {
                if (window.speechSynthesis.paused) {
                    window.speechSynthesis.resume();
                    updateButtonIcon(buttonElement, 'pause');
                } else {
                    window.speechSynthesis.pause();
                    updateButtonIcon(buttonElement, 'volume-2');
                }
            } else {
                startSpeech(text, buttonElement);
            }
        }

        function startSpeech(text, buttonElement) {
            if (window.speechSynthesis.speaking || window.speechSynthesis.paused) {
                window.speechSynthesis.cancel();
            }

            document.querySelectorAll('.dictate-message-btn').forEach(btn => {
                if (btn !== buttonElement) { 
                    updateButtonIcon(btn, 'volume-2'); 
                }
            });

            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'en-US'; 

            utterance.onstart = () => {
                isSpeaking = true;
                currentUtterance = utterance;
                updateButtonIcon(buttonElement, 'pause');
            };
            utterance.onend = () => {
                isSpeaking = false;
                currentUtterance = null;
                updateButtonIcon(buttonElement, 'volume-2');
            };
            utterance.onerror = (event) => {
                console.error('Speech synthesis error:', event.error);
                alert('Failed to dictate message. Check console for details.');
                isSpeaking = false;
                currentUtterance = null;
                updateButtonIcon(buttonElement, 'volume-2');
            };

            window.speechSynthesis.speak(utterance);
        }

        // --- API Call Function ---
        async function callGeminiAPI(payload) {
            if (GEMINI_API_KEY === "YOUR_GEMINI_API_KEY_HERE" || !GEMINI_API_KEY || GEMINI_API_KEY === "") { 
                throw new Error("API Key is not set or is the default placeholder. Please replace 'YOUR_GEMINI_API_KEY_HERE' in the script with your actual Gemini API key.");
            }

            let response;
            let result;
            let success = false;
            let retryCount = 0;
            const maxRetries = 3;
            let delay = 1000; 

            while (retryCount < maxRetries && !success) {
                try {
                    response = await fetch(API_URL, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (response.status === 429) { 
                        if (retryCount < maxRetries - 1) {
                            console.warn(`API rate limit exceeded. Retrying in ${delay / 1000}s...`);
                            await new Promise(res => setTimeout(res, delay));
                            delay *= 2; 
                            retryCount++;
                        } else {
                            throw new Error('API rate limit exceeded. Please try again later.');
                        }
                    } else if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(`API error: ${response.status} ${response.statusText} - ${errorData.error?.message || 'Unknown error'}`);
                    } else {
                        result = await response.json();
                        success = true;
                    }
                } catch (err) {
                    if (retryCount < maxRetries - 1) {
                        console.warn(`Fetch error: ${err.message}. Retrying in ${delay / 1000}s...`);
                        await new Promise(res => setTimeout(res, delay));
                        delay *= 2;
                        retryCount++;
                    } else {
                        throw err; 
                    }
                }
            }
            
            if (result && result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                return result.candidates[0].content.parts[0].text;
            } else {
                throw new Error('Failed to get a valid response from the AI. No candidates found or content is empty.');
            }
        }

        // --- Autocomplete Functions ---
        function filterSuggestions(query) {
            if (!query) return [];
            const lowerQuery = query.toLowerCase();
            return autocompleteSuggestions.filter(s => s.toLowerCase().includes(lowerQuery));
        }

        function displaySuggestions(suggestions) {
            suggestionsList.innerHTML = '';
            suggestionsContainer.classList.add('hidden');
            selectedSuggestionIndex = -1;

            if (suggestions.length === 0) {
                return;
            }

            suggestions.forEach((suggestion, index) => {
                const li = document.createElement('li');
                li.textContent = suggestion;
                li.dataset.index = index;
                li.addEventListener('click', () => {
                    userInput.value = suggestion;
                    userInput.focus();
                    suggestionsContainer.classList.add('hidden');
                    userInput.style.height = 'auto'; 
                    userInput.style.height = userInput.scrollHeight + 'px';
                });
                suggestionsList.appendChild(li);
            });
            suggestionsContainer.classList.remove('hidden');
        }

        function navigateSuggestions(direction) {
            const items = Array.from(suggestionsList.children);
            if (items.length === 0) return;

            if (selectedSuggestionIndex !== -1) {
                items[selectedSuggestionIndex].classList.remove('selected');
            }

            if (direction === 'down') {
                selectedSuggestionIndex = (selectedSuggestionIndex + 1) % items.length;
            } else if (direction === 'up') {
                selectedSuggestionIndex = (selectedSuggestionIndex - 1 + items.length) % items.length;
            }

            items[selectedSuggestionIndex].classList.add('selected');
            items[selectedSuggestionIndex].scrollIntoView({ block: 'nearest' });
            userInput.value = items[selectedSuggestionIndex].textContent; // Auto-fill on arrow key
            userInput.style.height = 'auto'; 
            userInput.style.height = userInput.scrollHeight + 'px';
        }

        function selectCurrentSuggestion() {
            if (selectedSuggestionIndex !== -1) {
                const selectedText = suggestionsList.children[selectedSuggestionIndex].textContent;
                userInput.value = selectedText;
            }
            suggestionsContainer.classList.add('hidden');
            selectedSuggestionIndex = -1;
        }

        // --- New Chat Function ---
        function startNewChat() {
            if (window.speechSynthesis.speaking) {
                window.speechSynthesis.cancel();
                isSpeaking = false;
                currentUtterance = null;
                document.querySelectorAll('.dictate-message-btn').forEach(btn => updateButtonIcon(btn, 'volume-2'));
            }

            chatHistoryDiv.innerHTML = ''; // Clear existing messages
            conversationHistory = []; // Reset conversation history
            chatAttachments = []; // Clear attachments
            chatImageUpload.value = ''; // Clear file input
            displayChatAttachments(); // Hide attachment preview
            userInput.value = '';
            userInput.style.height = 'auto'; 
            messageTextCache.clear(); // Clear message text cache
            suggestionsContainer.classList.add('hidden'); // Hide suggestions
            selectedSuggestionIndex = -1;

            // Add the initial AI message
            conversationHistory.push(initialAIMessage);
            appendChatMessage('ai', initialAIMessage.parts[0].text);
            
            userInput.focus();
        }

        // --- Paste Functionality ---
        async function processPastedFile(file) {
            const allowedTypes = [
                'image/', 'text/', 'application/pdf',
                'application/json', 'text/csv', 'application/xml', 'text/markdown'
            ];
            const isAllowed = allowedTypes.some(type => file.type.startsWith(type)) || file.name.endsWith('.md');

            if (isAllowed) {
                if (file.size > 10 * 1024 * 1024) { 
                    alert(`File "${file.name}" is too large (>10MB). Max 10MB per file.`);
                    return;
                }
                try {
                    const { mimeType, data } = await fileToBase64(file);
                    chatAttachments.push({ file, mimeType, data, name: file.name });
                } catch (error) {
                    alert(`Failed to read pasted file ${file.name}.`);
                    console.error('Pasted file read error:', error);
                }
            } else {
                alert(`Pasted file type not supported: "${file.name}" (${file.type}).`);
            }
        }

        // --- Initialization on Load ---
        window.addEventListener('load', () => {
            // --- Assign DOM Elements after the page is fully loaded ---
            chatbotContainer = document.querySelector('.chatbot-container');
            chatHistoryDiv = document.getElementById('chatHistory');
            userInput = document.getElementById('userInput');
            sendButton = document.getElementById('sendButton');
            darkModeToggle = document.getElementById('dark-mode-toggle');
            copyMessage = document.getElementById('copy-message');
            newChatBtn = document.getElementById('newChatBtn');
            chatAttachmentsPreviewContainer = document.getElementById('chat-attachments-preview-container');
            chatImageUpload = document.getElementById('chat-image-upload');
            voiceInputBtn = document.getElementById('voice-input-btn');
            suggestionsContainer = document.getElementById('suggestions-container');
            suggestionsList = document.getElementById('suggestions-list');

            createIcons();
            userInput.style.height = userInput.scrollHeight + 'px';

            // Initialize Dark Mode based on localStorage or default
            const isDarkMode = localStorage.getItem('dark-mode') === 'true';
            document.body.classList.toggle('light', !isDarkMode); // Toggle light class based on dark mode status
            darkModeToggle.checked = isDarkMode;

            // Register Service Worker for PWA
            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.register('/service-worker.js')
                .then(registration => {
                    console.log('ServiceWorker registered: ', registration);
                })
                .catch(registrationError => {
                    console.log('ServiceWorker registration failed: ', registrationError);
                });
            }

            // Start a new chat on load to display initial message
            startNewChat();

            // --- Speech Recognition Setup (Must be inside load to ensure voiceInputBtn exists) ---
            if (SpeechRecognition) {
                recognition = new SpeechRecognition();
                recognition.continuous = true; 
                recognition.interimResults = true; 
                recognition.lang = 'en-US';

                recognition.onstart = () => {
                    isVoiceInputActive = true;
                    voiceInputBtn.classList.add('voice-input-active');
                    updateButtonIcon(voiceInputBtn, 'mic-off', 'w-5 h-5'); 
                    userInput.placeholder = 'Listening... Speak now.';
                    finalTranscript = ''; 
                    userInput.value = ''; 
                };

                recognition.onresult = (event) => {
                    let interimTranscript = '';
                    for (let i = event.resultIndex; i < event.results.length; ++i) {
                        if (event.results[i].isFinal) {
                            finalTranscript += event.results[i][0].transcript + ' '; 
                        } else {
                            interimTranscript += event.results[i][0].transcript;
                        }
                    }
                    userInput.value = finalTranscript + interimTranscript; 
                    userInput.scrollLeft = userInput.scrollWidth; 
                    userInput.style.height = 'auto'; 
                    userInput.style.height = userInput.scrollHeight + 'px';
                };

                recognition.onend = () => {
                    isVoiceInputActive = false;
                    voiceInputBtn.classList.remove('voice-input-active');
                    updateButtonIcon(voiceInputBtn, 'mic', 'w-5 h-5'); 
                    userInput.placeholder = 'Type your message...';

                    if (finalTranscript.trim() !== '') {
                        userInput.value = finalTranscript.trim(); 
                    } else if (userInput.value.trim() === '') {
                        userInput.value = ''; 
                    }
                    userInput.style.height = 'auto'; 
                    userInput.style.height = userInput.scrollHeight + 'px';
                };

                recognition.onerror = (event) => {
                    isVoiceInputActive = false; 
                    voiceInputBtn.classList.remove('voice-input-active');
                    updateButtonIcon(voiceInputBtn, 'mic', 'w-5 h-5'); 
                    userInput.placeholder = 'Type your message...';

                    console.error('Speech recognition error:', event.error);
                    let errorMessage = `Speech recognition error: ${event.error}`;
                    if (event.error === 'not-allowed') {
                        errorMessage = 'Microphone access denied. Please allow microphone access in your browser settings.';
                    } else if (event.error === 'no-speech') {
                        console.log('No speech detected, recognition ended.');
                        if (finalTranscript.trim() === '') { userInput.value = ''; }
                        return; 
                    } else if (event.error === 'network') {
                        errorMessage = 'Speech recognition network error. This often means a firewall, proxy, or browser extension is blocking access to Google\'s speech services. Please try disabling extensions or testing in incognito mode.';
                    }
                    alert(errorMessage); 
                };
            } else {
                console.warn('Web Speech API (SpeechRecognition) not supported in this browser. Voice input button will be hidden.');
                voiceInputBtn.style.display = 'none'; 
            }

            // --- Event Listeners (Must be attached after elements are assigned) ---
            darkModeToggle.addEventListener('change', () => {
                const isChecked = darkModeToggle.checked;
                document.body.classList.toggle('light', !isChecked);
                localStorage.setItem('dark-mode', isChecked);
            });

            userInput.addEventListener('input', () => {
                userInput.style.height = 'auto'; 
                userInput.style.height = userInput.scrollHeight + 'px';

                const query = userInput.value;
                if (query.length > 0) {
                    const suggestions = filterSuggestions(query);
                    displaySuggestions(suggestions);
                } else {
                    suggestionsContainer.classList.add('hidden');
                }
            });

            userInput.addEventListener('keydown', (e) => {
                if (suggestionsContainer.classList.contains('hidden')) {
                    // If suggestions are hidden, handle Enter and Shift+Enter normally
                    if (e.key === 'Enter' && !e.shiftKey) { 
                        e.preventDefault(); // Prevent default new line
                        sendButton.click(); // Send message
                    }
                    // For Shift+Enter, the default behavior (new line) is allowed
                    return;
                }

                // If suggestions are visible, handle arrow keys and Enter for selection
                if (e.key === 'ArrowDown') {
                    e.preventDefault(); 
                    navigateSuggestions('down');
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault(); 
                    navigateSuggestions('up');
                } else if (e.key === 'Enter') { // Handle Enter for selection when suggestions are active
                    e.preventDefault(); 
                    selectCurrentSuggestion();
                } else if (e.key === 'Escape') {
                    suggestionsContainer.classList.add('hidden');
                    selectedSuggestionIndex = -1;
                }
            });

            userInput.addEventListener('blur', () => {
                setTimeout(() => {
                    suggestionsContainer.classList.add('hidden');
                    selectedSuggestionIndex = -1;
                }, 100); 
            });

            userInput.addEventListener('paste', async (e) => {
                const items = e.clipboardData.items;
                let filePasted = false;

                for (let i = 0; i < items.length; i++) {
                    const item = items[i];
                    if (item.kind === 'file') {
                        e.preventDefault(); 
                        const file = item.getAsFile();
                        if (file) {
                            filePasted = true;
                            await processPastedFile(file);
                        }
                    }
                }

                if (filePasted) {
                    displayChatAttachments();
                    userInput.focus();
                }
            });

            sendButton.addEventListener('click', async () => {
                const userMessage = userInput.value.trim();
                if (!userMessage && chatAttachments.length === 0) {
                    return;
                }
                
                if (isVoiceInputActive && recognition) {
                    recognition.stop();
                }

                const userParts = [];
                if (userMessage) {
                    userParts.push({ text: userMessage });
                }
                for (const attachment of chatAttachments) {
                    userParts.push({
                        inlineData: {
                            mimeType: attachment.mimeType,
                            data: attachment.data
                        }
                    });
                }

                conversationHistory.push({ role: 'user', parts: userParts });
                appendChatMessage('user', userMessage, chatAttachments);
                
                userInput.value = '';
                userInput.style.height = 'auto'; 
                chatAttachments = [];
                chatImageUpload.value = ''; 
                displayChatAttachments(); 
                suggestionsContainer.classList.add('hidden'); 
                selectedSuggestionIndex = -1;
                
                sendButton.disabled = true;
                
                toggleLoading(true);
                
                try {
                    const payload = {
                        contents: conversationHistory,
                    };
                    
                    const responseText = await callGeminiAPI(payload);
                    
                    conversationHistory.push({ role: 'model', parts: [{ text: responseText }] });
                    appendChatMessage('ai', responseText);
                    
                } catch (error) {
                    console.error('Chat API call failed:', error);
                    appendChatMessage('ai', `Oops! Something went wrong. Please try again. (${error.message})`);
                } finally {
                    sendButton.disabled = false;
                    toggleLoading(false);
                    userInput.focus();
                }
            });
            
            chatImageUpload.addEventListener('change', async (event) => {
                const files = Array.from(event.target.files);
                if (files.length > 0) {
                    for (const file of files) {
                        const allowedTypes = [
                            'image/', 'text/', 'application/pdf',
                            'application/json', 'text/csv', 'application/xml', 'text/markdown'
                        ];
                        const isAllowed = allowedTypes.some(type => file.type.startsWith(type)) || file.name.endsWith('.md');

                        if (isAllowed) {
                            if (file.size > 10 * 1024 * 1024) { 
                                alert(`File "${file.name}" is too large (>${10}MB). Max 10MB per file.`);
                                continue;
                            }
                            try {
                                const { mimeType, data } = await fileToBase64(file);
                                chatAttachments.push({ file, mimeType, data, name: file.name });
                            } catch (error) {
                                alert(`Failed to read chat file ${file.name}.`);
                                console.error('Chat file read error:', error);
                            }
                        } else {
                            alert(`File type not supported for chat: "${file.name}" (${file.type}).`);
                        }
                    }
                    displayChatAttachments();
                    userInput.focus();
                }
                chatImageUpload.value = ''; 
            });

            chatAttachmentsPreviewContainer.addEventListener('click', (event) => {
                const removeBtn = event.target.closest('.remove-attachment-btn');
                if (removeBtn) {
                    const attachmentDiv = removeBtn.closest('[data-index]');
                    if (attachmentDiv) {
                        const index = parseInt(attachmentDiv.dataset.index);
                        chatAttachments.splice(index, 1); 
                        displayChatAttachments(); 
                        userInput.focus();
                    }
                }
            });

            voiceInputBtn.addEventListener('click', () => {
                if (recognition) {
                    if (isVoiceInputActive) {
                        recognition.stop(); 
                    } else {
                        finalTranscript = ''; 
                        recognition.start();
                    }
                } else {
                    alert('Speech recognition is not supported in this browser.');
                }
            });

            chatbotContainer.addEventListener('dragover', (e) => {
                e.preventDefault();
                e.stopPropagation();
                chatbotContainer.classList.add('drag-over-active');
            });

            chatbotContainer.addEventListener('dragleave', (e) => {
                e.preventDefault();
                e.stopPropagation();
                chatbotContainer.classList.remove('drag-over-active');
            });

            chatbotContainer.addEventListener('drop', async (e) => {
                e.preventDefault();
                e.stopPropagation();
                chatbotContainer.classList.remove('drag-over-active');

                const files = Array.from(e.dataTransfer.files);
                if (files.length > 0) {
                    for (const file of files) {
                        const allowedTypes = [
                            'image/', 'text/', 'application/pdf',
                            'application/json', 'text/csv', 'application/xml', 'text/markdown'
                        ];
                        const isAllowed = allowedTypes.some(type => file.type.startsWith(type)) || file.name.endsWith('.md');

                        if (isAllowed) {
                            if (file.size > 10 * 1024 * 1024) { 
                                alert(`File "${file.name}" is too large (>${10}MB). Max 10MB per file.`);
                                continue;
                            }
                            try {
                                const { mimeType, data } = await fileToBase64(file);
                                chatAttachments.push({ file, mimeType, data, name: file.name });
                            } catch (error) {
                                alert(`Failed to read chat file ${file.name}.`);
                                console.error('Chat file read error:', error);
                            }
                        } else {
                            alert(`File type not supported for chat: "${file.name}" (${file.type}).`);
                        }
                    }
                    displayChatAttachments();
                    userInput.focus();
                }
            });
            
            chatHistoryDiv.addEventListener('click', (event) => {
                const codeCopyButton = event.target.closest('.code-block-copy-button');
                if (codeCopyButton) {
                    const targetId = codeCopyButton.dataset.copyTarget;
                    const codeElement = document.getElementById(targetId);
                    if (codeElement) {
                        const codeToCopy = codeElement.textContent;
                        updateButtonIcon(codeCopyButton, 'check', 'w-4 h-4'); 
                        copyToClipboard(codeToCopy); 
                        setTimeout(() => { 
                            updateButtonIcon(codeCopyButton, 'clipboard', 'w-4 h-4'); 
                        }, 2000);
                        return; 
                    }
                }

                const chatCopyButton = event.target.closest('.copy-message-btn');
                if (chatCopyButton) {
                    const messageId = chatCopyButton.dataset.messageId;
                    const messageContent = messageTextCache.get(messageId);
                    if (messageContent) {
                        updateButtonIcon(chatCopyButton, 'check');
                        copyToClipboard(messageContent); 
                        setTimeout(() => { 
                            updateButtonIcon(chatCopyButton, 'clipboard');
                        }, 2000);
                    } else {
                        alert('Message content not found for copying.');
                    }
                    return; 
                }

                const dictateButton = event.target.closest('.dictate-message-btn');
                if (dictateButton) {
                    const messageId = dictateButton.dataset.messageId;
                    const messageContent = messageTextCache.get(messageId);
                    if (messageContent) {
                        toggleSpeech(messageContent, dictateButton);
                    } else {
                        alert('Message content not found for dictation.');
                    }
                    return; 
                }
            });

            // Event listener for the new chat button
            newChatBtn.addEventListener('click', startNewChat);
        });
    </script>
</body>
</html>

-----------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mystic Vision AI Mini</title>
    <!-- PWA Manifest -->
    <link rel="manifest" href="manifest.json">
    <!-- Favicon -->
    <link rel="icon" href="logo.png" type="image/x-icon">
    <!-- Tailwind CSS CDN for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts - Inter for modern typography -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- Marked.js CDN for Markdown parsing -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <!-- jsPDF for PDF generation (retained for consistency in dependencies, though chat itself doesn't export to PDF) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <!-- html2canvas to convert HTML to image for PDF (retained for consistency in dependencies) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <!-- Lucide Icons for a modern, futuristic feel -->
    <script src="https://cdn.jsdelivr.net/npm/lucide-dynamic@latest/dist/lucide.min.js"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <style>
        /* --- Custom Styles for Standalone AI Chatbot (Adapted from Dream11 Predictor Chat) --- */
        
        /* Ensure HTML and Body take full height and prevent main scrollbar */
        html, body {
            height: 100%;
            overflow: hidden; /* Prevent body scrollbar, main-chat-container handles it */
        }

        /* Basic font and transition settings for the whole page */
        body {
            font-family: 'Inter', sans-serif;
            transition: background-color 0.6s ease, color 0.6s ease;
            display: flex; /* Make body a flex container */
            flex-direction: column; /* Arrange children vertically */
            margin: 0;
            /* Default fallback colors if no theme/dark mode is set, taken from Code 1's light default */
            background-color: #f3f4f6;
            color: #1f2937;
        }

        /* Defining a vibrant color palette using CSS variables */
        /* These act as the base for the 'default' theme's light mode (from Code 1) */
        :root {
            /* Default Theme (Light Mode from Code 1) */
            --bg-color-light: #f3f4f6;
            --card-bg-light: #ffffff;
            --text-color-light: #1f2937;
            --border-color-light: #e5e7eb;
            --user-msg-bg-light: #e0f2fe; /* Light blue */
            --user-msg-text-light: #1e40af; /* Dark blue */
            --ai-msg-bg-light: #f3f4f6; /* Light gray */
            --ai-msg-text-light: #374151; /* Dark gray */
            --chat-input-bg-light: #ffffff;
            --chat-input-border-light: #d1d5db;
            --chat-input-text-light: #1f2937;
            --input-btn-bg-light: #e5e7eb;
            --input-btn-text-light: #4b5563;
            --header-bg-light: #f9fafb; /* Similar to bg-gray-50 */

            /* Accent colors (Default Theme - from Code 1) */
            --accent-primary: #6366f1; /* Indigo-500 */
            --accent-primary-dark: #818cf8; /* Indigo-400 for dark mode */
            --accent-secondary: #22d3ee; /* Cyan-400 */
            --accent-secondary-dark: #67e8f9; /* Cyan-300 for dark mode */
            --accent-error: #ef4444; /* Red-500 */
            --accent-success: #22c55e; /* Green-500 */

            /* Default Theme (Dark Mode - from Code 1's original dark values) */
            /* These will be set when body.theme-default.dark is active */
            --bg-color-dark: #0a0a0f; 
            --card-bg-dark: #13131a; 
            --text-color-dark: #e5e7eb; 
            --border-color-dark: #2d3748;
            --user-msg-bg-dark: #1a237e; 
            --user-msg-text-dark: #e0e7ff; 
            --ai-msg-bg-dark: #2d3748; 
            --ai-msg-text-dark: #f9fafb; 
            --chat-input-bg-dark: #1f2937;
            --chat-input-border-dark: #374151;
            --chat-input-text-dark: #e5e7eb;
            --input-btn-bg-dark: #374151;
            --input-btn-text-dark: #d1d5db;
            --header-bg-dark: #1f2937; /* Similar to bg-gray-800 */
        }
        
        /* Apply current theme's light/dark colors dynamically based on .light or .dark class on body */
        body.light {
            background-color: var(--bg-color-light);
            color: var(--text-color-light);
        }

        body.dark {
            background-color: var(--bg-color-dark);
            color: var(--text-color-dark);
        }

        /* THEME DEFINITIONS - From Code 2 */
        /* Each theme class overrides the CSS variables for both light and dark modes */

        /* Badass Black Theme */
        body.theme-badass-black {
            --accent-primary: #ef4444; /* Red-500 */
            --accent-primary-dark: #f87171; /* Red-400 */
            --accent-secondary: #eab308; /* Yellow-500 */
            --accent-secondary-dark: #facc15; /* Yellow-400 */
            --accent-error: #dc2626; /* Red-600 */
            --accent-success: #16a34a; /* Green-600 */
        }
        body.theme-badass-black.light { /* Still very dark for "light" mode */
            --bg-color-light: #171717;
            --card-bg-light: #262626;
            --text-color-light: #f5f5f5;
            --border-color-light: #404040;
            --user-msg-bg-light: #440000;
            --user-msg-text-light: #fca5a5;
            --ai-msg-bg-light: #333333;
            --ai-msg-text-light: #e5e5e5;
            --chat-input-bg-light: #262626;
            --chat-input-border-light: #404040;
            --chat-input-text-light: #f5f5f5;
            --input-btn-bg-light: #404040;
            --input-btn-text-light: #d4d4d8;
            --header-bg-light: #171717;
        }
        body.theme-badass-black.dark { /* Even darker */
            --bg-color-dark: #0a0a0a;
            --card-bg-dark: #1c1c1c;
            --text-color-dark: #e5e5e5;
            --border-color-dark: #333333;
            --user-msg-bg-dark: #800000;
            --user-msg-text-dark: #fecaca;
            --ai-msg-bg-dark: #222222;
            --ai-msg-text-dark: #f5f5f5;
            --chat-input-bg-dark: #1c1c1c;
            --chat-input-border-dark: #333333;
            --chat-input-text-dark: #e5e5e5;
            --input-btn-bg-dark: #333333;
            --input-btn-text-dark: #d4d4d8;
            --header-bg-dark: #0a0a0a;
        }

        /* Golden Glory Theme */
        body.theme-golden-glory {
            --accent-primary: #d97706; /* Amber-700 */
            --accent-primary-dark: #fcd34d; /* Amber-300 */
            --accent-secondary: #fcd34d; /* Amber-300 */
            --accent-secondary-dark: #fbbf24; /* Amber-400 */
            --accent-error: #ef4444; /* Red-500 */
            --accent-success: #22c55e; /* Green-500 */
        }
        body.theme-golden-glory.light {
            --bg-color-light: #fef3c7; /* Amber-100 */
            --card-bg-light: #ffffff;
            --text-color-light: #451a03; /* Amber-950 */
            --border-color-light: #fcd34d; /* Amber-300 */
            --user-msg-bg-light: #fde68a; /* Amber-200 */
            --user-msg-text-light: #78350f; /* Amber-800 */
            --ai-msg-bg-light: #fffbeb; /* Amber-50 */
            --ai-msg-text-light: #451a03; /* Amber-950 */
            --chat-input-bg-light: #ffffff;
            --chat-input-border-light: #fcd34d;
            --chat-input-text-light: #451a03;
            --input-btn-bg-light: #fcd34d;
            --input-btn-text-light: #78350f;
            --header-bg-light: #fef9c3; /* Amber-50 */
        }
        body.theme-golden-glory.dark {
            --bg-color-dark: #1e1b07; /* Amber-950 */
            --card-bg-dark: #2e2609;
            --text-color-dark: #fef3c7; /* Amber-100 */
            --border-color-dark: #92400e; /* Amber-800 */
            --user-msg-bg-dark: #78350f; /* Amber-800 */
            --user-msg-text-dark: #fde68a; /* Amber-200 */
            --ai-msg-bg-dark: #3e310a;
            --ai-msg-text-dark: #fcd34d; /* Amber-300 */
            --chat-input-bg-dark: #2e2609;
            --chat-input-border-dark: #92400e;
            --chat-input-text-dark: #fef3c7;
            --input-btn-bg-dark: #92400e;
            --input-btn-text-dark: #fde68a;
            --header-bg-dark: #1e1b07;
        }

        /* Minimal Criminal Theme */
        body.theme-minimal-criminal {
            --accent-primary: #737373; /* Gray-500 */
            --accent-primary-dark: #a3a3a3; /* Gray-400 */
            --accent-secondary: #a3a3a3; /* Gray-400 */
            --accent-secondary-dark: #d4d4d4; /* Gray-300 */
            --accent-error: #ef4444; /* Red-500 */
            --accent-success: #22c55e; /* Green-500 */
        }
        body.theme-minimal-criminal.light {
            --bg-color-light: #f8f8f8;
            --card-bg-light: #ffffff;
            --text-color-light: #333333;
            --border-color-light: #e0e0e0;
            --user-msg-bg-light: #e6e6e6;
            --user-msg-text-light: #4d4d4d;
            --ai-msg-bg-light: #f0f0f0;
            --ai-msg-text-light: #333333;
            --chat-input-bg-light: #ffffff;
            --chat-input-border-light: #e0e0e0;
            --chat-input-text-light: #333333;
            --input-btn-bg-light: #e0e0e0;
            --input-btn-text-light: #4d4d4d;
            --header-bg-light: #f5f5f5;
        }
        body.theme-minimal-criminal.dark {
            --bg-color-dark: #1a1a1a;
            --card-bg-dark: #2a2a2a;
            --text-color-dark: #e0e0e0;
            --border-color-dark: #4a4a4a;
            --user-msg-bg-dark: #3a3a3a;
            --user-msg-text-dark: #d4d4d4;
            --ai-msg-bg-dark: #2f2f2f;
            --ai-msg-text-dark: #e0e0e0;
            --chat-input-bg-dark: #2a2a2a;
            --chat-input-border-dark: #4a4a4a;
            --chat-input-text-dark: #e0e0e0;
            --input-btn-bg-dark: #4a4a4a;
            --input-btn-text-dark: #d4d4d4;
            --header-bg-dark: #1a1a1a;
        }

        /* La Futura Theme */
        body.theme-la-futura {
            --accent-primary: #6d28d9; /* Violet-700 */
            --accent-primary-dark: #a78bfa; /* Violet-400 */
            --accent-secondary: #0ea5e9; /* Sky-500 */
            --accent-secondary-dark: #38bdf8; /* Sky-400 */
            --accent-error: #ef4444; /* Red-500 */
            --accent-success: #22c55e; /* Green-500 */
        }
        body.theme-la-futura.light {
            --bg-color-light: #e0f2fe; /* Sky-100 */
            --card-bg-light: #ffffff;
            --text-color-light: #1e3a8a; /* Blue-900 */
            --border-color-light: #93c5fd; /* Blue-300 */
            --user-msg-bg-light: #c7d2fe; /* Indigo-200 */
            --user-msg-text-light: #312e81; /* Indigo-900 */
            --ai-msg-bg-light: #eff6ff; /* Blue-50 */
            --ai-msg-text-light: #1e3a8a; /* Blue-900 */
            --chat-input-bg-light: #ffffff;
            --chat-input-border-light: #93c5fd;
            --chat-input-text-light: #1e3a8a;
            --input-btn-bg-light: #dbeafe; /* Blue-100 */
            --input-btn-text-light: #3b82f6; /* Blue-500 */
            --header-bg-light: #bfdbfe; /* Blue-200 */
        }
        body.theme-la-futura.dark {
            --bg-color-dark: #0f172a; /* Slate-900 */
            --card-bg-dark: #1e293b; /* Slate-800 */
            --text-color-dark: #e2e8f0; /* Slate-200 */
            --border-color-dark: #334155; /* Slate-700 */
            --user-msg-bg-dark: #4c1d95; /* Violet-900 */
            --user-msg-text-dark: #e0e7ff; /* Indigo-100 */
            --ai-msg-bg-dark: #1a2230;
            --ai-msg-text-dark: #a78bfa; /* Violet-400 */
            --chat-input-bg-dark: #1e293b;
            --chat-input-border-dark: #334155;
            --chat-input-text-dark: #e2e8f0;
            --input-btn-bg-dark: #334155;
            --input-btn-text-dark: #94a3b8; /* Slate-400 */
            --header-bg-dark: #0f172a;
        }

        /* God's Plan Theme */
        body.theme-gods-plan {
            --accent-primary: #10b981; /* Emerald-500 */
            --accent-primary-dark: #34d399; /* Emerald-400 */
            --accent-secondary: #3b82f6; /* Blue-500 */
            --accent-secondary-dark: #60a5fa; /* Blue-400 */
            --accent-error: #ef4444; /* Red-500 */
            --accent-success: #22c55e; /* Green-500 */
        }
        body.theme-gods-plan.light {
            --bg-color-light: #ecfdf5; /* Emerald-50 */
            --card-bg-light: #ffffff;
            --text-color-light: #064e3b; /* Emerald-900 */
            --border-color-light: #a7f3d0; /* Emerald-200 */
            --user-msg-bg-light: #d1fae5; /* Emerald-100 */
            --user-msg-text-light: #047857; /* Emerald-700 */
            --ai-msg-bg-light: #f0fdf4; /* Green-50 */
            --ai-msg-text-light: #064e3b; /* Emerald-900 */
            --chat-input-bg-light: #ffffff;
            --chat-input-border-light: #a7f3d0;
            --chat-input-text-light: #064e3b;
            --input-btn-bg-light: #d1fae5;
            --input-btn-text-light: #047857;
            --header-bg-light: #d1fae5;
        }
        body.theme-gods-plan.dark {
            --bg-color-dark: #062e24; /* Emerald-950 */
            --card-bg-dark: #0a3d34;
            --text-color-dark: #d1fae5; /* Emerald-100 */
            --border-color-dark: #0f5d47; /* Emerald-800 */
            --user-msg-bg-dark: #059669; /* Emerald-600 */
            --user-msg-text-dark: #d1fae5; /* Emerald-100 */
            --ai-msg-bg-dark: #0a3d34;
            --ai-msg-text-dark: #a7f3d0; /* Emerald-200 */
            --chat-input-bg-dark: #0a3d34;
            --chat-input-border-dark: #0f5d47;
            --chat-input-text-dark: #d1fae5;
            --input-btn-bg-dark: #0f5d47;
            --input-btn-text-dark: #a7f3d0;
            --header-bg-dark: #062e24;
        }

        /* The Ecstacy Theme */
        body.theme-the-ecstacy {
            --accent-primary: #a855f7; /* Violet-500 */
            --accent-primary-dark: #c084fc; /* Violet-400 */
            --accent-secondary: #f472b6; /* Pink-400 */
            --accent-secondary-dark: #f87171; /* Red-400 */
            --accent-error: #ef4444; /* Red-500 */
            --accent-success: #22c55e; /* Green-500 */
        }
        body.theme-the-ecstacy.light {
            --bg-color-light: #f3e8ff; /* Violet-100 */
            --card-bg-light: #ffffff;
            --text-color-light: #581c87; /* Violet-900 */
            --border-color-light: #d8b4fe; /* Violet-300 */
            --user-msg-bg-light: #e9d5ff; /* Violet-200 */
            --user-msg-text-light: #7e22ce; /* Violet-700 */
            --ai-msg-bg-light: #faf5ff; /* Violet-50 */
            --ai-msg-text-light: #581c87; /* Violet-900 */
            --chat-input-bg-light: #ffffff;
            --chat-input-border-light: #d8b4fe;
            --chat-input-text-light: #581c87;
            --input-btn-bg-light: #e9d5ff;
            --input-btn-text-light: #a855f7;
            --header-bg-light: #f3e8ff;
        }
        body.theme-the-ecstacy.dark {
            --bg-color-dark: #170d2b; /* Violet-950 */
            --card-bg-dark: #2a1c43;
            --text-color-dark: #f3e8ff; /* Violet-100 */
            --border-color-dark: #4c1d95; /* Violet-900 */
            --user-msg-bg-dark: #6b21a8; /* Violet-700 */
            --user-msg-text-dark: #f3e8ff; /* Violet-100 */
            --ai-msg-bg-dark: #2a1c43;
            --ai-msg-text-dark: #d8b4fe; /* Violet-300 */
            --chat-input-bg-dark: #2a1c43;
            --chat-input-border-dark: #4c1d95;
            --chat-input-text-dark: #f3e8ff;
            --input-btn-bg-dark: #4c1d95;
            --input-btn-text-dark: #e9d5ff;
            --header-bg-dark: #170d2b;
        }

        /* Header specific overrides */
        .header-section {
            background-color: var(--header-bg-light);
            border-color: var(--border-color-light);
        }
        body.dark .header-section {
            background-color: var(--header-bg-dark);
            border-color: var(--border-color-dark);
        }
        /* Explicitly set H1 color based on theme */
        .header-section h1 {
            color: var(--text-color-light);
        }
        body.dark .header-section h1 {
            color: var(--text-color-dark);
        }
        /* Explicitly set colors for the Light/Dark toggle labels, they use text-gray-500 */
        .header-section .text-gray-500 {
            color: #6b7280; /* Tailwind gray-500 equivalent for light mode consistency */
        }
        body.dark .header-section .text-gray-500 {
            color: #9ca3af; /* Tailwind gray-400 equivalent for dark mode consistency */
        }

        /* Action buttons in header (Theme Selector, New Chat) */
        #theme-selector-btn, #new-chat-btn {
            background-color: var(--input-btn-bg-light);
            color: var(--input-btn-text-light); /* For the Lucide icon */
        }
        #theme-selector-btn:hover, #new-chat-btn:hover {
            background-color: color-mix(in srgb, var(--input-btn-bg-light) 80%, black 10%);
        }
        body.dark #theme-selector-btn, body.dark #new-chat-btn {
            background-color: var(--input-btn-bg-dark);
            color: var(--input-btn-text-dark); /* For the Lucide icon */
        }
        body.dark #theme-selector-btn:hover, body.dark #new-chat-btn:hover {
            background-color: color-mix(in srgb, var(--input-btn-bg-dark) 80%, white 10%);
        }

        /* Main Chat Container styles for full-screen */
        #main-chat-container {
            height: 100%; /* Take full height of its parent (body) */
            width: 100%; /* Take full width */
            display: flex;
            flex-direction: column;
            background-color: rgba(255, 255, 255, 0.95); /* Nearly opaque white from Code 1 */
            border-radius: 0;
            box-shadow: none;
            border: none;
            backdrop-filter: blur(8px); /* Frosted glass effect */
            -webkit-backdrop-filter: blur(8px); /* Safari support */
            overflow: hidden; /* Hide scrollbars of the container itself */
        }
        body.dark #main-chat-container {
            background-color: rgba(19, 19, 26, 0.95); /* From Code 1 */
            border-color: rgba(45, 55, 72, 0.7); /* From Code 1 */
            box-shadow: none;
        }

        /* Custom scrollbar for a sleek look */
        #chat-history::-webkit-scrollbar { width: 10px; }
        #chat-history::-webkit-scrollbar-track { background: var(--card-bg-light); border-radius: 5px; }
        #chat-history::-webkit-scrollbar-thumb { background: #888; border-radius: 5px; border: 2px solid var(--card-bg-light); }
        #chat-history::-webkit-scrollbar-thumb:hover { background: #555; }
        body.dark #chat-history::-webkit-scrollbar-track { background: var(--card-bg-dark); }
        body.dark #chat-history::-webkit-scrollbar-thumb { background: #6b7280; border-color: var(--card-bg-dark); }
        body.dark #chat-history::-webkit-scrollbar-thumb:hover { background: #9ca3af; }
        
        /* Modern loading animation */
        .loader-dot {
            width: 12px;
            height: 12px;
            margin: 0 4px;
            background-color: #888; /* Gray for dots themselves as per Code 1 */
            border-radius: 50%;
            display: inline-block;
            animation: bounce 1.4s infinite ease-in-out both;
        }
        .loader-dot:nth-child(1) { animation-delay: -0.32s; }
        .loader-dot:nth-child(2) { animation-delay: -0.16s; }
        .loader-dot:nth-child(3) { animation-delay: 0s; }
        
        @keyframes bounce {
            0%, 80%, 100% {
                transform: scale(0);
                opacity: 0.5;
            }
            40% {
                transform: scale(1.0);
                opacity: 1;
            }
        }
        
        /* New chat message styles */
        .chat-message {
            margin-bottom: 0.75rem; /* 12px */
            padding: 1rem; /* 16px */
            border-radius: 1.5rem; /* 24px */
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            word-break: break-word; /* Ensure long words break */
            transition: all 0.3s ease;
            transform: scale(0.95);
            transform-origin: bottom;
            max-width: 85%;
            position: relative; /* For action buttons */
            padding-bottom: 2.5rem; /* Make space for action buttons */
        }

        /* Fixed: Message content boxes to be solid color (removed gradient) */
        .chat-message.user {
            background-color: var(--user-msg-bg-light);
            color: var(--user-msg-text-light);
            margin-left: auto;
            border-bottom-right-radius: 0.5rem; /* 8px */
            /* Removed background-image: linear-gradient for solid color */
        }
        body.dark .chat-message.user {
            background-color: var(--user-msg-bg-dark);
            color: var(--user-msg-text-dark);
            /* Removed background-image: linear-gradient for solid color */
        }

        .chat-message.ai {
            background-color: var(--ai-msg-bg-light);
            color: var(--ai-msg-text-light);
            margin-right: auto;
            border-bottom-left-radius: 0.5rem; /* 8px */
            /* Removed background-image: linear-gradient for solid color */
        }
        body.dark .chat-message.ai {
            background-color: var(--ai-msg-bg-dark);
            color: var(--ai-msg-text-dark);
            /* Removed background-image: linear-gradient for solid color */
        }

        /* Styling for chat attachments */
        .chat-attachment-preview-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 0.75rem;
            border-radius: 1rem;
            background-color: var(--input-btn-bg-light);
            color: var(--input-btn-text-light);
            font-size: 0.875rem;
            box-shadow: 0 1px 2px rgba(0,0,0,0.08);
            transition: all 0.2s ease;
        }
        body.dark .chat-attachment-preview-item {
            background-color: var(--input-btn-bg-dark);
            color: var(--input-btn-text-dark);
        }
        .chat-attachment-preview-item .remove-attachment-btn {
            background: none;
            border: none;
            color: var(--accent-primary);
            cursor: pointer;
            padding: 0.1rem;
            border-radius: 50%;
            transition: background-color 0.2s ease;
        }
        body.dark .chat-attachment-preview-item .remove-attachment-btn {
            color: var(--accent-primary-dark);
        }
        .chat-attachment-preview-item .remove-attachment-btn:hover {
            background-color: color-mix(in srgb, var(--accent-primary) 20%, transparent);
        }
        body.dark .chat-attachment-preview-item .remove-attachment-btn:hover {
            background-color: color-mix(in srgb, var(--accent-primary-dark) 20%, transparent);
        }

        /* Styling for the copy message */
        #copy-message {
            position: fixed;
            bottom: 3rem; /* Adjusted for full screen layout */
            left: 50%;
            transform: translateX(-50%);
            padding: 0.75rem 1.5rem;
            background-color: var(--accent-success);
            color: white;
            border-radius: 9999px;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            opacity: 0;
            visibility: hidden;
            transition: all 0.5s ease-in-out;
            z-index: 100;
        }

        #copy-message.show {
            opacity: 1;
            visibility: visible;
        }

        /* --- New/Enhanced Styles for Chat AI Responses & Code Blocks --- */
        
        .chat-message .message-content {
            /* This wrapper is to facilitate better styling around markdown content */
            padding: 0; /* Markdown adds its own spacing, so zero here */
            margin: 0;
        }
        
        /* General markdown styling within AI messages */
        .chat-message.ai .message-content p,
        .chat-message.ai .message-content ul,
        .chat-message.ai .message-content ol,
        .chat-message.ai .message-content h1,
        .chat-message.ai .message-content h2,
        .chat-message.ai .message-content h3,
        .chat-message.ai .message-content blockquote {
            margin-bottom: 1em;
        }
        .chat-message.ai .message-content p:last-child,
        .chat-message.ai .message-content ul:last-child,
        .chat-message.ai .message-content ol:last-child,
        .chat-message.ai .message-content blockquote:last-child {
            margin-bottom: 0;
        }
        .chat-message.ai .message-content ul,
        .chat-message.ai .message-content ol {
            padding-left: 1.5em; /* Standard list indent */
        }
        .chat-message.ai .message-content li {
            margin-bottom: 0.5em;
        }
        .chat-message.ai .message-content strong {
            font-weight: bold;
            color: var(--accent-primary); /* Use primary accent for emphasis */
        }
        body.dark .chat-message.ai .message-content strong {
            color: var(--accent-primary-dark);
        }
        .chat-message.ai .message-content em {
            font-style: italic;
        }
        .chat-message.ai .message-content blockquote {
            border-left: 4px solid var(--accent-secondary);
            padding-left: 1em;
            margin-left: 0;
            color: var(--text-color-light); /* From code 2 */
        }
        body.dark .chat-message.ai .message-content blockquote {
             color: var(--text-color-dark); /* From code 2 */
             border-left: 4px solid var(--accent-secondary-dark);
        }

        /* Code block specific styling */
        .code-block-container {
            position: relative;
            background-color: var(--bg-color-dark); /* Consistent dark background for code */
            color: var(--text-color-dark);
            border-radius: 0.75rem; /* Rounded corners */
            margin-top: 1rem;
            margin-bottom: 1rem;
            overflow: hidden; /* Ensure rounded corners clip content */
            border: 1px solid var(--border-color-dark); /* Subtle border */
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }
        
        .code-block-container pre {
            margin: 0; /* Remove default margin from pre */
            padding: 1rem;
            overflow-x: auto; /* Horizontal scroll for long lines */
            font-family: 'Fira Code', 'Cascadia Code', 'Consolas', monospace; /* Monospaced font */
            font-size: 0.9em;
            line-height: 1.4;
        }

        .code-block-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: var(--input-btn-bg-dark);
            color: var(--input-btn-text-dark);
            padding: 0.5rem 1rem;
            border-bottom: 1px solid color-mix(in srgb, var(--border-color-dark) 70%, transparent);
            font-size: 0.85em;
            border-top-left-radius: 0.75rem;
            border-top-right-radius: 0.75rem;
        }

        .code-block-copy-button {
            background-color: transparent;
            border: none;
            color: var(--input-btn-text-dark);
            cursor: pointer;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            transition: background-color 0.2s ease, color 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.25rem;
            font-size: 0.85em;
        }
        .code-block-copy-button:hover {
            background-color: color-mix(in srgb, var(--input-btn-bg-dark) 80%, var(--accent-primary-dark) 20%);
            color: var(--text-color-dark);
        }
        .code-block-copy-button:active {
            transform: scale(0.95);
        }

        /* Smallest font size for inline code blocks if any */
        .chat-message.ai .message-content code:not(pre > code) {
            background-color: color-mix(in srgb, var(--accent-primary) 20%, transparent);
            border-radius: 0.25rem;
            padding: 0.2em 0.4em;
            font-family: 'Fira Code', 'Cascadia Code', 'Consolas', monospace;
            font-size: 0.9em;
            color: var(--accent-primary);
        }
        body.dark .chat-message.ai .message-content code:not(pre > code) {
            background-color: color-mix(in srgb, var(--accent-primary-dark) 20%, transparent);
            color: var(--accent-primary-dark);
        }

        /* Ensure links are distinguishable */
        .chat-message.ai .message-content a {
            color: var(--accent-primary);
            text-decoration: underline;
            transition: color 0.2s ease;
        }
        .chat-message.ai .message-content a:hover {
            color: color-mix(in srgb, var(--accent-primary) 80%, black 20%);
        }
        body.dark .chat-message.ai .message-content a {
            color: var(--accent-primary-dark);
        }
        body.dark .chat-message.ai .message-content a:hover {
            color: color-mix(in srgb, var(--accent-primary-dark) 80%, white 20%);
        }

        /* Styles for message action buttons (copy/dictate) */
        .message-actions {
            position: absolute;
            bottom: 0.5rem;
            right: 1rem;
            display: flex;
            gap: 0.5rem;
            padding: 0.25rem 0.5rem;
            background-color: rgba(255, 255, 255, 0.6); /* Semi-transparent background */
            border-radius: 0.75rem;
            backdrop-filter: blur(5px); /* Frosted glass effect */
            transition: opacity 0.3s ease;
            opacity: 0; /* Hidden by default */
            z-index: 10;
        }

        .chat-message:hover .message-actions {
            opacity: 1; /* Show on message hover */
        }

        body.dark .message-actions {
            background-color: rgba(0, 0, 0, 0.4);
        }

        .message-actions button {
            background: none;
            border: none;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 0.375rem;
            transition: background-color 0.2s ease, color 0.2s ease;
            display: flex; /* To center icon */
            align-items: center;
            justify-content: center;
        }

        .message-actions button .lucide { /* Target the SVG element directly for color */
            color: var(--input-btn-text-light); /* From code 2 */
            width: 1rem;
            height: 1rem;
        }
        body.dark .message-actions button .lucide {
            color: var(--input-btn-text-dark); /* From code 2 */
        }

        .message-actions button:hover .lucide {
            color: var(--accent-primary); /* From code 2 */
        }
        body.dark .message-actions button:hover .lucide {
            color: var(--accent-primary-dark); /* From code 2 */
        }
        .message-actions button:hover {
            background-color: rgba(0, 0, 0, 0.1);
        }
        body.dark .message-actions button:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .chat-message.user .message-actions {
            right: 1rem;
            left: auto;
        }
        .chat-message.ai .message-actions {
            left: 1rem;
            right: auto;
        }

        /* New style for speech recognition button when active */
        .voice-input-active {
            background-color: var(--accent-error) !important; /* Red when recording */
            animation: pulse-red 1s infinite cubic-bezier(0.4, 0, 0.6, 1);
        }

        @keyframes pulse-red {
            0%, 100% { box-shadow: 0 0 0 0 color-mix(in srgb, var(--accent-error) 70%, transparent); } /* From code 2 */
            50% { box-shadow: 0 0 0 10px color-mix(in srgb, var(--accent-error) 0%, transparent); } /* From code 2 */
        }

        /* Chat action buttons dropdown & Theme dropdown - unified from Code 2 */
        .actions-dropdown { /* General class for any dropdowns like chat-actions or theme-selector */
            position: absolute;
            bottom: calc(100% + 8px); /* Position above the input bar */
            right: 0; /* Align with the parent's right edge */
            background-color: var(--card-bg-light);
            border-radius: 1rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            padding: 0.5rem;
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            transform-origin: bottom right;
            transition: transform 0.2s ease-out, opacity 0.2s ease-out;
            z-index: 20;
            border: 1px solid var(--border-color-light);
            min-width: 140px; /* Adjust as needed */
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
        }
        body.dark .actions-dropdown {
            background-color: var(--card-bg-dark);
            border-color: var(--border-color-dark);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        }
        .actions-dropdown.hidden {
            opacity: 0;
            transform: scale(0.9);
            pointer-events: none;
        }
        .actions-dropdown button,
        .actions-dropdown label {
            display: flex;
            align-items: center;
            padding: 0.5rem 0.75rem;
            border-radius: 0.75rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s ease;
            color: var(--text-color-light); /* Default text color */
        }
        body.dark .actions-dropdown button,
        body.dark .actions-dropdown label {
            color: var(--text-color-dark);
        }
        .actions-dropdown button:hover,
        .actions-dropdown label:hover {
            background-color: var(--bg-color-light); /* Lighter hover for light theme */
        }
        body.dark .actions-dropdown button:hover,
        body.dark .actions-dropdown label:hover {
            background-color: color-mix(in srgb, var(--card-bg-dark) 80%, var(--accent-primary-dark) 5%); /* Darker hover for dark theme */
        }
        .actions-dropdown button .lucide,
        .actions-dropdown label .lucide {
            margin-right: 0.5rem;
            width: 1.25rem;
            height: 1.25rem;
            flex-shrink: 0;
            color: var(--accent-primary); /* Use primary accent for icons */
        }
        body.dark .actions-dropdown button .lucide,
        body.dark .actions-dropdown label .lucide {
            color: var(--accent-primary-dark);
        }

        /* Drag and Drop visual feedback for chat window */
        #main-chat-container.drag-over-active {
            border: 2px dashed var(--accent-primary);
            box-shadow: 0 0 20px var(--accent-primary), 0 0 30px var(--accent-primary) inset;
        }
        body.dark #main-chat-container.drag-over-active {
            border: 2px dashed var(--accent-primary-dark);
            box-shadow: 0 0 20px var(--accent-primary-dark), 0 0 30px var(--accent-primary-dark) inset;
        }
        
        /* New CSS for chat input drag-over - unified from Code 2 */
        .chat-input { /* Apply chat-input class from HTML */
            background-color: var(--chat-input-bg-light);
            border-color: var(--chat-input-border-light);
            color: var(--chat-input-text-light);
            outline: none; /* Remove default browser outline */
        }
        .chat-input:focus {
            border-color: var(--accent-primary) !important; /* Use accent for border on focus */
            box-shadow: 0 0 0 2px var(--accent-primary) !important; /* Use accent for ring on focus */
        }
        body.dark .chat-input {
            background-color: var(--chat-input-bg-dark);
            border-color: var(--chat-input-border-dark);
            color: var(--chat-input-text-dark);
        }
        body.dark .chat-input:focus {
            border-color: var(--accent-primary-dark) !important;
            box-shadow: 0 0 0 2px var(--accent-primary-dark) !important;
        }
        .chat-input-drag-over {
            border-color: var(--accent-primary) !important;
            box-shadow: 0 0 0 2px var(--accent-primary);
        }
        body.dark .chat-input-drag-over {
            border-color: var(--accent-primary-dark) !important;
            box-shadow: 0 0 0 2px var(--accent-primary-dark);
        }

        /* Input control buttons - unified from Code 2 */
        #add-chat-attachment-btn {
            background-color: var(--input-btn-bg-light);
            color: var(--input-btn-text-light);
        }
        #add-chat-attachment-btn:hover {
            background-color: color-mix(in srgb, var(--input-btn-bg-light) 80%, black 10%);
        }

        #send-chat-btn {
            background-color: var(--accent-primary);
            color: white; /* Text color always white for send button */
        }
        #send-chat-btn:disabled {
            background-color: color-mix(in srgb, var(--accent-primary) 50%, transparent);
            cursor: not-allowed;
        }

        body.dark #add-chat-attachment-btn {
            background-color: var(--input-btn-bg-dark);
            color: var(--input-btn-text-dark);
        }
        body.dark #add-chat-attachment-btn:hover {
            background-color: color-mix(in srgb, var(--input-btn-bg-dark) 80%, white 10%);
        }
        body.dark #send-chat-btn {
            background-color: var(--accent-primary-dark);
            color: white; /* Text color always white for send button */
        }
        body.dark #send-chat-btn:disabled {
            background-color: color-mix(in srgb, var(--accent-primary-dark) 50%, transparent);
        }
        
        #add-chat-attachment-btn .lucide, #send-chat-btn .lucide {
            color: inherit; /* inherit color from button */
        }

        /* Fixed: Dark mode toggle colors (simplified for robustness) */
        .slider {
            background-color: #d1d5db; /* Default track color (unchecked, light) */
            transition: .4s;
        }
        /* Removed the conflicting .dark .slider rule. The checked state now properly takes precedence. */
        .slider:before {
            background-color: white; /* Thumb color always white */
            transition: .4s;
        }
        input:checked + .slider {
            background-color: var(--accent-primary); /* Track color when checked (dark mode active) */
        }
        input:checked + .slider:before {
            transform: translateX(24px);
        }

        /* Styles for the chat-specific error message - unified from Code 2 */
        #chat-error-message {
            margin-bottom: 1rem;
            background-color: color-mix(in srgb, var(--accent-error) 20%, white);
            border: 1px solid color-mix(in srgb, var(--accent-error) 50%, transparent);
            color: color-mix(in srgb, var(--accent-error) 80%, black);
            padding: 0.75rem 1.25rem;
            border-radius: 0.75rem;
            font-size: 0.875rem;
            align-items: center; /* These will apply when display is not 'none' */
            gap: 0.5rem;          /* These will apply when display is not 'none' */
        }
        body.dark #chat-error-message {
            background-color: color-mix(in srgb, var(--accent-error) 20%, black);
            border-color: color-mix(in srgb, var(--accent-error) 50%, transparent);
            color: color-mix(in srgb, var(--accent-error) 60%, white);
        }

        /* Ensure PDF export content is always hidden */
        #pdf-export-content {
            display: none !important; 
        }
    </style>
</head>
<body class="antialiased theme-default dark">

    <!-- Main Chat Container (takes full screen) -->
    <div id="main-chat-container">
        <!-- Header for the chat -->
        <div class="header-section p-4 md:p-6 flex justify-between items-center border-b flex-shrink-0">
            <h1 class="text-2xl sm:text-3xl font-bold">Mystic Vision AI Mini</h1>
            <div class="flex items-center space-x-4 relative">
                <!-- Theme Selector -->
                <div class="relative">
                    <button id="theme-selector-btn" aria-label="Select Theme" class="flex items-center justify-center w-10 h-10 rounded-full shadow-sm transition-all duration-300 flex-shrink-0">
                        <span data-lucide="palette" class="w-5 h-5"></span>
                    </button>
                    <div id="theme-dropdown" class="actions-dropdown hidden left-0 right-auto" style="bottom: auto; top: calc(100% + 8px);">
                        <button class="theme-option w-full justify-start text-left" data-theme="default">
                            <span data-lucide="sun" class="w-5 h-5"></span> Default
                        </button>
                        <button class="theme-option w-full justify-start text-left" data-theme="badass-black">
                            <span data-lucide="moon" class="w-5 h-5"></span> Badass Black
                        </button>
                        <button class="theme-option w-full justify-start text-left" data-theme="golden-glory">
                            <span data-lucide="sparkles" class="w-5 h-5"></span> Golden Glory
                        </button>
                        <button class="theme-option w-full justify-start text-left" data-theme="minimal-criminal">
                            <span data-lucide="square" class="w-5 h-5"></span> Minimal Criminal
                        </button>
                        <button class="theme-option w-full justify-start text-left" data-theme="la-futura">
                            <span data-lucide="zap" class="w-5 h-5"></span> La Futura
                        </button>
                        <button class="theme-option w-full justify-start text-left" data-theme="gods-plan">
                            <span data-lucide="leaf" class="w-5 h-5"></span> God's Plan
                        </button>
                        <button class="theme-option w-full justify-start text-left" data-theme="the-ecstacy">
                            <span data-lucide="star" class="w-5 h-5"></span> The Ecstacy
                        </button>
                    </div>
                </div>

                <!-- New Chat Button -->
                <button id="new-chat-btn" aria-label="Start New Chat" class="flex items-center justify-center w-10 h-10 rounded-full shadow-sm transition-all duration-300 flex-shrink-0">
                    <span data-lucide="message-square-plus" class="w-5 h-5"></span>
                </button>
                
                <!-- Dark Mode Toggle -->
                <span class="text-gray-500 text-sm hidden sm:inline">Light</span>
                <label class="switch relative inline-block w-14 h-8">
                    <input type="checkbox" id="dark-mode-toggle" class="opacity-0 w-0 h-0">
                    <span class="slider absolute cursor-pointer top-0 left-0 right-0 bottom-0 rounded-full before:absolute before:content-[''] before:h-6 before:w-6 before:left-1 before:bottom-1 before:rounded-full"></span>
                </label>
                <span class="text-gray-500 text-sm hidden sm:inline">Dark</span>
            </div>
        </div>
        
        <!-- Chat history div with a minimum height and scroll -->
        <div id="chat-history" class="p-4 overflow-y-auto flex-1 flex flex-col">
            <!-- Dynamic error message for chat -->
            <div id="chat-error-message" class="hidden" role="alert">
                <span data-lucide="alert-circle" class="w-5 h-5 flex-shrink-0"></span>
                <span id="chat-error-text"></span>
            </div>
            <!-- Chat messages will be appended here by JS -->
        </div>
        
        <!-- Chat input section with attachment, voice and send button -->
        <div class="p-4 border-t relative flex-shrink-0">
            <!-- Attachment preview -->
            <div id="chat-attachments-preview-container" class="mb-2 flex flex-wrap items-center gap-2 hidden">
                <!-- Attachments previews will be dynamically added here -->
            </div>

            <!-- Dropdown for attachment/voice buttons -->
            <div id="chat-actions-dropdown" class="actions-dropdown hidden">
                <button id="voice-input-btn" class="w-full justify-start text-left">
                    <span data-lucide="mic" class="w-5 h-5"></span> Voice Input
                </button>
                <label for="chat-image-upload" class="w-full justify-start text-left">
                    <span data-lucide="paperclip" class="w-5 h-5"></span> Attach File
                </label>
                <input type="file" id="chat-image-upload" accept="image/*, .txt, .pdf, .csv, .json, .xml, .md" class="hidden" multiple>
            </div>

            <div class="flex gap-2 items-end">
                <!-- MODIFIED: Input box width adjusted for mobile -->
                <input type="text" id="chat-input" class="chat-input p-3 rounded-full border transition-colors shadow-sm w-[calc(100%-112px)] sm:flex-1 min-w-0" placeholder="Ask a question or type a command...">
                
                <button id="add-chat-attachment-btn" aria-label="Add attachment or voice input" class="flex items-center justify-center w-12 h-12 rounded-full shadow-lg cursor-pointer transition-all duration-300 flex-shrink-0">
                    <span data-lucide="plus" class="w-5 h-5"></span>
                </button>

                <button id="send-chat-btn" aria-label="Send Message" class="flex items-center justify-center w-12 h-12 rounded-full shadow-lg transition-all duration-300 disabled:cursor-not-allowed flex-shrink-0">
                    <span data-lucide="send" class="w-5 h-5"></span>
                </button>
            </div>
        </div>
    </div>
    
    <!-- Temporary message for clipboard copy -->
    <div id="copy-message">Text copied to clipboard!</div>

    <!-- Hidden div for PDF export template (retained for dependency consistency, not actively used by chat) -->
    <div id="pdf-export-content">
        <div class="pdf-header">
            <span data-lucide="message-square" class="w-8 h-8"></span>
            <h1>AI Chat History</h1>
            <p>Generated on <span id="pdf-date"></span></p>
        </div>
        <div class="pdf-body">
            <!-- Chat history will be inserted here if PDF export for chat were implemented -->
        </div>
        <div class="pdf-footer">
            Powered by Gemini AI | Mystic Vision AI Mini
        </div>
    </div>

    <script type="text/javascript">
        // Register Service Worker for PWA capabilities
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/service-worker.js')
                    .then(registration => {
                        console.log('ServiceWorker registration successful with scope: ', registration.scope);
                    })
                    .catch(err => {
                        console.log('ServiceWorker registration failed: ', err);
                    });
            });
        }

        // JavaScript for chat functionality
        
        // This function call is from the Lucide Icon library to replace all `<span>` tags with the corresponding SVG icons
        const createIcons = () => {
            if (typeof lucide !== 'undefined') {
                lucide.createIcons();
            }
        };

        window.addEventListener('load', () => {
             createIcons();
        });

        // Chat elements
        const mainChatContainer = document.getElementById('main-chat-container');
        const darkModeToggle = document.getElementById('dark-mode-toggle');
        const chatHistoryDiv = document.getElementById('chat-history');
        const chatInput = document.getElementById('chat-input');
        const sendChatBtn = document.getElementById('send-chat-btn');
        const chatImageUpload = document.getElementById('chat-image-upload');
        const chatAttachmentsPreviewContainer = document.getElementById('chat-attachments-preview-container'); 
        const voiceInputBtn = document.getElementById('voice-input-btn');
        const addChatAttachmentBtn = document.getElementById('add-chat-attachment-btn');
        const chatActionsDropdown = document.getElementById('chat-actions-dropdown');
        const chatErrorMessageDiv = document.getElementById('chat-error-message');
        const chatErrorText = document.getElementById('chat-error-text');
        
        // New elements for theme and new chat (from Code 2)
        const newChatBtn = document.getElementById('new-chat-btn');
        const themeSelectorBtn = document.getElementById('theme-selector-btn');
        const themeDropdown = document.getElementById('theme-dropdown');
        const themeOptions = document.querySelectorAll('.theme-option');
        
        // Copy message element
        const copyMessage = document.getElementById('copy-message');

        let chatAttachments = []; // Array to store {file: File, mimeType: string, data: string} for chat
        let chatHistory = []; // Conversation history for the Gemini API
        
        // Web Speech API related variables for text-to-speech
        let currentUtterance = null;
        let isSpeaking = false;
        let messageTextCache = new Map(); // Store message content for copy/dictate

        // Speech Recognition variables
        let SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        let recognition = null;
        let isVoiceInputActive = false;
        let finalTranscript = ''; // Stores the accumulated final transcript for speech input

        // --- GEMINI API Key ---
        // !! IMPORTANT: REPLACE WITH YOUR ACTUAL GEMINI API KEY !!
        // !! DO NOT USE THIS METHOD IN PRODUCTION. USE A SERVER-SIDE PROXY. !!
        // The key below is a placeholder and WILL NOT WORK.
        // Get your API key from Google AI Studio: https://makersuite.google.com/
        const GEMINI_API_KEY = 'AIzaSyCzx6ReMk8ohPJcCjGwHHzu7SvFccJqAbA'; // <--- REPLACE THIS WITH YOUR ACTUAL KEY

        /**
         * Displays a chat-specific error message.
         * @param {string} message The error message to display.
         */
        function showChatError(message) {
            chatErrorText.textContent = message;
            chatErrorMessageDiv.classList.remove('hidden');
            chatErrorMessageDiv.classList.add('flex'); // Explicitly add flex to make it visible
            // Hide after 5 seconds
            setTimeout(() => {
                chatErrorMessageDiv.classList.add('hidden');
                chatErrorMessageDiv.classList.remove('flex'); // Explicitly remove flex when hiding
                chatErrorText.textContent = '';
            }, 5000);
        }

        // Initialize SpeechRecognition if available
        if (SpeechRecognition) {
            recognition = new SpeechRecognition();
            recognition.continuous = true; // Keep listening for multiple phrases
            recognition.interimResults = true; // Show results while speaking
            recognition.lang = 'en-US';

            recognition.onstart = () => {
                isVoiceInputActive = true;
                voiceInputBtn.classList.add('voice-input-active');
                updateButtonIcon(voiceInputBtn, 'mic-off', 'w-5 h-5'); // Change icon to indicate listening in dropdown
                chatInput.placeholder = 'Listening... Speak now.';
                finalTranscript = ''; // Clear previous transcript for a new session
                chatInput.value = ''; // Clear input field
                chatActionsDropdown.classList.add('hidden'); // Hide dropdown when voice input starts
                chatErrorMessageDiv.classList.add('hidden'); // Hide any previous errors
                chatErrorMessageDiv.classList.remove('flex'); // Ensure it's not flex when starting a new operation
            };

            recognition.onresult = (event) => {
                let interimTranscript = '';
                for (let i = event.resultIndex; i < event.results.length; ++i) {
                    if (event.results[i].isFinal) {
                        finalTranscript += event.results[i][0].transcript + ' '; // Add space for readability
                    } else {
                        interimTranscript += event.results[i][0].transcript;
                    }
                }
                chatInput.value = finalTranscript + interimTranscript; // Update input with current recognition
                chatInput.scrollLeft = chatInput.scrollWidth; // Scroll to end
            };

            recognition.onend = () => {
                isVoiceInputActive = false;
                voiceInputBtn.classList.remove('voice-input-active');
                updateButtonIcon(voiceInputBtn, 'mic', 'w-5 h-5'); // Reset icon to mic in dropdown
                chatInput.placeholder = 'Ask a question or type a command...';

                // If there's a final transcript, populate the input field.
                if (finalTranscript.trim() !== '') {
                    chatInput.value = finalTranscript.trim(); // Ensure final transcript is in the input
                } else if (chatInput.value.trim() === '') {
                    // If recognition ended with no final transcript and input is empty, clear it
                    chatInput.value = ''; 
                }
            };

            recognition.onerror = (event) => {
                isVoiceInputActive = false; // Important: reset state on error
                voiceInputBtn.classList.remove('voice-input-active');
                updateButtonIcon(voiceInputBtn, 'mic', 'w-5 h-5'); // Reset icon
                chatInput.placeholder = 'Ask a question or type a command...';
                chatActionsDropdown.classList.add('hidden'); // Hide dropdown on error too

                console.error('Speech recognition error:', event.error);
                let errorMessage = `Speech recognition error: ${event.error}`;
                if (event.error === 'not-allowed') {
                    errorMessage = 'Microphone access denied. Please allow microphone access in your browser settings.';
                } else if (event.error === 'no-speech') {
                    console.log('No speech detected, recognition ended.');
                    if (finalTranscript.trim() === '') {
                        chatInput.value = '';
                    }
                } else if (event.error === 'network') {
                    errorMessage = 'Speech recognition network error. This often means a firewall, proxy, or browser extension is blocking access to Google\'s speech services. Please try disabling extensions or testing in incognito mode.';
                }
                showChatError(errorMessage);
            };
            
            // Optional: Listen for audio start/end for more granular control/feedback
            recognition.onaudiostart = () => {
                // console.log('Audio capturing started.');
            };

            recognition.onaudioend = () => {
                // console.log('Audio capturing ended.');
            };

        } else {
            console.warn('Web Speech API (SpeechRecognition) not supported in this browser. Voice input button will be hidden.');
            voiceInputBtn.style.display = 'none'; // Hide the voice input button if not supported
        }

        // --- Theme and Dark Mode Logic (from Code 2) ---
        const ALL_THEME_CLASSES = ['theme-default', 'theme-badass-black', 'theme-golden-glory', 'theme-minimal-criminal', 'theme-la-futura', 'theme-gods-plan', 'theme-the-ecstacy'];

        function applyTheme(themeName) {
            document.body.classList.remove(...ALL_THEME_CLASSES);
            document.body.classList.add(`theme-${themeName}`);
            localStorage.setItem('selected-theme', themeName);
        }

        function applyDarkMode(isDark) {
            if (isDark) {
                document.body.classList.remove('light');
                document.body.classList.add('dark');
            } else {
                document.body.classList.remove('dark');
                document.body.classList.add('light');
            }
            localStorage.setItem('dark-mode', isDark);
        }

        // Initialize theme and dark mode on load
        window.addEventListener('load', () => {
            // Default to 'default' theme if nothing is set
            const savedTheme = localStorage.getItem('selected-theme') || 'default';
            applyTheme(savedTheme);

            // Default to dark mode if nothing is set, matching Code 1's initial state
            const isDarkMode = localStorage.getItem('dark-mode') !== 'false'; // 'null' or 'true' means dark
            darkModeToggle.checked = isDarkMode;
            applyDarkMode(isDarkMode);

            createIcons(); // Ensure all icons are rendered after initial setup
            
            // Initial AI greeting message (moved to startNewChat)
            startNewChat(false); // Do not play greeting sound on load
        });

        darkModeToggle.addEventListener('change', () => {
            applyDarkMode(darkModeToggle.checked);
        });

        // Event listener for theme selector dropdown button
        themeSelectorBtn.addEventListener('click', (event) => {
            event.stopPropagation();
            themeDropdown.classList.toggle('hidden');
            createIcons(); // Ensure icons within dropdown are rendered
        });

        // Event listeners for individual theme options
        themeOptions.forEach(button => {
            button.addEventListener('click', (event) => {
                const themeName = event.currentTarget.dataset.theme;
                applyTheme(themeName);
                themeDropdown.classList.add('hidden'); // Hide dropdown after selection
                chatInput.focus();
            });
        });

        // Close dropdowns when clicking anywhere else on the document
        document.addEventListener('click', (event) => {
            if (!chatActionsDropdown.contains(event.target) && !addChatAttachmentBtn.contains(event.target)) {
                chatActionsDropdown.classList.add('hidden');
            }
            // Also close the theme dropdown
            if (!themeDropdown.contains(event.target) && !themeSelectorBtn.contains(event.target)) {
                themeDropdown.classList.add('hidden');
            }
        });

        // Function to convert a file to a Base64 string and return its MIME type and data
        const fileToBase64 = (file) => {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve({
                    mimeType: file.type || 'application/octet-stream', // Fallback MIME type
                    data: reader.result.split(',')[1]
                });
                reader.onerror = error => reject(error);
                reader.readAsDataURL(file);
            });
        };

        // Function to get Lucide icon name based on MIME type
        function getFileIcon(mimeType) {
            if (mimeType.startsWith('image/')) return 'image';
            if (mimeType === 'application/pdf') return 'file-text';
            if (mimeType.includes('text/')) return 'file-text';
            if (mimeType.includes('csv') || mimeType.includes('excel')) return 'file-spreadsheet';
            if (mimeType.includes('json') || mimeType.includes('xml') || mimeType.includes('code') || mimeType.includes('markdown')) return 'file-code';
            return 'file';
        }
        
        // --- Marked.js Custom Renderer for Code Blocks ---
        const renderer = {
            code(code, lang) {
                let actualCodeContent;
                if (typeof code === 'object' && code !== null && typeof code.text === 'string') {
                    actualCodeContent = code.text;
                } else if (typeof code !== 'string') {
                    actualCodeContent = String(code);
                } else {
                    actualCodeContent = code;
                }

                const languageDisplay = lang ? `<span class="text-xs font-semibold uppercase text-gray-400">${lang}</span>` : '';
                const uniqueId = `code-block-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
                
                const escapedCode = actualCodeContent.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');

                return `
                    <div class="code-block-container">
                        <div class="code-block-header">
                            ${languageDisplay}
                            <button class="code-block-copy-button" data-copy-target="${uniqueId}">
                                <span data-lucide="clipboard" class="w-4 h-4"></span>
                                Copy code
                            </button>
                        </div>
                        <pre><code id="${uniqueId}">${escapedCode}</code></pre>
                    </div>
                `;
            }
        };

        marked.use({ renderer });

        /**
         * Helper function to update a Lucide icon displayed within a button.
         * Removes the existing SVG and adds a new span for Lucide to convert.
         * @param {HTMLElement} buttonElement The button element containing the icon.
         * @param {string} newIconName The Lucide icon name (e.g., 'check', 'clipboard').
         * @param {string} [classList] Optional additional classes for the new span. Defaults to 'w-4 h-4' for action buttons.
         */
        function updateButtonIcon(buttonElement, newIconName, classList = 'w-4 h-4') {
            // Remove existing Lucide SVG (it will have the 'lucide' class)
            let currentIconSvg = buttonElement.querySelector('.lucide');
            if (currentIconSvg) {
                currentIconSvg.remove();
            }

            // Create a new span element
            const newIconSpan = document.createElement('span');
            newIconSpan.setAttribute('data-lucide', newIconName);
            newIconSpan.className = classList; // Apply styling classes

            // Append the new span to the button
            buttonElement.appendChild(newIconSpan);
           
            createIcons(); // Trigger Lucide to convert the new span to SVG
        }


        // Function to append a message to the chat history
        function appendChatMessage(role, text, attachments = []) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('chat-message', role);
            
            // Unique ID for the message to reference its content
            const messageId = `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
            messageDiv.dataset.messageId = messageId;
            
            let contentHTML = '';
            let rawMessageContentForCache = text; // To store plain text for copy/dictate

            if (role === 'user') {
                contentHTML += text; // User text is plain HTML
                if (attachments.length > 0) {
                    contentHTML += `<div class="mt-2 flex flex-wrap gap-2">`;
                    attachments.forEach(attachment => {
                        if (attachment.mimeType.startsWith('image/')) {
                            contentHTML += `<img src="data:${attachment.mimeType};base64,${attachment.data}" alt="${attachment.name || 'User attachment'}" class="chat-image w-24 h-24 object-cover">`;
                        } else {
                            // For non-image files, display an icon and file name
                            contentHTML += `
                                <div class="flex items-center space-x-1 p-2 bg-gray-100 dark:bg-gray-600 rounded-md text-sm">
                                    <span data-lucide="${getFileIcon(attachment.mimeType)}" class="w-4 h-4 flex-shrink-0"></span>
                                    <span class="truncate max-w-[120px]">${attachment.name || 'File'}</span>
                                </div>
                            `;
                        }
                    });
                    contentHTML += `</div>`;
                    rawMessageContentForCache += `\n[Attachments: ${attachments.map(a => a.name).join(', ')}]`;
                }
            } else { // AI message
                contentHTML = `<div class="message-content">${marked.parse(text)}</div>`;
            }
            
            // Set the raw text in cache, accounting for actual content for dictation
            messageTextCache.set(messageId, rawMessageContentForCache); 

            // Add action buttons
            const actionsHTML = `
                <div class="message-actions">
                    <button class="copy-message-btn" title="Copy message" data-message-id="${messageId}">
                        <span data-lucide="clipboard" class="w-4 h-4"></span>
                    </button>
                    <button class="dictate-message-btn" title="Dictate message" data-message-id="${messageId}">
                        <span data-lucide="volume-2" class="w-4 h-4"></span>
                    </button>
                </div>
            `;
            
            messageDiv.innerHTML = contentHTML + actionsHTML;
            chatHistoryDiv.appendChild(messageDiv);
            
            // Animate message pop-in
            setTimeout(() => {
                messageDiv.style.transform = 'scale(1)';
            }, 10);
            
            chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
            
            // Call createIcons() after adding new content to the chat history
            createIcons();
        }
        
        // Event listener for chat image/file upload
        chatImageUpload.addEventListener('change', async (event) => {
            const files = Array.from(event.target.files);
            if (files.length > 0) {
                // Reuse the new unified file handler
                await handleDroppedOrPastedFiles(files); 
            }
            chatActionsDropdown.classList.add('hidden'); // Hide dropdown after selection
        });

        // Function to display chat attachments
        function displayChatAttachments() {
            chatAttachmentsPreviewContainer.innerHTML = '';
            if (chatAttachments.length > 0) {
                chatAttachmentsPreviewContainer.classList.remove('hidden');
                chatAttachments.forEach((attachment, index) => {
                    const attachmentDiv = document.createElement('div');
                    attachmentDiv.classList.add('chat-attachment-preview-item');
                    attachmentDiv.dataset.index = index;

                    let previewContent = '';
                    if (attachment.mimeType.startsWith('image/')) {
                        previewContent = `<img src="data:${attachment.mimeType};base64,${attachment.data}" alt="${attachment.name}" class="w-8 h-8 object-cover rounded-md">`;
                    } else {
                        previewContent = `<span data-lucide="${getFileIcon(attachment.mimeType)}" class="w-5 h-5 flex-shrink-0"></span>`;
                    }

                    attachmentDiv.innerHTML = `
                        ${previewContent}
                        <span class="truncate max-w-[100px]">${attachment.name}</span>
                        <button class="remove-attachment-btn">
                            <span data-lucide="x" class="w-4 h-4"></span>
                        </button>
                    `;
                    chatAttachmentsPreviewContainer.appendChild(attachmentDiv);
                });
                createIcons(); // Re-render icons for new attachments
            } else {
                chatAttachmentsPreviewContainer.classList.add('hidden');
            }
        }

        // Event listener for removing individual chat attachments (using event delegation)
        chatAttachmentsPreviewContainer.addEventListener('click', (event) => {
            const removeBtn = event.target.closest('.remove-attachment-btn');
            if (removeBtn) {
                const attachmentDiv = removeBtn.closest('[data-index]');
                if (attachmentDiv) {
                    const index = parseInt(attachmentDiv.dataset.index);
                    chatAttachments.splice(index, 1); // Remove from array
                    displayChatAttachments(); // Re-render preview
                    chatInput.focus();
                }
            }
        });
        
        // Event listener for sending chat messages
        sendChatBtn.addEventListener('click', async () => {
            const userMessage = chatInput.value.trim();
            if (!userMessage && chatAttachments.length === 0) {
                return;
            }
            
            // Stop speech recognition if active before sending
            if (isVoiceInputActive && recognition) {
                recognition.stop();
            }

            // Hide dropdown if open
            chatActionsDropdown.classList.add('hidden');
            chatErrorMessageDiv.classList.add('hidden'); // Hide any previous errors
            chatErrorMessageDiv.classList.remove('flex'); // Ensure it's not flex when starting a new operation

            // Build the parts for the user message
            const userParts = [];
            if (userMessage) {
                userParts.push({ text: userMessage });
            }
            for (const attachment of chatAttachments) {
                userParts.push({
                    inlineData: {
                        mimeType: attachment.mimeType,
                        data: attachment.data
                    }
                });
            }

            // Append user message and attachments to chat history and UI
            chatHistory.push({ role: 'user', parts: userParts });
            appendChatMessage('user', userMessage, chatAttachments);
            
            // Clear input and attachment after sending
            chatInput.value = '';
            chatAttachments = [];
            chatImageUpload.value = ''; // Clear file input
            displayChatAttachments(); // Clear attachment previews
            
            sendChatBtn.disabled = true;
            
            // Show loading indicator
            const loadingMessage = document.createElement('div');
            loadingMessage.id = 'chat-loading';
            loadingMessage.classList.add('p-4', 'text-center', 'text-gray-500', 'text-sm');
            loadingMessage.innerHTML = `
                <div class="loader-container h-8">
                    <div class="loader-dot"></div>
                    <div class="loader-dot"></div>
                    <div class="loader-dot"></div>
                </div>
                <span class="mt-2 block">AI is typing...</span>
            `;
            chatHistoryDiv.appendChild(loadingMessage);
            chatHistoryDiv.scrollTop = chatHistoryDiv.scrollHeight;
            
            try {
                // Call API with full chat history
                const payload = {
                    contents: chatHistory,
                };
                
                const responseText = await callGeminiAPI(payload);
                
                // Append AI response to chat history and UI
                chatHistory.push({ role: 'model', parts: [{ text: responseText }] });
                appendChatMessage('ai', responseText);
                
            } catch (error) {
                console.error('Chat API call failed:', error);
                showChatError(`An error occurred in the chat: ${error.message}`);
            } finally {
                sendChatBtn.disabled = false;
                const loadingDiv = document.getElementById('chat-loading');
                if (loadingDiv) {
                    loadingDiv.remove();
                }
                chatInput.focus();
            }
        });
        
        // Add event listener for the 'Enter' key on the chat input
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendChatBtn.click();
            }
        });

        // Event listener for voice input button (now inside dropdown)
        voiceInputBtn.addEventListener('click', () => {
            if (recognition) {
                if (isVoiceInputActive) {
                    recognition.stop(); // Manually stop recognition
                } else {
                    finalTranscript = ''; // Reset transcript when starting a new session
                    recognition.start();
                }
            } else {
                showChatError('Speech recognition is not supported in this browser.');
            }
        });

        // Event listener for the new "Add" button to toggle dropdown
        addChatAttachmentBtn.addEventListener('click', (event) => {
            event.stopPropagation(); // Prevent document click from immediately closing it
            chatActionsDropdown.classList.toggle('hidden');
            createIcons(); // Ensure icons within dropdown are rendered
        });

        // --- NEW: Unified File Handling Logic (Drag & Drop, Paste, Manual Upload) ---
        async function handleDroppedOrPastedFiles(files) {
            chatErrorMessageDiv.classList.add('hidden'); // Hide any previous errors
            chatErrorMessageDiv.classList.remove('flex');

            if (files.length > 0) {
                for (const file of files) {
                    const allowedTypes = [
                        'image/', 'text/', 'application/pdf',
                        'application/json', 'text/csv', 'application/xml', 'text/markdown'
                    ];
                    const isAllowed = allowedTypes.some(type => file.type.startsWith(type)) || file.name.endsWith('.md');

                    if (isAllowed) {
                        try {
                            const { mimeType, data } = await fileToBase64(file);
                            chatAttachments.push({ file, mimeType, data, name: file.name });
                        } catch (error) {
                            showChatError(`Failed to read file ${file.name}.`);
                            console.error('File read error:', error);
                        }
                    } else {
                        showChatError(`File type not supported: ${file.name} (${file.type}).`);
                    }
                }
                displayChatAttachments();
                chatInput.focus();
            }
        }

        // --- NEW: Drag and Drop for Chat Input Box ---
        chatInput.addEventListener('dragover', (e) => {
            e.preventDefault();
            e.stopPropagation(); // Prevent mainChatContainer's dragover from also triggering
            e.currentTarget.classList.add('chat-input-drag-over');
        });

        chatInput.addEventListener('dragleave', (e) => {
            e.preventDefault();
            e.stopPropagation();
            e.currentTarget.classList.remove('chat-input-drag-over');
        });

        chatInput.addEventListener('drop', async (e) => {
            e.preventDefault();
            e.stopPropagation(); // Prevent mainChatContainer's drop from also triggering
            e.currentTarget.classList.remove('chat-input-drag-over');
            await handleDroppedOrPastedFiles(Array.from(e.dataTransfer.files));
        });

        // --- NEW: Paste Files into Chat Input Box ---
        chatInput.addEventListener('paste', async (e) => {
            const files = Array.from(e.clipboardData.files);
            if (files.length > 0) {
                e.preventDefault(); // Prevent default text paste behavior if files are detected
                e.stopPropagation();
                await handleDroppedOrPastedFiles(files);
            }
            // If no files are present, allow default text paste to occur
        });

        // --- Existing Drag and Drop for Main Chat Container (General Fallback) ---
        mainChatContainer.addEventListener('dragover', (e) => {
            e.preventDefault();
            e.stopPropagation();
            mainChatContainer.classList.add('drag-over-active');
        });

        mainChatContainer.addEventListener('dragleave', (e) => {
            e.preventDefault();
            e.stopPropagation();
            mainChatContainer.classList.remove('drag-over-active');
        });

        mainChatContainer.addEventListener('drop', async (e) => {
            e.preventDefault();
            e.stopPropagation();
            mainChatContainer.classList.remove('drag-over-active');
            // This will only trigger if the drop happened *outside* the chat input due to stopPropagation on chatInput
            await handleDroppedOrPastedFiles(Array.from(e.dataTransfer.files));
        });


        // Event delegation for copy code buttons within chat history
        chatHistoryDiv.addEventListener('click', (event) => {
            // Handle code block copy button
            const codeCopyButton = event.target.closest('.code-block-copy-button');
            if (codeCopyButton) {
                const targetId = codeCopyButton.dataset.copyTarget;
                const codeElement = document.getElementById(targetId);
                if (codeElement) {
                    const codeToCopy = codeElement.textContent;
                    // For code block copy button, its own icon changes
                    updateButtonIcon(codeCopyButton, 'check', 'w-4 h-4'); // Explicitly pass classList for code buttons
                    copyToClipboard(codeToCopy); 
                    setTimeout(() => { // Reset icon after 2 seconds
                        updateButtonIcon(codeCopyButton, 'clipboard', 'w-4 h-4'); // Explicitly pass classList
                    }, 2000);
                    return; // Prevent further bubbling for this button
                }
            }

            // Handle chat message copy button
            const chatCopyButton = event.target.closest('.copy-message-btn');
            if (chatCopyButton) {
                const messageId = chatCopyButton.dataset.messageId;
                const messageContent = messageTextCache.get(messageId);
                if (messageContent) {
                    // For chat message copy button, its own icon changes
                    updateButtonIcon(chatCopyButton, 'check');
                    copyToClipboard(messageContent); 
                    setTimeout(() => { // Reset icon after 2 seconds
                        updateButtonIcon(chatCopyButton, 'clipboard');
                    }, 2000);
                } else {
                    showChatError('Message content not found for copying.');
                }
                return; // Prevent further bubbling
            }

            // Handle dictate message button
            const dictateButton = event.target.closest('.dictate-message-btn');
            if (dictateButton) {
                const messageId = dictateButton.dataset.messageId;
                const messageContent = messageTextCache.get(messageId);
                if (messageContent) {
                    toggleSpeech(messageContent, dictateButton);
                } else {
                    showChatError('Message content not found for dictation.');
                }
                return; // Prevent further bubbling
            }
        });

        // Helper function to copy text to clipboard
        function copyToClipboard(text) { 
            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(text)
                    .then(() => {
                        showCopyMessage();
                    })
                    .catch(err => {
                        console.error('Failed to copy: ', err);
                        showChatError('Failed to copy text. Please copy manually.');
                    });
            } else {
                // Fallback for older browsers
                const tempTextArea = document.createElement('textarea');
                tempTextArea.value = text;
                document.body.appendChild(tempTextArea);
                tempTextArea.select();
                try {
                    document.execCommand('copy');
                    showCopyMessage();
                } catch (err) {
                    console.error('Failed to copy (fallback):', err);
                    showChatError('Failed to copy text. Please copy manually.');
                }
                document.body.removeChild(tempTextArea);
            }
        }

        // Helper function for text-to-speech
        function toggleSpeech(text, buttonElement) {
            if (!window.speechSynthesis) {
                showChatError('Speech synthesis not supported in this browser.');
                return;
            }

            // Check if this specific message is currently being spoken
            if (isSpeaking && currentUtterance && currentUtterance.text === text) {
                // If the same message is currently being spoken, toggle pause/resume
                if (window.speechSynthesis.paused) {
                    window.speechSynthesis.resume();
                    updateButtonIcon(buttonElement, 'pause');
                } else {
                    window.speechSynthesis.pause();
                    updateButtonIcon(buttonElement, 'volume-2');
                }
            } else {
                // If a different message is speaking, or nothing is speaking, start new speech
                startSpeech(text, buttonElement);
            }
        }

        function startSpeech(text, buttonElement) {
            // Cancel any existing speech first
            if (window.speechSynthesis.speaking || window.speechSynthesis.paused) {
                window.speechSynthesis.cancel();
            }

            // Reset all other dictate buttons to play state
            document.querySelectorAll('.dictate-message-btn').forEach(btn => {
                if (btn !== buttonElement) { // Don't reset the button that initiated the current speech
                    updateButtonIcon(btn, 'volume-2'); 
                }
            });

            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'en-US'; // Set language

            utterance.onstart = () => {
                isSpeaking = true;
                currentUtterance = utterance;
                updateButtonIcon(buttonElement, 'pause');
            };
            utterance.onend = () => {
                isSpeaking = false;
                currentUtterance = null;
                updateButtonIcon(buttonElement, 'volume-2');
            };
            utterance.onerror = (event) => {
                console.error('Speech synthesis error:', event.error);
                showChatError('Failed to dictate message. Check console for details.');
                isSpeaking = false;
                currentUtterance = null;
                updateButtonIcon(buttonElement, 'volume-2');
            };

            window.speechSynthesis.speak(utterance);
        }

        // Function to show a temporary message for clipboard copy
        function showCopyMessage() {
            copyMessage.classList.add('show');
            setTimeout(() => {
                copyMessage.classList.remove('show');
            }, 3000);
        }

        // Generic API call function with exponential backoff
        async function callGeminiAPI(payload) {
            if (GEMINI_API_KEY === "" || !GEMINI_API_KEY || GEMINI_API_KEY === "") { 
                throw new Error("API Key is not set or is the default placeholder. Please replace 'AIzaSyCzx6ReMk8ohPJcCjGwHHzu7SvFccJqAbA' in the script with your actual Gemini API key.");
            }

            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${GEMINI_API_KEY}`;

            let response;
            let result;
            let success = false;
            let retryCount = 0;
            const maxRetries = 3;
            let delay = 1000; // 1 second initial delay

            while (retryCount < maxRetries && !success) {
                try {
                    response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (response.status === 429) { // Too many requests
                        if (retryCount < maxRetries - 1) {
                            console.warn(`API rate limit exceeded. Retrying in ${delay / 1000}s...`);
                            await new Promise(res => setTimeout(res, delay));
                            delay *= 2; // Exponential backoff
                            retryCount++;
                        } else {
                            throw new Error('API rate limit exceeded. Please try again later.');
                        }
                    } else if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(`API error: ${response.status} ${response.statusText} - ${errorData.error?.message || 'Unknown error'}`);
                    } else {
                        result = await response.json();
                        success = true;
                    }
                } catch (err) {
                    if (retryCount < maxRetries - 1) {
                        console.warn(`Fetch error: ${err.message}. Retrying in ${delay / 1000}s...`);
                        await new Promise(res => setTimeout(res, delay));
                        delay *= 2;
                        retryCount++;
                    } else {
                        throw err; // Re-throw the last error after max retries
                    }
                }
            }
            
            if (result && result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                // Return the text content from the response
                return result.candidates[0].content.parts[0].text;
            } else {
                throw new Error('Failed to get a valid response from the AI. No candidates found or content is empty.');
            }
        }

        // --- NEW CHAT FUNCTIONALITY (from Code 2) ---
        function startNewChat(playGreetingSound = true) {
            chatHistory = []; // Clear conversation history
            chatAttachments = []; // Clear attachments
            chatHistoryDiv.innerHTML = ''; // Clear UI messages
            chatInput.value = ''; // Clear input field
            chatAttachmentsPreviewContainer.innerHTML = ''; // Clear attachment previews
            chatAttachmentsPreviewContainer.classList.add('hidden'); // Hide attachment container
            chatImageUpload.value = ''; // Clear file input
            messageTextCache.clear(); // Clear cached message content
            chatErrorMessageDiv.classList.add('hidden'); // Hide any errors
            chatErrorMessageDiv.classList.remove('flex');

            // Add the initial AI greeting message
            const greetingMessage = 'Hello! How can I help you today?';
            chatHistory.push({ role: 'model', parts: [{ text: greetingMessage }] });
            appendChatMessage('ai', greetingMessage);
            chatInput.focus();

            // Optionally dictate the greeting message
            if (playGreetingSound && window.speechSynthesis) {
                const utterance = new SpeechSynthesisUtterance(greetingMessage);
                utterance.lang = 'en-US';
                window.speechSynthesis.speak(utterance);
            }
        }

        // Event listener for the "New Chat" button
        newChatBtn.addEventListener('click', () => startNewChat());
    </script>
</body>
</html>

---------------------------------------------------------------------------------------------------------------------------------

i want to edit all the above four codes to add a section to switch between different versions.
the versions are : 

main version : https://mystic-vision-ai-standalone-chatbot.netlify.app/
lite version : https://mystic-vision-ai-lite.netlify.app/
basic version : https://mystic-vision-ai-basic.netlify.app/
mini version : https://mystic-vision-ai-mini.netlify.app/